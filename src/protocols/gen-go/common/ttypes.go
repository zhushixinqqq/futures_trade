// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package common

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Errno int64

const (
	Errno_UNKNOWN                                     Errno = 0
	Errno_SUCCESS                                     Errno = 1
	Errno_ERR_SP_TRADE_INFO_START                     Errno = 10000
	Errno_ERR_SP_TRADE_INFO_ERR                       Errno = 10001
	Errno_ERR_SP_TRADE_INFO_ADD_ORDER_ERR             Errno = 10002
	Errno_ERR_SP_TRADE_INFO_ACCOUNT_GET_STATUS        Errno = 10003
	Errno_ERR_SP_TRADE_INFO_GET_FUND_IN_OUT           Errno = 10004
	Errno_ERR_SP_TRADE_INFO_CHANGE_ORDER_ERR          Errno = 10005
	Errno_ERR_SP_TRADE_INFO_DEL_ORDER_ERR             Errno = 10006
	Errno_ERR_SP_TRADE_INFO_GET_ORDER_BY_NO_ERR       Errno = 10007
	Errno_ERR_SP_TRADE_INFO_SET_ORDER_INACTIVE_ERR    Errno = 10008
	Errno_ERR_SP_TRADE_INFO_GET_ACTIVE_ORDER_ERR      Errno = 10009
	Errno_ERR_SP_TRADE_INFO_GET_TRADE_ERR             Errno = 10010
	Errno_ERR_SP_TRADE_INFO_GET_POSITION_ERR          Errno = 10011
	Errno_ERR_SP_TRADE_INFO_GET_PRICE_ERR             Errno = 10012
	Errno_ERR_SP_TRADE_INFO_GET_ACC_INFO_ERR          Errno = 10013
	Errno_ERR_SP_TRADE_INFO_GET_TICKER_ERR            Errno = 10014
	Errno_ERR_SP_TRADE_INFO_CHANGE_PASSWD_ERR         Errno = 10015
	Errno_ERR_SP_TRADE_INFO_GET_HISORDER_ERR          Errno = 10016
	Errno_ERR_SP_TRADE_INFO_INDEX_INVALID             Errno = 10017
	Errno_ERR_SP_TRADE_INFO_QUOTEID_INVALID           Errno = 10018
	Errno_ERR_SP_TRADE_INFO_END                       Errno = 10999
	Errno_ERR_SP_PROXY_START                          Errno = 11000
	Errno_ERR_SP_PROXY_ACCNO_LOGIN_ERR                Errno = 11001
	Errno_ERR_SP_PROXY_CHANGEPASSWORD_ERR             Errno = 11002
	Errno_ERR_SP_PROXY_ADDORDER_ERR                   Errno = 11003
	Errno_ERR_SP_PROXY_DELETE_ERR                     Errno = 11004
	Errno_ERR_SP_PROXY_CHANGE_ERR                     Errno = 11005
	Errno_ERR_SP_PROXY_GETACTIVEORDER_ERR             Errno = 11006
	Errno_ERR_SP_PROXY_GETACTIVEORDER_NULL            Errno = 11007
	Errno_ERR_SP_PROXY_GETTRADE_ERR                   Errno = 11008
	Errno_ERR_SP_PROXY_GETTRADE_NULL                  Errno = 11009
	Errno_ERR_SP_PROXY_GETPOSITION_ERR                Errno = 11010
	Errno_ERR_SP_PROXY_GETPOSITION_NULL               Errno = 11011
	Errno_ERR_SP_PROXY_GETACCINFO_ERR                 Errno = 11012
	Errno_ERR_SP_PROXY_GETACCINFO_NULL                Errno = 11013
	Errno_ERR_SP_PROXY_END                            Errno = 11999
	Errno_ERR_DATA_CENTER_START                       Errno = 12000
	Errno_ERR_DATA_CENTER_MYSQL_GET_ORDER_BY_NO_ERROR Errno = 12001
	Errno_ERR_DATA_CENTER_GET_ORDER_BY_NO_ERROR       Errno = 12002
	Errno_ERR_DATA_CENTER_GET_POSITION_ERROR          Errno = 12003
	Errno_ERR_DATA_CENTER_GET_ACC_INFO_ERROR          Errno = 12004
	Errno_ERR_DATA_CENTER_GET_HIS_ORDER_ERROR         Errno = 12005
	Errno_ERR_DATA_CENTER_GET_TRADE_ERROR             Errno = 12006
	Errno_ERR_DATA_CENTER_END                         Errno = 12999
)

func (p Errno) String() string {
	switch p {
	case Errno_UNKNOWN:
		return "Errno_UNKNOWN"
	case Errno_SUCCESS:
		return "Errno_SUCCESS"
	case Errno_ERR_SP_TRADE_INFO_START:
		return "Errno_ERR_SP_TRADE_INFO_START"
	case Errno_ERR_SP_TRADE_INFO_ERR:
		return "Errno_ERR_SP_TRADE_INFO_ERR"
	case Errno_ERR_SP_TRADE_INFO_ADD_ORDER_ERR:
		return "Errno_ERR_SP_TRADE_INFO_ADD_ORDER_ERR"
	case Errno_ERR_SP_TRADE_INFO_ACCOUNT_GET_STATUS:
		return "Errno_ERR_SP_TRADE_INFO_ACCOUNT_GET_STATUS"
	case Errno_ERR_SP_TRADE_INFO_GET_FUND_IN_OUT:
		return "Errno_ERR_SP_TRADE_INFO_GET_FUND_IN_OUT"
	case Errno_ERR_SP_TRADE_INFO_CHANGE_ORDER_ERR:
		return "Errno_ERR_SP_TRADE_INFO_CHANGE_ORDER_ERR"
	case Errno_ERR_SP_TRADE_INFO_DEL_ORDER_ERR:
		return "Errno_ERR_SP_TRADE_INFO_DEL_ORDER_ERR"
	case Errno_ERR_SP_TRADE_INFO_GET_ORDER_BY_NO_ERR:
		return "Errno_ERR_SP_TRADE_INFO_GET_ORDER_BY_NO_ERR"
	case Errno_ERR_SP_TRADE_INFO_SET_ORDER_INACTIVE_ERR:
		return "Errno_ERR_SP_TRADE_INFO_SET_ORDER_INACTIVE_ERR"
	case Errno_ERR_SP_TRADE_INFO_GET_ACTIVE_ORDER_ERR:
		return "Errno_ERR_SP_TRADE_INFO_GET_ACTIVE_ORDER_ERR"
	case Errno_ERR_SP_TRADE_INFO_GET_TRADE_ERR:
		return "Errno_ERR_SP_TRADE_INFO_GET_TRADE_ERR"
	case Errno_ERR_SP_TRADE_INFO_GET_POSITION_ERR:
		return "Errno_ERR_SP_TRADE_INFO_GET_POSITION_ERR"
	case Errno_ERR_SP_TRADE_INFO_GET_PRICE_ERR:
		return "Errno_ERR_SP_TRADE_INFO_GET_PRICE_ERR"
	case Errno_ERR_SP_TRADE_INFO_GET_ACC_INFO_ERR:
		return "Errno_ERR_SP_TRADE_INFO_GET_ACC_INFO_ERR"
	case Errno_ERR_SP_TRADE_INFO_GET_TICKER_ERR:
		return "Errno_ERR_SP_TRADE_INFO_GET_TICKER_ERR"
	case Errno_ERR_SP_TRADE_INFO_CHANGE_PASSWD_ERR:
		return "Errno_ERR_SP_TRADE_INFO_CHANGE_PASSWD_ERR"
	case Errno_ERR_SP_TRADE_INFO_GET_HISORDER_ERR:
		return "Errno_ERR_SP_TRADE_INFO_GET_HISORDER_ERR"
	case Errno_ERR_SP_TRADE_INFO_INDEX_INVALID:
		return "Errno_ERR_SP_TRADE_INFO_INDEX_INVALID"
	case Errno_ERR_SP_TRADE_INFO_QUOTEID_INVALID:
		return "Errno_ERR_SP_TRADE_INFO_QUOTEID_INVALID"
	case Errno_ERR_SP_TRADE_INFO_END:
		return "Errno_ERR_SP_TRADE_INFO_END"
	case Errno_ERR_SP_PROXY_START:
		return "Errno_ERR_SP_PROXY_START"
	case Errno_ERR_SP_PROXY_ACCNO_LOGIN_ERR:
		return "Errno_ERR_SP_PROXY_ACCNO_LOGIN_ERR"
	case Errno_ERR_SP_PROXY_CHANGEPASSWORD_ERR:
		return "Errno_ERR_SP_PROXY_CHANGEPASSWORD_ERR"
	case Errno_ERR_SP_PROXY_ADDORDER_ERR:
		return "Errno_ERR_SP_PROXY_ADDORDER_ERR"
	case Errno_ERR_SP_PROXY_DELETE_ERR:
		return "Errno_ERR_SP_PROXY_DELETE_ERR"
	case Errno_ERR_SP_PROXY_CHANGE_ERR:
		return "Errno_ERR_SP_PROXY_CHANGE_ERR"
	case Errno_ERR_SP_PROXY_GETACTIVEORDER_ERR:
		return "Errno_ERR_SP_PROXY_GETACTIVEORDER_ERR"
	case Errno_ERR_SP_PROXY_GETACTIVEORDER_NULL:
		return "Errno_ERR_SP_PROXY_GETACTIVEORDER_NULL"
	case Errno_ERR_SP_PROXY_GETTRADE_ERR:
		return "Errno_ERR_SP_PROXY_GETTRADE_ERR"
	case Errno_ERR_SP_PROXY_GETTRADE_NULL:
		return "Errno_ERR_SP_PROXY_GETTRADE_NULL"
	case Errno_ERR_SP_PROXY_GETPOSITION_ERR:
		return "Errno_ERR_SP_PROXY_GETPOSITION_ERR"
	case Errno_ERR_SP_PROXY_GETPOSITION_NULL:
		return "Errno_ERR_SP_PROXY_GETPOSITION_NULL"
	case Errno_ERR_SP_PROXY_GETACCINFO_ERR:
		return "Errno_ERR_SP_PROXY_GETACCINFO_ERR"
	case Errno_ERR_SP_PROXY_GETACCINFO_NULL:
		return "Errno_ERR_SP_PROXY_GETACCINFO_NULL"
	case Errno_ERR_SP_PROXY_END:
		return "Errno_ERR_SP_PROXY_END"
	case Errno_ERR_DATA_CENTER_START:
		return "Errno_ERR_DATA_CENTER_START"
	case Errno_ERR_DATA_CENTER_MYSQL_GET_ORDER_BY_NO_ERROR:
		return "Errno_ERR_DATA_CENTER_MYSQL_GET_ORDER_BY_NO_ERROR"
	case Errno_ERR_DATA_CENTER_GET_ORDER_BY_NO_ERROR:
		return "Errno_ERR_DATA_CENTER_GET_ORDER_BY_NO_ERROR"
	case Errno_ERR_DATA_CENTER_GET_POSITION_ERROR:
		return "Errno_ERR_DATA_CENTER_GET_POSITION_ERROR"
	case Errno_ERR_DATA_CENTER_GET_ACC_INFO_ERROR:
		return "Errno_ERR_DATA_CENTER_GET_ACC_INFO_ERROR"
	case Errno_ERR_DATA_CENTER_GET_HIS_ORDER_ERROR:
		return "Errno_ERR_DATA_CENTER_GET_HIS_ORDER_ERROR"
	case Errno_ERR_DATA_CENTER_GET_TRADE_ERROR:
		return "Errno_ERR_DATA_CENTER_GET_TRADE_ERROR"
	case Errno_ERR_DATA_CENTER_END:
		return "Errno_ERR_DATA_CENTER_END"
	}
	return "<UNSET>"
}

func ErrnoFromString(s string) (Errno, error) {
	switch s {
	case "Errno_UNKNOWN":
		return Errno_UNKNOWN, nil
	case "Errno_SUCCESS":
		return Errno_SUCCESS, nil
	case "Errno_ERR_SP_TRADE_INFO_START":
		return Errno_ERR_SP_TRADE_INFO_START, nil
	case "Errno_ERR_SP_TRADE_INFO_ERR":
		return Errno_ERR_SP_TRADE_INFO_ERR, nil
	case "Errno_ERR_SP_TRADE_INFO_ADD_ORDER_ERR":
		return Errno_ERR_SP_TRADE_INFO_ADD_ORDER_ERR, nil
	case "Errno_ERR_SP_TRADE_INFO_ACCOUNT_GET_STATUS":
		return Errno_ERR_SP_TRADE_INFO_ACCOUNT_GET_STATUS, nil
	case "Errno_ERR_SP_TRADE_INFO_GET_FUND_IN_OUT":
		return Errno_ERR_SP_TRADE_INFO_GET_FUND_IN_OUT, nil
	case "Errno_ERR_SP_TRADE_INFO_CHANGE_ORDER_ERR":
		return Errno_ERR_SP_TRADE_INFO_CHANGE_ORDER_ERR, nil
	case "Errno_ERR_SP_TRADE_INFO_DEL_ORDER_ERR":
		return Errno_ERR_SP_TRADE_INFO_DEL_ORDER_ERR, nil
	case "Errno_ERR_SP_TRADE_INFO_GET_ORDER_BY_NO_ERR":
		return Errno_ERR_SP_TRADE_INFO_GET_ORDER_BY_NO_ERR, nil
	case "Errno_ERR_SP_TRADE_INFO_SET_ORDER_INACTIVE_ERR":
		return Errno_ERR_SP_TRADE_INFO_SET_ORDER_INACTIVE_ERR, nil
	case "Errno_ERR_SP_TRADE_INFO_GET_ACTIVE_ORDER_ERR":
		return Errno_ERR_SP_TRADE_INFO_GET_ACTIVE_ORDER_ERR, nil
	case "Errno_ERR_SP_TRADE_INFO_GET_TRADE_ERR":
		return Errno_ERR_SP_TRADE_INFO_GET_TRADE_ERR, nil
	case "Errno_ERR_SP_TRADE_INFO_GET_POSITION_ERR":
		return Errno_ERR_SP_TRADE_INFO_GET_POSITION_ERR, nil
	case "Errno_ERR_SP_TRADE_INFO_GET_PRICE_ERR":
		return Errno_ERR_SP_TRADE_INFO_GET_PRICE_ERR, nil
	case "Errno_ERR_SP_TRADE_INFO_GET_ACC_INFO_ERR":
		return Errno_ERR_SP_TRADE_INFO_GET_ACC_INFO_ERR, nil
	case "Errno_ERR_SP_TRADE_INFO_GET_TICKER_ERR":
		return Errno_ERR_SP_TRADE_INFO_GET_TICKER_ERR, nil
	case "Errno_ERR_SP_TRADE_INFO_CHANGE_PASSWD_ERR":
		return Errno_ERR_SP_TRADE_INFO_CHANGE_PASSWD_ERR, nil
	case "Errno_ERR_SP_TRADE_INFO_GET_HISORDER_ERR":
		return Errno_ERR_SP_TRADE_INFO_GET_HISORDER_ERR, nil
	case "Errno_ERR_SP_TRADE_INFO_INDEX_INVALID":
		return Errno_ERR_SP_TRADE_INFO_INDEX_INVALID, nil
	case "Errno_ERR_SP_TRADE_INFO_QUOTEID_INVALID":
		return Errno_ERR_SP_TRADE_INFO_QUOTEID_INVALID, nil
	case "Errno_ERR_SP_TRADE_INFO_END":
		return Errno_ERR_SP_TRADE_INFO_END, nil
	case "Errno_ERR_SP_PROXY_START":
		return Errno_ERR_SP_PROXY_START, nil
	case "Errno_ERR_SP_PROXY_ACCNO_LOGIN_ERR":
		return Errno_ERR_SP_PROXY_ACCNO_LOGIN_ERR, nil
	case "Errno_ERR_SP_PROXY_CHANGEPASSWORD_ERR":
		return Errno_ERR_SP_PROXY_CHANGEPASSWORD_ERR, nil
	case "Errno_ERR_SP_PROXY_ADDORDER_ERR":
		return Errno_ERR_SP_PROXY_ADDORDER_ERR, nil
	case "Errno_ERR_SP_PROXY_DELETE_ERR":
		return Errno_ERR_SP_PROXY_DELETE_ERR, nil
	case "Errno_ERR_SP_PROXY_CHANGE_ERR":
		return Errno_ERR_SP_PROXY_CHANGE_ERR, nil
	case "Errno_ERR_SP_PROXY_GETACTIVEORDER_ERR":
		return Errno_ERR_SP_PROXY_GETACTIVEORDER_ERR, nil
	case "Errno_ERR_SP_PROXY_GETACTIVEORDER_NULL":
		return Errno_ERR_SP_PROXY_GETACTIVEORDER_NULL, nil
	case "Errno_ERR_SP_PROXY_GETTRADE_ERR":
		return Errno_ERR_SP_PROXY_GETTRADE_ERR, nil
	case "Errno_ERR_SP_PROXY_GETTRADE_NULL":
		return Errno_ERR_SP_PROXY_GETTRADE_NULL, nil
	case "Errno_ERR_SP_PROXY_GETPOSITION_ERR":
		return Errno_ERR_SP_PROXY_GETPOSITION_ERR, nil
	case "Errno_ERR_SP_PROXY_GETPOSITION_NULL":
		return Errno_ERR_SP_PROXY_GETPOSITION_NULL, nil
	case "Errno_ERR_SP_PROXY_GETACCINFO_ERR":
		return Errno_ERR_SP_PROXY_GETACCINFO_ERR, nil
	case "Errno_ERR_SP_PROXY_GETACCINFO_NULL":
		return Errno_ERR_SP_PROXY_GETACCINFO_NULL, nil
	case "Errno_ERR_SP_PROXY_END":
		return Errno_ERR_SP_PROXY_END, nil
	case "Errno_ERR_DATA_CENTER_START":
		return Errno_ERR_DATA_CENTER_START, nil
	case "Errno_ERR_DATA_CENTER_MYSQL_GET_ORDER_BY_NO_ERROR":
		return Errno_ERR_DATA_CENTER_MYSQL_GET_ORDER_BY_NO_ERROR, nil
	case "Errno_ERR_DATA_CENTER_GET_ORDER_BY_NO_ERROR":
		return Errno_ERR_DATA_CENTER_GET_ORDER_BY_NO_ERROR, nil
	case "Errno_ERR_DATA_CENTER_GET_POSITION_ERROR":
		return Errno_ERR_DATA_CENTER_GET_POSITION_ERROR, nil
	case "Errno_ERR_DATA_CENTER_GET_ACC_INFO_ERROR":
		return Errno_ERR_DATA_CENTER_GET_ACC_INFO_ERROR, nil
	case "Errno_ERR_DATA_CENTER_GET_HIS_ORDER_ERROR":
		return Errno_ERR_DATA_CENTER_GET_HIS_ORDER_ERROR, nil
	case "Errno_ERR_DATA_CENTER_GET_TRADE_ERROR":
		return Errno_ERR_DATA_CENTER_GET_TRADE_ERROR, nil
	case "Errno_ERR_DATA_CENTER_END":
		return Errno_ERR_DATA_CENTER_END, nil
	}
	return Errno(0), fmt.Errorf("not a valid Errno string")
}

func ErrnoPtr(v Errno) *Errno { return &v }

type AccessType int64

const (
	AccessType_FUTURE_BACK AccessType = 0
	AccessType_CELL_PROXY  AccessType = 1
	AccessType_PLAT_BACK   AccessType = 2
	AccessType_PHP         AccessType = 3
)

func (p AccessType) String() string {
	switch p {
	case AccessType_FUTURE_BACK:
		return "AccessType_FUTURE_BACK"
	case AccessType_CELL_PROXY:
		return "AccessType_CELL_PROXY"
	case AccessType_PLAT_BACK:
		return "AccessType_PLAT_BACK"
	case AccessType_PHP:
		return "AccessType_PHP"
	}
	return "<UNSET>"
}

func AccessTypeFromString(s string) (AccessType, error) {
	switch s {
	case "AccessType_FUTURE_BACK":
		return AccessType_FUTURE_BACK, nil
	case "AccessType_CELL_PROXY":
		return AccessType_CELL_PROXY, nil
	case "AccessType_PLAT_BACK":
		return AccessType_PLAT_BACK, nil
	case "AccessType_PHP":
		return AccessType_PHP, nil
	}
	return AccessType(0), fmt.Errorf("not a valid AccessType string")
}

func AccessTypePtr(v AccessType) *AccessType { return &v }

type OrderCondType int64

const (
	OrderCondType_COND_NONE          OrderCondType = 0
	OrderCondType_COND_STOP          OrderCondType = 1
	OrderCondType_COND_SCHEDTIME     OrderCondType = 3
	OrderCondType_COND_OCOSTOP       OrderCondType = 4
	OrderCondType_COND_TRAILSTOP     OrderCondType = 6
	OrderCondType_COND_COMBO_OPEN    OrderCondType = 8
	OrderCondType_COND_COMBO_CLOSE   OrderCondType = 9
	OrderCondType_COND_STOP_PRC      OrderCondType = 11
	OrderCondType_COND_OCOSTOP_PRC   OrderCondType = 14
	OrderCondType_COND_TRAILSTOP_PRC OrderCondType = 16
)

func (p OrderCondType) String() string {
	switch p {
	case OrderCondType_COND_NONE:
		return "OrderCondType_COND_NONE"
	case OrderCondType_COND_STOP:
		return "OrderCondType_COND_STOP"
	case OrderCondType_COND_SCHEDTIME:
		return "OrderCondType_COND_SCHEDTIME"
	case OrderCondType_COND_OCOSTOP:
		return "OrderCondType_COND_OCOSTOP"
	case OrderCondType_COND_TRAILSTOP:
		return "OrderCondType_COND_TRAILSTOP"
	case OrderCondType_COND_COMBO_OPEN:
		return "OrderCondType_COND_COMBO_OPEN"
	case OrderCondType_COND_COMBO_CLOSE:
		return "OrderCondType_COND_COMBO_CLOSE"
	case OrderCondType_COND_STOP_PRC:
		return "OrderCondType_COND_STOP_PRC"
	case OrderCondType_COND_OCOSTOP_PRC:
		return "OrderCondType_COND_OCOSTOP_PRC"
	case OrderCondType_COND_TRAILSTOP_PRC:
		return "OrderCondType_COND_TRAILSTOP_PRC"
	}
	return "<UNSET>"
}

func OrderCondTypeFromString(s string) (OrderCondType, error) {
	switch s {
	case "OrderCondType_COND_NONE":
		return OrderCondType_COND_NONE, nil
	case "OrderCondType_COND_STOP":
		return OrderCondType_COND_STOP, nil
	case "OrderCondType_COND_SCHEDTIME":
		return OrderCondType_COND_SCHEDTIME, nil
	case "OrderCondType_COND_OCOSTOP":
		return OrderCondType_COND_OCOSTOP, nil
	case "OrderCondType_COND_TRAILSTOP":
		return OrderCondType_COND_TRAILSTOP, nil
	case "OrderCondType_COND_COMBO_OPEN":
		return OrderCondType_COND_COMBO_OPEN, nil
	case "OrderCondType_COND_COMBO_CLOSE":
		return OrderCondType_COND_COMBO_CLOSE, nil
	case "OrderCondType_COND_STOP_PRC":
		return OrderCondType_COND_STOP_PRC, nil
	case "OrderCondType_COND_OCOSTOP_PRC":
		return OrderCondType_COND_OCOSTOP_PRC, nil
	case "OrderCondType_COND_TRAILSTOP_PRC":
		return OrderCondType_COND_TRAILSTOP_PRC, nil
	}
	return OrderCondType(0), fmt.Errorf("not a valid OrderCondType string")
}

func OrderCondTypePtr(v OrderCondType) *OrderCondType { return &v }

type OrderPriceType int64

const (
	OrderPriceType_ORD_LIMIT   OrderPriceType = 0
	OrderPriceType_ORD_AUCTION OrderPriceType = 2
	OrderPriceType_ORD_MARKET  OrderPriceType = 6
)

func (p OrderPriceType) String() string {
	switch p {
	case OrderPriceType_ORD_LIMIT:
		return "OrderPriceType_ORD_LIMIT"
	case OrderPriceType_ORD_AUCTION:
		return "OrderPriceType_ORD_AUCTION"
	case OrderPriceType_ORD_MARKET:
		return "OrderPriceType_ORD_MARKET"
	}
	return "<UNSET>"
}

func OrderPriceTypeFromString(s string) (OrderPriceType, error) {
	switch s {
	case "OrderPriceType_ORD_LIMIT":
		return OrderPriceType_ORD_LIMIT, nil
	case "OrderPriceType_ORD_AUCTION":
		return OrderPriceType_ORD_AUCTION, nil
	case "OrderPriceType_ORD_MARKET":
		return OrderPriceType_ORD_MARKET, nil
	}
	return OrderPriceType(0), fmt.Errorf("not a valid OrderPriceType string")
}

func OrderPriceTypePtr(v OrderPriceType) *OrderPriceType { return &v }

type VLDType int64

const (
	VLDType_VLD_REST_OF_DAY   VLDType = 0
	VLDType_VLD_FILL_AND_KILL VLDType = 1
	VLDType_VLD_FILL_OR_KILL  VLDType = 2
	VLDType_VLD_UNTIL_EXPIRE  VLDType = 3
	VLDType_VLD_SPEC_TIME     VLDType = 4
)

func (p VLDType) String() string {
	switch p {
	case VLDType_VLD_REST_OF_DAY:
		return "VLDType_VLD_REST_OF_DAY"
	case VLDType_VLD_FILL_AND_KILL:
		return "VLDType_VLD_FILL_AND_KILL"
	case VLDType_VLD_FILL_OR_KILL:
		return "VLDType_VLD_FILL_OR_KILL"
	case VLDType_VLD_UNTIL_EXPIRE:
		return "VLDType_VLD_UNTIL_EXPIRE"
	case VLDType_VLD_SPEC_TIME:
		return "VLDType_VLD_SPEC_TIME"
	}
	return "<UNSET>"
}

func VLDTypeFromString(s string) (VLDType, error) {
	switch s {
	case "VLDType_VLD_REST_OF_DAY":
		return VLDType_VLD_REST_OF_DAY, nil
	case "VLDType_VLD_FILL_AND_KILL":
		return VLDType_VLD_FILL_AND_KILL, nil
	case "VLDType_VLD_FILL_OR_KILL":
		return VLDType_VLD_FILL_OR_KILL, nil
	case "VLDType_VLD_UNTIL_EXPIRE":
		return VLDType_VLD_UNTIL_EXPIRE, nil
	case "VLDType_VLD_SPEC_TIME":
		return VLDType_VLD_SPEC_TIME, nil
	}
	return VLDType(0), fmt.Errorf("not a valid VLDType string")
}

func VLDTypePtr(v VLDType) *VLDType { return &v }

type OrderStatus int64

const (
	OrderStatus_ORDSTAT_SENDING     OrderStatus = 0
	OrderStatus_ORDSTAT_WORKING     OrderStatus = 1
	OrderStatus_ORDSTAT_INACTIVE    OrderStatus = 2
	OrderStatus_ORDSTAT_PENDING     OrderStatus = 3
	OrderStatus_ORDSTAT_ADDING      OrderStatus = 4
	OrderStatus_ORDSTAT_CHANGING    OrderStatus = 5
	OrderStatus_ORDSTAT_DELETING    OrderStatus = 6
	OrderStatus_ORDSTAT_INACTING    OrderStatus = 7
	OrderStatus_ORDSTAT_PARTTRD_WRK OrderStatus = 8
	OrderStatus_ORDSTAT_TRADED      OrderStatus = 9
	OrderStatus_ORDSTAT_DELETED     OrderStatus = 10
	OrderStatus_ORDSTAT_APPROVEWAIT OrderStatus = 18
	OrderStatus_ORDSTAT_TRADEDREP   OrderStatus = 20
	OrderStatus_ORDSTAT_DELETEDREP  OrderStatus = 21
	OrderStatus_ORDSTAT_RESYNC_ABN  OrderStatus = 24
	OrderStatus_ORDSTAT_PARTTRD_DEL OrderStatus = 28
	OrderStatus_ORDSTAT_PARTTRD_REP OrderStatus = 29
	OrderStatus_ORDSTAT_ERROR       OrderStatus = 100
)

func (p OrderStatus) String() string {
	switch p {
	case OrderStatus_ORDSTAT_SENDING:
		return "OrderStatus_ORDSTAT_SENDING"
	case OrderStatus_ORDSTAT_WORKING:
		return "OrderStatus_ORDSTAT_WORKING"
	case OrderStatus_ORDSTAT_INACTIVE:
		return "OrderStatus_ORDSTAT_INACTIVE"
	case OrderStatus_ORDSTAT_PENDING:
		return "OrderStatus_ORDSTAT_PENDING"
	case OrderStatus_ORDSTAT_ADDING:
		return "OrderStatus_ORDSTAT_ADDING"
	case OrderStatus_ORDSTAT_CHANGING:
		return "OrderStatus_ORDSTAT_CHANGING"
	case OrderStatus_ORDSTAT_DELETING:
		return "OrderStatus_ORDSTAT_DELETING"
	case OrderStatus_ORDSTAT_INACTING:
		return "OrderStatus_ORDSTAT_INACTING"
	case OrderStatus_ORDSTAT_PARTTRD_WRK:
		return "OrderStatus_ORDSTAT_PARTTRD_WRK"
	case OrderStatus_ORDSTAT_TRADED:
		return "OrderStatus_ORDSTAT_TRADED"
	case OrderStatus_ORDSTAT_DELETED:
		return "OrderStatus_ORDSTAT_DELETED"
	case OrderStatus_ORDSTAT_APPROVEWAIT:
		return "OrderStatus_ORDSTAT_APPROVEWAIT"
	case OrderStatus_ORDSTAT_TRADEDREP:
		return "OrderStatus_ORDSTAT_TRADEDREP"
	case OrderStatus_ORDSTAT_DELETEDREP:
		return "OrderStatus_ORDSTAT_DELETEDREP"
	case OrderStatus_ORDSTAT_RESYNC_ABN:
		return "OrderStatus_ORDSTAT_RESYNC_ABN"
	case OrderStatus_ORDSTAT_PARTTRD_DEL:
		return "OrderStatus_ORDSTAT_PARTTRD_DEL"
	case OrderStatus_ORDSTAT_PARTTRD_REP:
		return "OrderStatus_ORDSTAT_PARTTRD_REP"
	case OrderStatus_ORDSTAT_ERROR:
		return "OrderStatus_ORDSTAT_ERROR"
	}
	return "<UNSET>"
}

func OrderStatusFromString(s string) (OrderStatus, error) {
	switch s {
	case "OrderStatus_ORDSTAT_SENDING":
		return OrderStatus_ORDSTAT_SENDING, nil
	case "OrderStatus_ORDSTAT_WORKING":
		return OrderStatus_ORDSTAT_WORKING, nil
	case "OrderStatus_ORDSTAT_INACTIVE":
		return OrderStatus_ORDSTAT_INACTIVE, nil
	case "OrderStatus_ORDSTAT_PENDING":
		return OrderStatus_ORDSTAT_PENDING, nil
	case "OrderStatus_ORDSTAT_ADDING":
		return OrderStatus_ORDSTAT_ADDING, nil
	case "OrderStatus_ORDSTAT_CHANGING":
		return OrderStatus_ORDSTAT_CHANGING, nil
	case "OrderStatus_ORDSTAT_DELETING":
		return OrderStatus_ORDSTAT_DELETING, nil
	case "OrderStatus_ORDSTAT_INACTING":
		return OrderStatus_ORDSTAT_INACTING, nil
	case "OrderStatus_ORDSTAT_PARTTRD_WRK":
		return OrderStatus_ORDSTAT_PARTTRD_WRK, nil
	case "OrderStatus_ORDSTAT_TRADED":
		return OrderStatus_ORDSTAT_TRADED, nil
	case "OrderStatus_ORDSTAT_DELETED":
		return OrderStatus_ORDSTAT_DELETED, nil
	case "OrderStatus_ORDSTAT_APPROVEWAIT":
		return OrderStatus_ORDSTAT_APPROVEWAIT, nil
	case "OrderStatus_ORDSTAT_TRADEDREP":
		return OrderStatus_ORDSTAT_TRADEDREP, nil
	case "OrderStatus_ORDSTAT_DELETEDREP":
		return OrderStatus_ORDSTAT_DELETEDREP, nil
	case "OrderStatus_ORDSTAT_RESYNC_ABN":
		return OrderStatus_ORDSTAT_RESYNC_ABN, nil
	case "OrderStatus_ORDSTAT_PARTTRD_DEL":
		return OrderStatus_ORDSTAT_PARTTRD_DEL, nil
	case "OrderStatus_ORDSTAT_PARTTRD_REP":
		return OrderStatus_ORDSTAT_PARTTRD_REP, nil
	case "OrderStatus_ORDSTAT_ERROR":
		return OrderStatus_ORDSTAT_ERROR, nil
	}
	return OrderStatus(0), fmt.Errorf("not a valid OrderStatus string")
}

func OrderStatusPtr(v OrderStatus) *OrderStatus { return &v }

type ErrInfo struct {
	ErrNo      Errno  `thrift:"err_no,1,required" json:"err_no"`
	ErrMsg     string `thrift:"err_msg,2" json:"err_msg"`
	ErrMsgEn   string `thrift:"err_msg_en,3" json:"err_msg_en"`
	ErrMsgTrad string `thrift:"err_msg_trad,4" json:"err_msg_trad"`
}

func NewErrInfo() *ErrInfo {
	return &ErrInfo{
		ErrMsg: "default err msg",
	}
}

func (p *ErrInfo) GetErrNo() Errno {
	return p.ErrNo
}

var ErrInfo_ErrMsg_DEFAULT string = "default err msg"

func (p *ErrInfo) GetErrMsg() string {
	return p.ErrMsg
}

var ErrInfo_ErrMsgEn_DEFAULT string = ""

func (p *ErrInfo) GetErrMsgEn() string {
	return p.ErrMsgEn
}

var ErrInfo_ErrMsgTrad_DEFAULT string = ""

func (p *ErrInfo) GetErrMsgTrad() string {
	return p.ErrMsgTrad
}
func (p *ErrInfo) IsSetErrMsg() bool {
	return p.ErrMsg != ErrInfo_ErrMsg_DEFAULT
}

func (p *ErrInfo) IsSetErrMsgEn() bool {
	return p.ErrMsgEn != ErrInfo_ErrMsgEn_DEFAULT
}

func (p *ErrInfo) IsSetErrMsgTrad() bool {
	return p.ErrMsgTrad != ErrInfo_ErrMsgTrad_DEFAULT
}

func (p *ErrInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ErrInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := Errno(v)
		p.ErrNo = temp
	}
	return nil
}

func (p *ErrInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ErrMsg = v
	}
	return nil
}

func (p *ErrInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ErrMsgEn = v
	}
	return nil
}

func (p *ErrInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ErrMsgTrad = v
	}
	return nil
}

func (p *ErrInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ErrInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ErrInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_no", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_no: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ErrNo)); err != nil {
		return fmt.Errorf("%T.err_no (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_no: %s", p, err)
	}
	return err
}

func (p *ErrInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrMsg() {
		if err := oprot.WriteFieldBegin("err_msg", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:err_msg: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ErrMsg)); err != nil {
			return fmt.Errorf("%T.err_msg (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:err_msg: %s", p, err)
		}
	}
	return err
}

func (p *ErrInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrMsgEn() {
		if err := oprot.WriteFieldBegin("err_msg_en", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:err_msg_en: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ErrMsgEn)); err != nil {
			return fmt.Errorf("%T.err_msg_en (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:err_msg_en: %s", p, err)
		}
	}
	return err
}

func (p *ErrInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrMsgTrad() {
		if err := oprot.WriteFieldBegin("err_msg_trad", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:err_msg_trad: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ErrMsgTrad)); err != nil {
			return fmt.Errorf("%T.err_msg_trad (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:err_msg_trad: %s", p, err)
		}
	}
	return err
}

func (p *ErrInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ErrInfo(%+v)", *p)
}

type AccessInfo struct {
	AccessType AccessType `thrift:"access_type,1,required" json:"access_type"`
	AccessName string     `thrift:"access_name,2,required" json:"access_name"`
	RequestId  *string    `thrift:"request_id,3" json:"request_id"`
}

func NewAccessInfo() *AccessInfo {
	return &AccessInfo{}
}

func (p *AccessInfo) GetAccessType() AccessType {
	return p.AccessType
}

func (p *AccessInfo) GetAccessName() string {
	return p.AccessName
}

var AccessInfo_RequestId_DEFAULT string

func (p *AccessInfo) GetRequestId() string {
	if !p.IsSetRequestId() {
		return AccessInfo_RequestId_DEFAULT
	}
	return *p.RequestId
}
func (p *AccessInfo) IsSetRequestId() bool {
	return p.RequestId != nil
}

func (p *AccessInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AccessInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := AccessType(v)
		p.AccessType = temp
	}
	return nil
}

func (p *AccessInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AccessName = v
	}
	return nil
}

func (p *AccessInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.RequestId = &v
	}
	return nil
}

func (p *AccessInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AccessInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AccessInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_type", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:access_type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.AccessType)); err != nil {
		return fmt.Errorf("%T.access_type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:access_type: %s", p, err)
	}
	return err
}

func (p *AccessInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:access_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccessName)); err != nil {
		return fmt.Errorf("%T.access_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:access_name: %s", p, err)
	}
	return err
}

func (p *AccessInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestId() {
		if err := oprot.WriteFieldBegin("request_id", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:request_id: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.RequestId)); err != nil {
			return fmt.Errorf("%T.request_id (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:request_id: %s", p, err)
		}
	}
	return err
}

func (p *AccessInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccessInfo(%+v)", *p)
}

type Order struct {
	Price        float64        `thrift:"Price,1,required" json:"Price"`
	StopLevel    float64        `thrift:"StopLevel,2,required" json:"StopLevel"`
	UpLevel      float64        `thrift:"UpLevel,3,required" json:"UpLevel"`
	UpPrice      float64        `thrift:"UpPrice,4,required" json:"UpPrice"`
	DownLevel    float64        `thrift:"DownLevel,5,required" json:"DownLevel"`
	DownPrice    float64        `thrift:"DownPrice,6,required" json:"DownPrice"`
	ExtOrderNo   int64          `thrift:"ExtOrderNo,7,required" json:"ExtOrderNo"`
	IntOrderNo   int32          `thrift:"IntOrderNo,8,required" json:"IntOrderNo"`
	Qty          int32          `thrift:"Qty,9,required" json:"Qty"`
	TradedQty    int32          `thrift:"TradedQty,10,required" json:"TradedQty"`
	TotalQty     int32          `thrift:"TotalQty,11,required" json:"TotalQty"`
	ValidTime    int32          `thrift:"ValidTime,12,required" json:"ValidTime"`
	SchedTime    int32          `thrift:"SchedTime,13,required" json:"SchedTime"`
	TimeStamp    int32          `thrift:"TimeStamp,14,required" json:"TimeStamp"`
	OrderOptions int32          `thrift:"OrderOptions,15,required" json:"OrderOptions"`
	AccNo        string         `thrift:"AccNo,16,required" json:"AccNo"`
	ProdCode     string         `thrift:"ProdCode,17,required" json:"ProdCode"`
	Initiator    string         `thrift:"Initiator,18,required" json:"Initiator"`
	Ref          string         `thrift:"Ref,19,required" json:"Ref"`
	Ref2         string         `thrift:"Ref2,20,required" json:"Ref2"`
	GatewayCode  string         `thrift:"GatewayCode,21,required" json:"GatewayCode"`
	ClOrderId    string         `thrift:"ClOrderId,22,required" json:"ClOrderId"`
	BuySell      int8           `thrift:"BuySell,23,required" json:"BuySell"`
	StopType     int8           `thrift:"StopType,24,required" json:"StopType"`
	OpenClose    int8           `thrift:"OpenClose,25,required" json:"OpenClose"`
	CondType     OrderCondType  `thrift:"CondType,26,required" json:"CondType"`
	OrderType    OrderPriceType `thrift:"OrderType,27,required" json:"OrderType"`
	ValidType    VLDType        `thrift:"ValidType,28,required" json:"ValidType"`
	Status       OrderStatus    `thrift:"Status,29,required" json:"Status"`
	DecInPrice   int8           `thrift:"DecInPrice,30,required" json:"DecInPrice"`
	OrderAction  int8           `thrift:"OrderAction,31,required" json:"OrderAction"`
	UpdateTime   int32          `thrift:"UpdateTime,32,required" json:"UpdateTime"`
	UpdateSeqNo  int32          `thrift:"UpdateSeqNo,33,required" json:"UpdateSeqNo"`
	Fees         *float64       `thrift:"Fees,34" json:"Fees"`
	Profit       *float64       `thrift:"Profit,35" json:"Profit"`
	Remark       *string        `thrift:"Remark,36" json:"Remark"`
	ProdName     *string        `thrift:"ProdName,37" json:"ProdName"`
	Deposit      float64        `thrift:"Deposit,38,required" json:"Deposit"`
	EntrustPrice float64        `thrift:"EntrustPrice,39,required" json:"EntrustPrice"`
	CurrentPrice float64        `thrift:"CurrentPrice,40,required" json:"CurrentPrice"`
}

func NewOrder() *Order {
	return &Order{}
}

func (p *Order) GetPrice() float64 {
	return p.Price
}

func (p *Order) GetStopLevel() float64 {
	return p.StopLevel
}

func (p *Order) GetUpLevel() float64 {
	return p.UpLevel
}

func (p *Order) GetUpPrice() float64 {
	return p.UpPrice
}

func (p *Order) GetDownLevel() float64 {
	return p.DownLevel
}

func (p *Order) GetDownPrice() float64 {
	return p.DownPrice
}

func (p *Order) GetExtOrderNo() int64 {
	return p.ExtOrderNo
}

func (p *Order) GetIntOrderNo() int32 {
	return p.IntOrderNo
}

func (p *Order) GetQty() int32 {
	return p.Qty
}

func (p *Order) GetTradedQty() int32 {
	return p.TradedQty
}

func (p *Order) GetTotalQty() int32 {
	return p.TotalQty
}

func (p *Order) GetValidTime() int32 {
	return p.ValidTime
}

func (p *Order) GetSchedTime() int32 {
	return p.SchedTime
}

func (p *Order) GetTimeStamp() int32 {
	return p.TimeStamp
}

func (p *Order) GetOrderOptions() int32 {
	return p.OrderOptions
}

func (p *Order) GetAccNo() string {
	return p.AccNo
}

func (p *Order) GetProdCode() string {
	return p.ProdCode
}

func (p *Order) GetInitiator() string {
	return p.Initiator
}

func (p *Order) GetRef() string {
	return p.Ref
}

func (p *Order) GetRef2() string {
	return p.Ref2
}

func (p *Order) GetGatewayCode() string {
	return p.GatewayCode
}

func (p *Order) GetClOrderId() string {
	return p.ClOrderId
}

func (p *Order) GetBuySell() int8 {
	return p.BuySell
}

func (p *Order) GetStopType() int8 {
	return p.StopType
}

func (p *Order) GetOpenClose() int8 {
	return p.OpenClose
}

func (p *Order) GetCondType() OrderCondType {
	return p.CondType
}

func (p *Order) GetOrderType() OrderPriceType {
	return p.OrderType
}

func (p *Order) GetValidType() VLDType {
	return p.ValidType
}

func (p *Order) GetStatus() OrderStatus {
	return p.Status
}

func (p *Order) GetDecInPrice() int8 {
	return p.DecInPrice
}

func (p *Order) GetOrderAction() int8 {
	return p.OrderAction
}

func (p *Order) GetUpdateTime() int32 {
	return p.UpdateTime
}

func (p *Order) GetUpdateSeqNo() int32 {
	return p.UpdateSeqNo
}

var Order_Fees_DEFAULT float64

func (p *Order) GetFees() float64 {
	if !p.IsSetFees() {
		return Order_Fees_DEFAULT
	}
	return *p.Fees
}

var Order_Profit_DEFAULT float64

func (p *Order) GetProfit() float64 {
	if !p.IsSetProfit() {
		return Order_Profit_DEFAULT
	}
	return *p.Profit
}

var Order_Remark_DEFAULT string

func (p *Order) GetRemark() string {
	if !p.IsSetRemark() {
		return Order_Remark_DEFAULT
	}
	return *p.Remark
}

var Order_ProdName_DEFAULT string

func (p *Order) GetProdName() string {
	if !p.IsSetProdName() {
		return Order_ProdName_DEFAULT
	}
	return *p.ProdName
}

func (p *Order) GetDeposit() float64 {
	return p.Deposit
}

func (p *Order) GetEntrustPrice() float64 {
	return p.EntrustPrice
}

func (p *Order) GetCurrentPrice() float64 {
	return p.CurrentPrice
}
func (p *Order) IsSetFees() bool {
	return p.Fees != nil
}

func (p *Order) IsSetProfit() bool {
	return p.Profit != nil
}

func (p *Order) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *Order) IsSetProdName() bool {
	return p.ProdName != nil
}

func (p *Order) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.ReadField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.ReadField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.ReadField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.ReadField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.ReadField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.ReadField28(iprot); err != nil {
				return err
			}
		case 29:
			if err := p.ReadField29(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.ReadField30(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.ReadField31(iprot); err != nil {
				return err
			}
		case 32:
			if err := p.ReadField32(iprot); err != nil {
				return err
			}
		case 33:
			if err := p.ReadField33(iprot); err != nil {
				return err
			}
		case 34:
			if err := p.ReadField34(iprot); err != nil {
				return err
			}
		case 35:
			if err := p.ReadField35(iprot); err != nil {
				return err
			}
		case 36:
			if err := p.ReadField36(iprot); err != nil {
				return err
			}
		case 37:
			if err := p.ReadField37(iprot); err != nil {
				return err
			}
		case 38:
			if err := p.ReadField38(iprot); err != nil {
				return err
			}
		case 39:
			if err := p.ReadField39(iprot); err != nil {
				return err
			}
		case 40:
			if err := p.ReadField40(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Order) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *Order) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StopLevel = v
	}
	return nil
}

func (p *Order) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UpLevel = v
	}
	return nil
}

func (p *Order) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UpPrice = v
	}
	return nil
}

func (p *Order) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.DownLevel = v
	}
	return nil
}

func (p *Order) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.DownPrice = v
	}
	return nil
}

func (p *Order) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.ExtOrderNo = v
	}
	return nil
}

func (p *Order) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.IntOrderNo = v
	}
	return nil
}

func (p *Order) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.Qty = v
	}
	return nil
}

func (p *Order) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.TradedQty = v
	}
	return nil
}

func (p *Order) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.TotalQty = v
	}
	return nil
}

func (p *Order) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.ValidTime = v
	}
	return nil
}

func (p *Order) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.SchedTime = v
	}
	return nil
}

func (p *Order) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.TimeStamp = v
	}
	return nil
}

func (p *Order) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.OrderOptions = v
	}
	return nil
}

func (p *Order) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 16: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *Order) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		p.ProdCode = v
	}
	return nil
}

func (p *Order) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 18: %s", err)
	} else {
		p.Initiator = v
	}
	return nil
}

func (p *Order) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 19: %s", err)
	} else {
		p.Ref = v
	}
	return nil
}

func (p *Order) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 20: %s", err)
	} else {
		p.Ref2 = v
	}
	return nil
}

func (p *Order) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 21: %s", err)
	} else {
		p.GatewayCode = v
	}
	return nil
}

func (p *Order) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 22: %s", err)
	} else {
		p.ClOrderId = v
	}
	return nil
}

func (p *Order) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 23: %s", err)
	} else {
		temp := int8(v)
		p.BuySell = temp
	}
	return nil
}

func (p *Order) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 24: %s", err)
	} else {
		temp := int8(v)
		p.StopType = temp
	}
	return nil
}

func (p *Order) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 25: %s", err)
	} else {
		temp := int8(v)
		p.OpenClose = temp
	}
	return nil
}

func (p *Order) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 26: %s", err)
	} else {
		temp := OrderCondType(v)
		p.CondType = temp
	}
	return nil
}

func (p *Order) ReadField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 27: %s", err)
	} else {
		temp := OrderPriceType(v)
		p.OrderType = temp
	}
	return nil
}

func (p *Order) ReadField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 28: %s", err)
	} else {
		temp := VLDType(v)
		p.ValidType = temp
	}
	return nil
}

func (p *Order) ReadField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 29: %s", err)
	} else {
		temp := OrderStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *Order) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 30: %s", err)
	} else {
		temp := int8(v)
		p.DecInPrice = temp
	}
	return nil
}

func (p *Order) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 31: %s", err)
	} else {
		temp := int8(v)
		p.OrderAction = temp
	}
	return nil
}

func (p *Order) ReadField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 32: %s", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *Order) ReadField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 33: %s", err)
	} else {
		p.UpdateSeqNo = v
	}
	return nil
}

func (p *Order) ReadField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 34: %s", err)
	} else {
		p.Fees = &v
	}
	return nil
}

func (p *Order) ReadField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 35: %s", err)
	} else {
		p.Profit = &v
	}
	return nil
}

func (p *Order) ReadField36(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 36: %s", err)
	} else {
		p.Remark = &v
	}
	return nil
}

func (p *Order) ReadField37(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 37: %s", err)
	} else {
		p.ProdName = &v
	}
	return nil
}

func (p *Order) ReadField38(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 38: %s", err)
	} else {
		p.Deposit = v
	}
	return nil
}

func (p *Order) ReadField39(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 39: %s", err)
	} else {
		p.EntrustPrice = v
	}
	return nil
}

func (p *Order) ReadField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 40: %s", err)
	} else {
		p.CurrentPrice = v
	}
	return nil
}

func (p *Order) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Order"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := p.writeField29(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := p.writeField32(oprot); err != nil {
		return err
	}
	if err := p.writeField33(oprot); err != nil {
		return err
	}
	if err := p.writeField34(oprot); err != nil {
		return err
	}
	if err := p.writeField35(oprot); err != nil {
		return err
	}
	if err := p.writeField36(oprot); err != nil {
		return err
	}
	if err := p.writeField37(oprot); err != nil {
		return err
	}
	if err := p.writeField38(oprot); err != nil {
		return err
	}
	if err := p.writeField39(oprot); err != nil {
		return err
	}
	if err := p.writeField40(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Order) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Price", thrift.DOUBLE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Price: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Price)); err != nil {
		return fmt.Errorf("%T.Price (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Price: %s", p, err)
	}
	return err
}

func (p *Order) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StopLevel", thrift.DOUBLE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:StopLevel: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.StopLevel)); err != nil {
		return fmt.Errorf("%T.StopLevel (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:StopLevel: %s", p, err)
	}
	return err
}

func (p *Order) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpLevel", thrift.DOUBLE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:UpLevel: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.UpLevel)); err != nil {
		return fmt.Errorf("%T.UpLevel (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:UpLevel: %s", p, err)
	}
	return err
}

func (p *Order) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpPrice", thrift.DOUBLE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:UpPrice: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.UpPrice)); err != nil {
		return fmt.Errorf("%T.UpPrice (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:UpPrice: %s", p, err)
	}
	return err
}

func (p *Order) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DownLevel", thrift.DOUBLE, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:DownLevel: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.DownLevel)); err != nil {
		return fmt.Errorf("%T.DownLevel (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:DownLevel: %s", p, err)
	}
	return err
}

func (p *Order) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DownPrice", thrift.DOUBLE, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:DownPrice: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.DownPrice)); err != nil {
		return fmt.Errorf("%T.DownPrice (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:DownPrice: %s", p, err)
	}
	return err
}

func (p *Order) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExtOrderNo", thrift.I64, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:ExtOrderNo: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ExtOrderNo)); err != nil {
		return fmt.Errorf("%T.ExtOrderNo (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:ExtOrderNo: %s", p, err)
	}
	return err
}

func (p *Order) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IntOrderNo", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:IntOrderNo: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.IntOrderNo)); err != nil {
		return fmt.Errorf("%T.IntOrderNo (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:IntOrderNo: %s", p, err)
	}
	return err
}

func (p *Order) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Qty", thrift.I32, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:Qty: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Qty)); err != nil {
		return fmt.Errorf("%T.Qty (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:Qty: %s", p, err)
	}
	return err
}

func (p *Order) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TradedQty", thrift.I32, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:TradedQty: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TradedQty)); err != nil {
		return fmt.Errorf("%T.TradedQty (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:TradedQty: %s", p, err)
	}
	return err
}

func (p *Order) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalQty", thrift.I32, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:TotalQty: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TotalQty)); err != nil {
		return fmt.Errorf("%T.TotalQty (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:TotalQty: %s", p, err)
	}
	return err
}

func (p *Order) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ValidTime", thrift.I32, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:ValidTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ValidTime)); err != nil {
		return fmt.Errorf("%T.ValidTime (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:ValidTime: %s", p, err)
	}
	return err
}

func (p *Order) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SchedTime", thrift.I32, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:SchedTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SchedTime)); err != nil {
		return fmt.Errorf("%T.SchedTime (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:SchedTime: %s", p, err)
	}
	return err
}

func (p *Order) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TimeStamp", thrift.I32, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:TimeStamp: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TimeStamp)); err != nil {
		return fmt.Errorf("%T.TimeStamp (14) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:TimeStamp: %s", p, err)
	}
	return err
}

func (p *Order) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderOptions", thrift.I32, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:OrderOptions: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OrderOptions)); err != nil {
		return fmt.Errorf("%T.OrderOptions (15) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:OrderOptions: %s", p, err)
	}
	return err
}

func (p *Order) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 16); err != nil {
		return fmt.Errorf("%T write field begin error 16:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (16) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 16:AccNo: %s", p, err)
	}
	return err
}

func (p *Order) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProdCode", thrift.STRING, 17); err != nil {
		return fmt.Errorf("%T write field begin error 17:ProdCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProdCode)); err != nil {
		return fmt.Errorf("%T.ProdCode (17) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 17:ProdCode: %s", p, err)
	}
	return err
}

func (p *Order) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Initiator", thrift.STRING, 18); err != nil {
		return fmt.Errorf("%T write field begin error 18:Initiator: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Initiator)); err != nil {
		return fmt.Errorf("%T.Initiator (18) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 18:Initiator: %s", p, err)
	}
	return err
}

func (p *Order) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ref", thrift.STRING, 19); err != nil {
		return fmt.Errorf("%T write field begin error 19:Ref: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ref)); err != nil {
		return fmt.Errorf("%T.Ref (19) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 19:Ref: %s", p, err)
	}
	return err
}

func (p *Order) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ref2", thrift.STRING, 20); err != nil {
		return fmt.Errorf("%T write field begin error 20:Ref2: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ref2)); err != nil {
		return fmt.Errorf("%T.Ref2 (20) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 20:Ref2: %s", p, err)
	}
	return err
}

func (p *Order) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GatewayCode", thrift.STRING, 21); err != nil {
		return fmt.Errorf("%T write field begin error 21:GatewayCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GatewayCode)); err != nil {
		return fmt.Errorf("%T.GatewayCode (21) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 21:GatewayCode: %s", p, err)
	}
	return err
}

func (p *Order) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ClOrderId", thrift.STRING, 22); err != nil {
		return fmt.Errorf("%T write field begin error 22:ClOrderId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ClOrderId)); err != nil {
		return fmt.Errorf("%T.ClOrderId (22) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 22:ClOrderId: %s", p, err)
	}
	return err
}

func (p *Order) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BuySell", thrift.BYTE, 23); err != nil {
		return fmt.Errorf("%T write field begin error 23:BuySell: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.BuySell)); err != nil {
		return fmt.Errorf("%T.BuySell (23) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 23:BuySell: %s", p, err)
	}
	return err
}

func (p *Order) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StopType", thrift.BYTE, 24); err != nil {
		return fmt.Errorf("%T write field begin error 24:StopType: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.StopType)); err != nil {
		return fmt.Errorf("%T.StopType (24) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 24:StopType: %s", p, err)
	}
	return err
}

func (p *Order) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OpenClose", thrift.BYTE, 25); err != nil {
		return fmt.Errorf("%T write field begin error 25:OpenClose: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.OpenClose)); err != nil {
		return fmt.Errorf("%T.OpenClose (25) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 25:OpenClose: %s", p, err)
	}
	return err
}

func (p *Order) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CondType", thrift.I32, 26); err != nil {
		return fmt.Errorf("%T write field begin error 26:CondType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CondType)); err != nil {
		return fmt.Errorf("%T.CondType (26) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 26:CondType: %s", p, err)
	}
	return err
}

func (p *Order) writeField27(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderType", thrift.I32, 27); err != nil {
		return fmt.Errorf("%T write field begin error 27:OrderType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OrderType)); err != nil {
		return fmt.Errorf("%T.OrderType (27) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 27:OrderType: %s", p, err)
	}
	return err
}

func (p *Order) writeField28(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ValidType", thrift.I32, 28); err != nil {
		return fmt.Errorf("%T write field begin error 28:ValidType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ValidType)); err != nil {
		return fmt.Errorf("%T.ValidType (28) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 28:ValidType: %s", p, err)
	}
	return err
}

func (p *Order) writeField29(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Status", thrift.I32, 29); err != nil {
		return fmt.Errorf("%T write field begin error 29:Status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.Status (29) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 29:Status: %s", p, err)
	}
	return err
}

func (p *Order) writeField30(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DecInPrice", thrift.BYTE, 30); err != nil {
		return fmt.Errorf("%T write field begin error 30:DecInPrice: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.DecInPrice)); err != nil {
		return fmt.Errorf("%T.DecInPrice (30) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 30:DecInPrice: %s", p, err)
	}
	return err
}

func (p *Order) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderAction", thrift.BYTE, 31); err != nil {
		return fmt.Errorf("%T write field begin error 31:OrderAction: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.OrderAction)); err != nil {
		return fmt.Errorf("%T.OrderAction (31) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 31:OrderAction: %s", p, err)
	}
	return err
}

func (p *Order) writeField32(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I32, 32); err != nil {
		return fmt.Errorf("%T write field begin error 32:UpdateTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UpdateTime)); err != nil {
		return fmt.Errorf("%T.UpdateTime (32) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 32:UpdateTime: %s", p, err)
	}
	return err
}

func (p *Order) writeField33(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateSeqNo", thrift.I32, 33); err != nil {
		return fmt.Errorf("%T write field begin error 33:UpdateSeqNo: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UpdateSeqNo)); err != nil {
		return fmt.Errorf("%T.UpdateSeqNo (33) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 33:UpdateSeqNo: %s", p, err)
	}
	return err
}

func (p *Order) writeField34(oprot thrift.TProtocol) (err error) {
	if p.IsSetFees() {
		if err := oprot.WriteFieldBegin("Fees", thrift.DOUBLE, 34); err != nil {
			return fmt.Errorf("%T write field begin error 34:Fees: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.Fees)); err != nil {
			return fmt.Errorf("%T.Fees (34) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 34:Fees: %s", p, err)
		}
	}
	return err
}

func (p *Order) writeField35(oprot thrift.TProtocol) (err error) {
	if p.IsSetProfit() {
		if err := oprot.WriteFieldBegin("Profit", thrift.DOUBLE, 35); err != nil {
			return fmt.Errorf("%T write field begin error 35:Profit: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.Profit)); err != nil {
			return fmt.Errorf("%T.Profit (35) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 35:Profit: %s", p, err)
		}
	}
	return err
}

func (p *Order) writeField36(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err := oprot.WriteFieldBegin("Remark", thrift.STRING, 36); err != nil {
			return fmt.Errorf("%T write field begin error 36:Remark: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Remark)); err != nil {
			return fmt.Errorf("%T.Remark (36) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 36:Remark: %s", p, err)
		}
	}
	return err
}

func (p *Order) writeField37(oprot thrift.TProtocol) (err error) {
	if p.IsSetProdName() {
		if err := oprot.WriteFieldBegin("ProdName", thrift.STRING, 37); err != nil {
			return fmt.Errorf("%T write field begin error 37:ProdName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ProdName)); err != nil {
			return fmt.Errorf("%T.ProdName (37) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 37:ProdName: %s", p, err)
		}
	}
	return err
}

func (p *Order) writeField38(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Deposit", thrift.DOUBLE, 38); err != nil {
		return fmt.Errorf("%T write field begin error 38:Deposit: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Deposit)); err != nil {
		return fmt.Errorf("%T.Deposit (38) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 38:Deposit: %s", p, err)
	}
	return err
}

func (p *Order) writeField39(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("EntrustPrice", thrift.DOUBLE, 39); err != nil {
		return fmt.Errorf("%T write field begin error 39:EntrustPrice: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.EntrustPrice)); err != nil {
		return fmt.Errorf("%T.EntrustPrice (39) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 39:EntrustPrice: %s", p, err)
	}
	return err
}

func (p *Order) writeField40(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CurrentPrice", thrift.DOUBLE, 40); err != nil {
		return fmt.Errorf("%T write field begin error 40:CurrentPrice: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.CurrentPrice)); err != nil {
		return fmt.Errorf("%T.CurrentPrice (40) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 40:CurrentPrice: %s", p, err)
	}
	return err
}

func (p *Order) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Order(%+v)", *p)
}

type Position struct {
	Qty           int32   `thrift:"Qty,1,required" json:"Qty"`
	DepQty        int32   `thrift:"DepQty,2,required" json:"DepQty"`
	LongQty       int32   `thrift:"LongQty,3,required" json:"LongQty"`
	ShortQty      int32   `thrift:"ShortQty,4,required" json:"ShortQty"`
	TotalAmt      float64 `thrift:"TotalAmt,5,required" json:"TotalAmt"`
	DepTotalAmt   float64 `thrift:"DepTotalAmt,6,required" json:"DepTotalAmt"`
	LongTotalAmt  float64 `thrift:"LongTotalAmt,7,required" json:"LongTotalAmt"`
	ShortTotalAmt float64 `thrift:"ShortTotalAmt,8,required" json:"ShortTotalAmt"`
	PLBaseCcy     float64 `thrift:"PLBaseCcy,9,required" json:"PLBaseCcy"`
	PL            float64 `thrift:"PL,10,required" json:"PL"`
	ExchangeRate  float64 `thrift:"ExchangeRate,11,required" json:"ExchangeRate"`
	AccNo         string  `thrift:"AccNo,12,required" json:"AccNo"`
	ProdCode      string  `thrift:"ProdCode,13,required" json:"ProdCode"`
	LongShort     int8    `thrift:"LongShort,14,required" json:"LongShort"`
	DecInPrice    int8    `thrift:"DecInPrice,15,required" json:"DecInPrice"`
	ProdName      *string `thrift:"ProdName,16" json:"ProdName"`
	MarketPrice   float64 `thrift:"MarketPrice,17,required" json:"MarketPrice"`
}

func NewPosition() *Position {
	return &Position{}
}

func (p *Position) GetQty() int32 {
	return p.Qty
}

func (p *Position) GetDepQty() int32 {
	return p.DepQty
}

func (p *Position) GetLongQty() int32 {
	return p.LongQty
}

func (p *Position) GetShortQty() int32 {
	return p.ShortQty
}

func (p *Position) GetTotalAmt() float64 {
	return p.TotalAmt
}

func (p *Position) GetDepTotalAmt() float64 {
	return p.DepTotalAmt
}

func (p *Position) GetLongTotalAmt() float64 {
	return p.LongTotalAmt
}

func (p *Position) GetShortTotalAmt() float64 {
	return p.ShortTotalAmt
}

func (p *Position) GetPLBaseCcy() float64 {
	return p.PLBaseCcy
}

func (p *Position) GetPL() float64 {
	return p.PL
}

func (p *Position) GetExchangeRate() float64 {
	return p.ExchangeRate
}

func (p *Position) GetAccNo() string {
	return p.AccNo
}

func (p *Position) GetProdCode() string {
	return p.ProdCode
}

func (p *Position) GetLongShort() int8 {
	return p.LongShort
}

func (p *Position) GetDecInPrice() int8 {
	return p.DecInPrice
}

var Position_ProdName_DEFAULT string

func (p *Position) GetProdName() string {
	if !p.IsSetProdName() {
		return Position_ProdName_DEFAULT
	}
	return *p.ProdName
}

func (p *Position) GetMarketPrice() float64 {
	return p.MarketPrice
}
func (p *Position) IsSetProdName() bool {
	return p.ProdName != nil
}

func (p *Position) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Position) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Qty = v
	}
	return nil
}

func (p *Position) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DepQty = v
	}
	return nil
}

func (p *Position) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.LongQty = v
	}
	return nil
}

func (p *Position) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ShortQty = v
	}
	return nil
}

func (p *Position) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.TotalAmt = v
	}
	return nil
}

func (p *Position) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.DepTotalAmt = v
	}
	return nil
}

func (p *Position) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.LongTotalAmt = v
	}
	return nil
}

func (p *Position) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.ShortTotalAmt = v
	}
	return nil
}

func (p *Position) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.PLBaseCcy = v
	}
	return nil
}

func (p *Position) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.PL = v
	}
	return nil
}

func (p *Position) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.ExchangeRate = v
	}
	return nil
}

func (p *Position) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *Position) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.ProdCode = v
	}
	return nil
}

func (p *Position) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		temp := int8(v)
		p.LongShort = temp
	}
	return nil
}

func (p *Position) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		temp := int8(v)
		p.DecInPrice = temp
	}
	return nil
}

func (p *Position) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 16: %s", err)
	} else {
		p.ProdName = &v
	}
	return nil
}

func (p *Position) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		p.MarketPrice = v
	}
	return nil
}

func (p *Position) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Position"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Position) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Qty", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Qty: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Qty)); err != nil {
		return fmt.Errorf("%T.Qty (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Qty: %s", p, err)
	}
	return err
}

func (p *Position) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DepQty", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:DepQty: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DepQty)); err != nil {
		return fmt.Errorf("%T.DepQty (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:DepQty: %s", p, err)
	}
	return err
}

func (p *Position) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LongQty", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:LongQty: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.LongQty)); err != nil {
		return fmt.Errorf("%T.LongQty (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:LongQty: %s", p, err)
	}
	return err
}

func (p *Position) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ShortQty", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:ShortQty: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ShortQty)); err != nil {
		return fmt.Errorf("%T.ShortQty (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:ShortQty: %s", p, err)
	}
	return err
}

func (p *Position) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalAmt", thrift.DOUBLE, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:TotalAmt: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.TotalAmt)); err != nil {
		return fmt.Errorf("%T.TotalAmt (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:TotalAmt: %s", p, err)
	}
	return err
}

func (p *Position) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DepTotalAmt", thrift.DOUBLE, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:DepTotalAmt: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.DepTotalAmt)); err != nil {
		return fmt.Errorf("%T.DepTotalAmt (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:DepTotalAmt: %s", p, err)
	}
	return err
}

func (p *Position) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LongTotalAmt", thrift.DOUBLE, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:LongTotalAmt: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.LongTotalAmt)); err != nil {
		return fmt.Errorf("%T.LongTotalAmt (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:LongTotalAmt: %s", p, err)
	}
	return err
}

func (p *Position) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ShortTotalAmt", thrift.DOUBLE, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:ShortTotalAmt: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.ShortTotalAmt)); err != nil {
		return fmt.Errorf("%T.ShortTotalAmt (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:ShortTotalAmt: %s", p, err)
	}
	return err
}

func (p *Position) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PLBaseCcy", thrift.DOUBLE, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:PLBaseCcy: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.PLBaseCcy)); err != nil {
		return fmt.Errorf("%T.PLBaseCcy (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:PLBaseCcy: %s", p, err)
	}
	return err
}

func (p *Position) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PL", thrift.DOUBLE, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:PL: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.PL)); err != nil {
		return fmt.Errorf("%T.PL (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:PL: %s", p, err)
	}
	return err
}

func (p *Position) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExchangeRate", thrift.DOUBLE, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:ExchangeRate: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.ExchangeRate)); err != nil {
		return fmt.Errorf("%T.ExchangeRate (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:ExchangeRate: %s", p, err)
	}
	return err
}

func (p *Position) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:AccNo: %s", p, err)
	}
	return err
}

func (p *Position) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProdCode", thrift.STRING, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:ProdCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProdCode)); err != nil {
		return fmt.Errorf("%T.ProdCode (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:ProdCode: %s", p, err)
	}
	return err
}

func (p *Position) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LongShort", thrift.BYTE, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:LongShort: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.LongShort)); err != nil {
		return fmt.Errorf("%T.LongShort (14) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:LongShort: %s", p, err)
	}
	return err
}

func (p *Position) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DecInPrice", thrift.BYTE, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:DecInPrice: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.DecInPrice)); err != nil {
		return fmt.Errorf("%T.DecInPrice (15) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:DecInPrice: %s", p, err)
	}
	return err
}

func (p *Position) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetProdName() {
		if err := oprot.WriteFieldBegin("ProdName", thrift.STRING, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:ProdName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ProdName)); err != nil {
			return fmt.Errorf("%T.ProdName (16) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:ProdName: %s", p, err)
		}
	}
	return err
}

func (p *Position) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MarketPrice", thrift.DOUBLE, 17); err != nil {
		return fmt.Errorf("%T write field begin error 17:MarketPrice: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.MarketPrice)); err != nil {
		return fmt.Errorf("%T.MarketPrice (17) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 17:MarketPrice: %s", p, err)
	}
	return err
}

func (p *Position) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Position(%+v)", *p)
}

type TradeInfo struct {
	RecNo          int32       `thrift:"RecNo,1,required" json:"RecNo"`
	Price          float64     `thrift:"Price,2,required" json:"Price"`
	TradeNo        int64       `thrift:"TradeNo,3,required" json:"TradeNo"`
	ExtOrderNo     int64       `thrift:"ExtOrderNo,4,required" json:"ExtOrderNo"`
	IntOrderNo     int32       `thrift:"IntOrderNo,5,required" json:"IntOrderNo"`
	Qty            int32       `thrift:"Qty,6,required" json:"Qty"`
	TradeDate      int32       `thrift:"TradeDate,7,required" json:"TradeDate"`
	TradeTime      int32       `thrift:"TradeTime,8,required" json:"TradeTime"`
	AccNo          string      `thrift:"AccNo,9,required" json:"AccNo"`
	ProdCode       string      `thrift:"ProdCode,10,required" json:"ProdCode"`
	Initiator      string      `thrift:"Initiator,11,required" json:"Initiator"`
	Ref            string      `thrift:"Ref,12,required" json:"Ref"`
	Ref2           string      `thrift:"Ref2,13,required" json:"Ref2"`
	GatewayCode    string      `thrift:"GatewayCode,14,required" json:"GatewayCode"`
	ClOrderId      string      `thrift:"ClOrderId,15,required" json:"ClOrderId"`
	BuySell        int8        `thrift:"BuySell,16,required" json:"BuySell"`
	OpenClose      int8        `thrift:"OpenClose,17,required" json:"OpenClose"`
	Status         OrderStatus `thrift:"Status,18,required" json:"Status"`
	DecInPrice     int8        `thrift:"DecInPrice,19,required" json:"DecInPrice"`
	OrderPrice     float64     `thrift:"OrderPrice,20,required" json:"OrderPrice"`
	TradeRef       string      `thrift:"TradeRef,21,required" json:"TradeRef"`
	TotalQty       int32       `thrift:"TotalQty,22,required" json:"TotalQty"`
	RemainingQty   int32       `thrift:"RemainingQty,23,required" json:"RemainingQty"`
	TradedQty      int32       `thrift:"TradedQty,24,required" json:"TradedQty"`
	AvgTradedPrice float64     `thrift:"AvgTradedPrice,25,required" json:"AvgTradedPrice"`
	Deposit        float64     `thrift:"Deposit,26,required" json:"Deposit"`
}

func NewTradeInfo() *TradeInfo {
	return &TradeInfo{}
}

func (p *TradeInfo) GetRecNo() int32 {
	return p.RecNo
}

func (p *TradeInfo) GetPrice() float64 {
	return p.Price
}

func (p *TradeInfo) GetTradeNo() int64 {
	return p.TradeNo
}

func (p *TradeInfo) GetExtOrderNo() int64 {
	return p.ExtOrderNo
}

func (p *TradeInfo) GetIntOrderNo() int32 {
	return p.IntOrderNo
}

func (p *TradeInfo) GetQty() int32 {
	return p.Qty
}

func (p *TradeInfo) GetTradeDate() int32 {
	return p.TradeDate
}

func (p *TradeInfo) GetTradeTime() int32 {
	return p.TradeTime
}

func (p *TradeInfo) GetAccNo() string {
	return p.AccNo
}

func (p *TradeInfo) GetProdCode() string {
	return p.ProdCode
}

func (p *TradeInfo) GetInitiator() string {
	return p.Initiator
}

func (p *TradeInfo) GetRef() string {
	return p.Ref
}

func (p *TradeInfo) GetRef2() string {
	return p.Ref2
}

func (p *TradeInfo) GetGatewayCode() string {
	return p.GatewayCode
}

func (p *TradeInfo) GetClOrderId() string {
	return p.ClOrderId
}

func (p *TradeInfo) GetBuySell() int8 {
	return p.BuySell
}

func (p *TradeInfo) GetOpenClose() int8 {
	return p.OpenClose
}

func (p *TradeInfo) GetStatus() OrderStatus {
	return p.Status
}

func (p *TradeInfo) GetDecInPrice() int8 {
	return p.DecInPrice
}

func (p *TradeInfo) GetOrderPrice() float64 {
	return p.OrderPrice
}

func (p *TradeInfo) GetTradeRef() string {
	return p.TradeRef
}

func (p *TradeInfo) GetTotalQty() int32 {
	return p.TotalQty
}

func (p *TradeInfo) GetRemainingQty() int32 {
	return p.RemainingQty
}

func (p *TradeInfo) GetTradedQty() int32 {
	return p.TradedQty
}

func (p *TradeInfo) GetAvgTradedPrice() float64 {
	return p.AvgTradedPrice
}

func (p *TradeInfo) GetDeposit() float64 {
	return p.Deposit
}
func (p *TradeInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.ReadField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.ReadField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.ReadField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.ReadField26(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TradeInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RecNo = v
	}
	return nil
}

func (p *TradeInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *TradeInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.TradeNo = v
	}
	return nil
}

func (p *TradeInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ExtOrderNo = v
	}
	return nil
}

func (p *TradeInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.IntOrderNo = v
	}
	return nil
}

func (p *TradeInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Qty = v
	}
	return nil
}

func (p *TradeInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.TradeDate = v
	}
	return nil
}

func (p *TradeInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.TradeTime = v
	}
	return nil
}

func (p *TradeInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *TradeInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.ProdCode = v
	}
	return nil
}

func (p *TradeInfo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.Initiator = v
	}
	return nil
}

func (p *TradeInfo) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.Ref = v
	}
	return nil
}

func (p *TradeInfo) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.Ref2 = v
	}
	return nil
}

func (p *TradeInfo) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.GatewayCode = v
	}
	return nil
}

func (p *TradeInfo) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.ClOrderId = v
	}
	return nil
}

func (p *TradeInfo) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 16: %s", err)
	} else {
		temp := int8(v)
		p.BuySell = temp
	}
	return nil
}

func (p *TradeInfo) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		temp := int8(v)
		p.OpenClose = temp
	}
	return nil
}

func (p *TradeInfo) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 18: %s", err)
	} else {
		temp := OrderStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *TradeInfo) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 19: %s", err)
	} else {
		temp := int8(v)
		p.DecInPrice = temp
	}
	return nil
}

func (p *TradeInfo) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 20: %s", err)
	} else {
		p.OrderPrice = v
	}
	return nil
}

func (p *TradeInfo) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 21: %s", err)
	} else {
		p.TradeRef = v
	}
	return nil
}

func (p *TradeInfo) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 22: %s", err)
	} else {
		p.TotalQty = v
	}
	return nil
}

func (p *TradeInfo) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 23: %s", err)
	} else {
		p.RemainingQty = v
	}
	return nil
}

func (p *TradeInfo) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 24: %s", err)
	} else {
		p.TradedQty = v
	}
	return nil
}

func (p *TradeInfo) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 25: %s", err)
	} else {
		p.AvgTradedPrice = v
	}
	return nil
}

func (p *TradeInfo) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 26: %s", err)
	} else {
		p.Deposit = v
	}
	return nil
}

func (p *TradeInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TradeInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TradeInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RecNo", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:RecNo: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.RecNo)); err != nil {
		return fmt.Errorf("%T.RecNo (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:RecNo: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Price", thrift.DOUBLE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Price: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Price)); err != nil {
		return fmt.Errorf("%T.Price (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Price: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TradeNo", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:TradeNo: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TradeNo)); err != nil {
		return fmt.Errorf("%T.TradeNo (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:TradeNo: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExtOrderNo", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:ExtOrderNo: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ExtOrderNo)); err != nil {
		return fmt.Errorf("%T.ExtOrderNo (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:ExtOrderNo: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IntOrderNo", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:IntOrderNo: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.IntOrderNo)); err != nil {
		return fmt.Errorf("%T.IntOrderNo (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:IntOrderNo: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Qty", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:Qty: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Qty)); err != nil {
		return fmt.Errorf("%T.Qty (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:Qty: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TradeDate", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:TradeDate: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TradeDate)); err != nil {
		return fmt.Errorf("%T.TradeDate (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:TradeDate: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TradeTime", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:TradeTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TradeTime)); err != nil {
		return fmt.Errorf("%T.TradeTime (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:TradeTime: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:AccNo: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProdCode", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:ProdCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProdCode)); err != nil {
		return fmt.Errorf("%T.ProdCode (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:ProdCode: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Initiator", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:Initiator: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Initiator)); err != nil {
		return fmt.Errorf("%T.Initiator (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:Initiator: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ref", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:Ref: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ref)); err != nil {
		return fmt.Errorf("%T.Ref (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:Ref: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ref2", thrift.STRING, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:Ref2: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ref2)); err != nil {
		return fmt.Errorf("%T.Ref2 (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:Ref2: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GatewayCode", thrift.STRING, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:GatewayCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GatewayCode)); err != nil {
		return fmt.Errorf("%T.GatewayCode (14) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:GatewayCode: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ClOrderId", thrift.STRING, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:ClOrderId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ClOrderId)); err != nil {
		return fmt.Errorf("%T.ClOrderId (15) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:ClOrderId: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BuySell", thrift.BYTE, 16); err != nil {
		return fmt.Errorf("%T write field begin error 16:BuySell: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.BuySell)); err != nil {
		return fmt.Errorf("%T.BuySell (16) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 16:BuySell: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OpenClose", thrift.BYTE, 17); err != nil {
		return fmt.Errorf("%T write field begin error 17:OpenClose: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.OpenClose)); err != nil {
		return fmt.Errorf("%T.OpenClose (17) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 17:OpenClose: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Status", thrift.I32, 18); err != nil {
		return fmt.Errorf("%T write field begin error 18:Status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.Status (18) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 18:Status: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DecInPrice", thrift.BYTE, 19); err != nil {
		return fmt.Errorf("%T write field begin error 19:DecInPrice: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.DecInPrice)); err != nil {
		return fmt.Errorf("%T.DecInPrice (19) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 19:DecInPrice: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderPrice", thrift.DOUBLE, 20); err != nil {
		return fmt.Errorf("%T write field begin error 20:OrderPrice: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.OrderPrice)); err != nil {
		return fmt.Errorf("%T.OrderPrice (20) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 20:OrderPrice: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TradeRef", thrift.STRING, 21); err != nil {
		return fmt.Errorf("%T write field begin error 21:TradeRef: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TradeRef)); err != nil {
		return fmt.Errorf("%T.TradeRef (21) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 21:TradeRef: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalQty", thrift.I32, 22); err != nil {
		return fmt.Errorf("%T write field begin error 22:TotalQty: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TotalQty)); err != nil {
		return fmt.Errorf("%T.TotalQty (22) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 22:TotalQty: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RemainingQty", thrift.I32, 23); err != nil {
		return fmt.Errorf("%T write field begin error 23:RemainingQty: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.RemainingQty)); err != nil {
		return fmt.Errorf("%T.RemainingQty (23) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 23:RemainingQty: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TradedQty", thrift.I32, 24); err != nil {
		return fmt.Errorf("%T write field begin error 24:TradedQty: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TradedQty)); err != nil {
		return fmt.Errorf("%T.TradedQty (24) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 24:TradedQty: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AvgTradedPrice", thrift.DOUBLE, 25); err != nil {
		return fmt.Errorf("%T write field begin error 25:AvgTradedPrice: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.AvgTradedPrice)); err != nil {
		return fmt.Errorf("%T.AvgTradedPrice (25) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 25:AvgTradedPrice: %s", p, err)
	}
	return err
}

func (p *TradeInfo) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Deposit", thrift.DOUBLE, 26); err != nil {
		return fmt.Errorf("%T write field begin error 26:Deposit: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Deposit)); err != nil {
		return fmt.Errorf("%T.Deposit (26) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 26:Deposit: %s", p, err)
	}
	return err
}

func (p *TradeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TradeInfo(%+v)", *p)
}

type Market struct {
	MarketCode string `thrift:"MarketCode,1,required" json:"MarketCode"`
	MarketName string `thrift:"MarketName,2,required" json:"MarketName"`
}

func NewMarket() *Market {
	return &Market{}
}

func (p *Market) GetMarketCode() string {
	return p.MarketCode
}

func (p *Market) GetMarketName() string {
	return p.MarketName
}
func (p *Market) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Market) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MarketCode = v
	}
	return nil
}

func (p *Market) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MarketName = v
	}
	return nil
}

func (p *Market) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Market"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Market) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MarketCode", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:MarketCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MarketCode)); err != nil {
		return fmt.Errorf("%T.MarketCode (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:MarketCode: %s", p, err)
	}
	return err
}

func (p *Market) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MarketName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:MarketName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MarketName)); err != nil {
		return fmt.Errorf("%T.MarketName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:MarketName: %s", p, err)
	}
	return err
}

func (p *Market) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Market(%+v)", *p)
}

type Instrument struct {
	Margin       float64 `thrift:"Margin,1,required" json:"Margin"`
	ContractSize float64 `thrift:"ContractSize,2,required" json:"ContractSize"`
	MarketCode   string  `thrift:"MarketCode,3,required" json:"MarketCode"`
	InstCode     string  `thrift:"InstCode,4,required" json:"InstCode"`
	InstName     string  `thrift:"InstName,5,required" json:"InstName"`
	InstName1    string  `thrift:"InstName1,6,required" json:"InstName1"`
	InstName2    string  `thrift:"InstName2,7,required" json:"InstName2"`
	Ccy          string  `thrift:"Ccy,8,required" json:"Ccy"`
	DecInPrice   int8    `thrift:"DecInPrice,9,required" json:"DecInPrice"`
	InstType     int8    `thrift:"InstType,10,required" json:"InstType"`
}

func NewInstrument() *Instrument {
	return &Instrument{}
}

func (p *Instrument) GetMargin() float64 {
	return p.Margin
}

func (p *Instrument) GetContractSize() float64 {
	return p.ContractSize
}

func (p *Instrument) GetMarketCode() string {
	return p.MarketCode
}

func (p *Instrument) GetInstCode() string {
	return p.InstCode
}

func (p *Instrument) GetInstName() string {
	return p.InstName
}

func (p *Instrument) GetInstName1() string {
	return p.InstName1
}

func (p *Instrument) GetInstName2() string {
	return p.InstName2
}

func (p *Instrument) GetCcy() string {
	return p.Ccy
}

func (p *Instrument) GetDecInPrice() int8 {
	return p.DecInPrice
}

func (p *Instrument) GetInstType() int8 {
	return p.InstType
}
func (p *Instrument) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Instrument) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Margin = v
	}
	return nil
}

func (p *Instrument) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ContractSize = v
	}
	return nil
}

func (p *Instrument) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MarketCode = v
	}
	return nil
}

func (p *Instrument) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.InstCode = v
	}
	return nil
}

func (p *Instrument) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.InstName = v
	}
	return nil
}

func (p *Instrument) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.InstName1 = v
	}
	return nil
}

func (p *Instrument) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.InstName2 = v
	}
	return nil
}

func (p *Instrument) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Ccy = v
	}
	return nil
}

func (p *Instrument) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		temp := int8(v)
		p.DecInPrice = temp
	}
	return nil
}

func (p *Instrument) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		temp := int8(v)
		p.InstType = temp
	}
	return nil
}

func (p *Instrument) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Instrument"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Instrument) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Margin", thrift.DOUBLE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Margin: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Margin)); err != nil {
		return fmt.Errorf("%T.Margin (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Margin: %s", p, err)
	}
	return err
}

func (p *Instrument) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ContractSize", thrift.DOUBLE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:ContractSize: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.ContractSize)); err != nil {
		return fmt.Errorf("%T.ContractSize (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:ContractSize: %s", p, err)
	}
	return err
}

func (p *Instrument) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MarketCode", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:MarketCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MarketCode)); err != nil {
		return fmt.Errorf("%T.MarketCode (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:MarketCode: %s", p, err)
	}
	return err
}

func (p *Instrument) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("InstCode", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:InstCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.InstCode)); err != nil {
		return fmt.Errorf("%T.InstCode (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:InstCode: %s", p, err)
	}
	return err
}

func (p *Instrument) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("InstName", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:InstName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.InstName)); err != nil {
		return fmt.Errorf("%T.InstName (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:InstName: %s", p, err)
	}
	return err
}

func (p *Instrument) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("InstName1", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:InstName1: %s", p, err)
	}
	if err := oprot.WriteString(string(p.InstName1)); err != nil {
		return fmt.Errorf("%T.InstName1 (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:InstName1: %s", p, err)
	}
	return err
}

func (p *Instrument) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("InstName2", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:InstName2: %s", p, err)
	}
	if err := oprot.WriteString(string(p.InstName2)); err != nil {
		return fmt.Errorf("%T.InstName2 (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:InstName2: %s", p, err)
	}
	return err
}

func (p *Instrument) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ccy", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:Ccy: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ccy)); err != nil {
		return fmt.Errorf("%T.Ccy (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:Ccy: %s", p, err)
	}
	return err
}

func (p *Instrument) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DecInPrice", thrift.BYTE, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:DecInPrice: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.DecInPrice)); err != nil {
		return fmt.Errorf("%T.DecInPrice (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:DecInPrice: %s", p, err)
	}
	return err
}

func (p *Instrument) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("InstType", thrift.BYTE, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:InstType: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.InstType)); err != nil {
		return fmt.Errorf("%T.InstType (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:InstType: %s", p, err)
	}
	return err
}

func (p *Instrument) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Instrument(%+v)", *p)
}

type Product struct {
	ProdCode   string `thrift:"ProdCode,1,required" json:"ProdCode"`
	ProdType   int8   `thrift:"ProdType,2,required" json:"ProdType"`
	ProdName   string `thrift:"ProdName,3,required" json:"ProdName"`
	Underlying string `thrift:"Underlying,4,required" json:"Underlying"`
	InstCode   string `thrift:"InstCode,5,required" json:"InstCode"`
	ExpiryDate int32  `thrift:"ExpiryDate,6,required" json:"ExpiryDate"`
	CallPut    int8   `thrift:"CallPut,7,required" json:"CallPut"`
	Strike     int32  `thrift:"Strike,8,required" json:"Strike"`
	LotSize    int32  `thrift:"LotSize,9,required" json:"LotSize"`
	ProdName1  string `thrift:"ProdName1,10,required" json:"ProdName1"`
	ProdName2  string `thrift:"ProdName2,11,required" json:"ProdName2"`
	OptStyle   int8   `thrift:"OptStyle,12,required" json:"OptStyle"`
	TickSize   int32  `thrift:"TickSize,13,required" json:"TickSize"`
}

func NewProduct() *Product {
	return &Product{}
}

func (p *Product) GetProdCode() string {
	return p.ProdCode
}

func (p *Product) GetProdType() int8 {
	return p.ProdType
}

func (p *Product) GetProdName() string {
	return p.ProdName
}

func (p *Product) GetUnderlying() string {
	return p.Underlying
}

func (p *Product) GetInstCode() string {
	return p.InstCode
}

func (p *Product) GetExpiryDate() int32 {
	return p.ExpiryDate
}

func (p *Product) GetCallPut() int8 {
	return p.CallPut
}

func (p *Product) GetStrike() int32 {
	return p.Strike
}

func (p *Product) GetLotSize() int32 {
	return p.LotSize
}

func (p *Product) GetProdName1() string {
	return p.ProdName1
}

func (p *Product) GetProdName2() string {
	return p.ProdName2
}

func (p *Product) GetOptStyle() int8 {
	return p.OptStyle
}

func (p *Product) GetTickSize() int32 {
	return p.TickSize
}
func (p *Product) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Product) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProdCode = v
	}
	return nil
}

func (p *Product) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := int8(v)
		p.ProdType = temp
	}
	return nil
}

func (p *Product) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ProdName = v
	}
	return nil
}

func (p *Product) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Underlying = v
	}
	return nil
}

func (p *Product) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.InstCode = v
	}
	return nil
}

func (p *Product) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.ExpiryDate = v
	}
	return nil
}

func (p *Product) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := int8(v)
		p.CallPut = temp
	}
	return nil
}

func (p *Product) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Strike = v
	}
	return nil
}

func (p *Product) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.LotSize = v
	}
	return nil
}

func (p *Product) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.ProdName1 = v
	}
	return nil
}

func (p *Product) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.ProdName2 = v
	}
	return nil
}

func (p *Product) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		temp := int8(v)
		p.OptStyle = temp
	}
	return nil
}

func (p *Product) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.TickSize = v
	}
	return nil
}

func (p *Product) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Product"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Product) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProdCode", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ProdCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProdCode)); err != nil {
		return fmt.Errorf("%T.ProdCode (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ProdCode: %s", p, err)
	}
	return err
}

func (p *Product) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProdType", thrift.BYTE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:ProdType: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.ProdType)); err != nil {
		return fmt.Errorf("%T.ProdType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:ProdType: %s", p, err)
	}
	return err
}

func (p *Product) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProdName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:ProdName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProdName)); err != nil {
		return fmt.Errorf("%T.ProdName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:ProdName: %s", p, err)
	}
	return err
}

func (p *Product) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Underlying", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Underlying: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Underlying)); err != nil {
		return fmt.Errorf("%T.Underlying (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Underlying: %s", p, err)
	}
	return err
}

func (p *Product) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("InstCode", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:InstCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.InstCode)); err != nil {
		return fmt.Errorf("%T.InstCode (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:InstCode: %s", p, err)
	}
	return err
}

func (p *Product) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExpiryDate", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:ExpiryDate: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ExpiryDate)); err != nil {
		return fmt.Errorf("%T.ExpiryDate (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:ExpiryDate: %s", p, err)
	}
	return err
}

func (p *Product) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CallPut", thrift.BYTE, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:CallPut: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.CallPut)); err != nil {
		return fmt.Errorf("%T.CallPut (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:CallPut: %s", p, err)
	}
	return err
}

func (p *Product) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Strike", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:Strike: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Strike)); err != nil {
		return fmt.Errorf("%T.Strike (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:Strike: %s", p, err)
	}
	return err
}

func (p *Product) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LotSize", thrift.I32, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:LotSize: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.LotSize)); err != nil {
		return fmt.Errorf("%T.LotSize (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:LotSize: %s", p, err)
	}
	return err
}

func (p *Product) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProdName1", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:ProdName1: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProdName1)); err != nil {
		return fmt.Errorf("%T.ProdName1 (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:ProdName1: %s", p, err)
	}
	return err
}

func (p *Product) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProdName2", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:ProdName2: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProdName2)); err != nil {
		return fmt.Errorf("%T.ProdName2 (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:ProdName2: %s", p, err)
	}
	return err
}

func (p *Product) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OptStyle", thrift.BYTE, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:OptStyle: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.OptStyle)); err != nil {
		return fmt.Errorf("%T.OptStyle (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:OptStyle: %s", p, err)
	}
	return err
}

func (p *Product) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TickSize", thrift.I32, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:TickSize: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TickSize)); err != nil {
		return fmt.Errorf("%T.TickSize (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:TickSize: %s", p, err)
	}
	return err
}

func (p *Product) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Product(%+v)", *p)
}

type PriceInfo struct {
	Bid          []float64 `thrift:"Bid,1,required" json:"Bid"`
	BidQty       []int32   `thrift:"BidQty,2,required" json:"BidQty"`
	BidTicket    []int32   `thrift:"BidTicket,3,required" json:"BidTicket"`
	Ask          []float64 `thrift:"Ask,4,required" json:"Ask"`
	AskQty       []int32   `thrift:"AskQty,5,required" json:"AskQty"`
	AskTicket    []int32   `thrift:"AskTicket,6,required" json:"AskTicket"`
	Last         []float64 `thrift:"Last,7,required" json:"Last"`
	LastQty      []int32   `thrift:"LastQty,8,required" json:"LastQty"`
	LastTime     []int32   `thrift:"LastTime,9,required" json:"LastTime"`
	Equil        float64   `thrift:"Equil,10,required" json:"Equil"`
	Open         float64   `thrift:"Open,11,required" json:"Open"`
	High         float64   `thrift:"High,12,required" json:"High"`
	Low          float64   `thrift:"Low,13,required" json:"Low"`
	Close        float64   `thrift:"Close,14,required" json:"Close"`
	CloseDate    int32     `thrift:"CloseDate,15,required" json:"CloseDate"`
	TurnoverVol  float64   `thrift:"TurnoverVol,16,required" json:"TurnoverVol"`
	TurnoverAmt  float64   `thrift:"TurnoverAmt,17,required" json:"TurnoverAmt"`
	OpenInt      int32     `thrift:"OpenInt,18,required" json:"OpenInt"`
	ProdCode     string    `thrift:"ProdCode,19,required" json:"ProdCode"`
	ProdName     string    `thrift:"ProdName,20,required" json:"ProdName"`
	DecInPrice   int8      `thrift:"DecInPrice,21,required" json:"DecInPrice"`
	ExStateNo    int32     `thrift:"ExStateNo,22,required" json:"ExStateNo"`
	TradeStateNo int32     `thrift:"TradeStateNo,23,required" json:"TradeStateNo"`
	Suspend      bool      `thrift:"Suspend,24,required" json:"Suspend"`
	ExpiryYMD    int32     `thrift:"ExpiryYMD,25,required" json:"ExpiryYMD"`
	ContractYMD  int32     `thrift:"ContractYMD,26,required" json:"ContractYMD"`
	Timestamp    int32     `thrift:"Timestamp,27,required" json:"Timestamp"`
}

func NewPriceInfo() *PriceInfo {
	return &PriceInfo{}
}

func (p *PriceInfo) GetBid() []float64 {
	return p.Bid
}

func (p *PriceInfo) GetBidQty() []int32 {
	return p.BidQty
}

func (p *PriceInfo) GetBidTicket() []int32 {
	return p.BidTicket
}

func (p *PriceInfo) GetAsk() []float64 {
	return p.Ask
}

func (p *PriceInfo) GetAskQty() []int32 {
	return p.AskQty
}

func (p *PriceInfo) GetAskTicket() []int32 {
	return p.AskTicket
}

func (p *PriceInfo) GetLast() []float64 {
	return p.Last
}

func (p *PriceInfo) GetLastQty() []int32 {
	return p.LastQty
}

func (p *PriceInfo) GetLastTime() []int32 {
	return p.LastTime
}

func (p *PriceInfo) GetEquil() float64 {
	return p.Equil
}

func (p *PriceInfo) GetOpen() float64 {
	return p.Open
}

func (p *PriceInfo) GetHigh() float64 {
	return p.High
}

func (p *PriceInfo) GetLow() float64 {
	return p.Low
}

func (p *PriceInfo) GetClose() float64 {
	return p.Close
}

func (p *PriceInfo) GetCloseDate() int32 {
	return p.CloseDate
}

func (p *PriceInfo) GetTurnoverVol() float64 {
	return p.TurnoverVol
}

func (p *PriceInfo) GetTurnoverAmt() float64 {
	return p.TurnoverAmt
}

func (p *PriceInfo) GetOpenInt() int32 {
	return p.OpenInt
}

func (p *PriceInfo) GetProdCode() string {
	return p.ProdCode
}

func (p *PriceInfo) GetProdName() string {
	return p.ProdName
}

func (p *PriceInfo) GetDecInPrice() int8 {
	return p.DecInPrice
}

func (p *PriceInfo) GetExStateNo() int32 {
	return p.ExStateNo
}

func (p *PriceInfo) GetTradeStateNo() int32 {
	return p.TradeStateNo
}

func (p *PriceInfo) GetSuspend() bool {
	return p.Suspend
}

func (p *PriceInfo) GetExpiryYMD() int32 {
	return p.ExpiryYMD
}

func (p *PriceInfo) GetContractYMD() int32 {
	return p.ContractYMD
}

func (p *PriceInfo) GetTimestamp() int32 {
	return p.Timestamp
}
func (p *PriceInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.ReadField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.ReadField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.ReadField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.ReadField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.ReadField27(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PriceInfo) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]float64, 0, size)
	p.Bid = tSlice
	for i := 0; i < size; i++ {
		var _elem0 float64
		if v, err := iprot.ReadDouble(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem0 = v
		}
		p.Bid = append(p.Bid, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PriceInfo) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.BidQty = tSlice
	for i := 0; i < size; i++ {
		var _elem1 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem1 = v
		}
		p.BidQty = append(p.BidQty, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PriceInfo) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.BidTicket = tSlice
	for i := 0; i < size; i++ {
		var _elem2 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem2 = v
		}
		p.BidTicket = append(p.BidTicket, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PriceInfo) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]float64, 0, size)
	p.Ask = tSlice
	for i := 0; i < size; i++ {
		var _elem3 float64
		if v, err := iprot.ReadDouble(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem3 = v
		}
		p.Ask = append(p.Ask, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PriceInfo) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.AskQty = tSlice
	for i := 0; i < size; i++ {
		var _elem4 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem4 = v
		}
		p.AskQty = append(p.AskQty, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PriceInfo) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.AskTicket = tSlice
	for i := 0; i < size; i++ {
		var _elem5 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem5 = v
		}
		p.AskTicket = append(p.AskTicket, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PriceInfo) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]float64, 0, size)
	p.Last = tSlice
	for i := 0; i < size; i++ {
		var _elem6 float64
		if v, err := iprot.ReadDouble(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem6 = v
		}
		p.Last = append(p.Last, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PriceInfo) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.LastQty = tSlice
	for i := 0; i < size; i++ {
		var _elem7 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem7 = v
		}
		p.LastQty = append(p.LastQty, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PriceInfo) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.LastTime = tSlice
	for i := 0; i < size; i++ {
		var _elem8 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem8 = v
		}
		p.LastTime = append(p.LastTime, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PriceInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.Equil = v
	}
	return nil
}

func (p *PriceInfo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.Open = v
	}
	return nil
}

func (p *PriceInfo) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.High = v
	}
	return nil
}

func (p *PriceInfo) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.Low = v
	}
	return nil
}

func (p *PriceInfo) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.Close = v
	}
	return nil
}

func (p *PriceInfo) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.CloseDate = v
	}
	return nil
}

func (p *PriceInfo) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 16: %s", err)
	} else {
		p.TurnoverVol = v
	}
	return nil
}

func (p *PriceInfo) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		p.TurnoverAmt = v
	}
	return nil
}

func (p *PriceInfo) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 18: %s", err)
	} else {
		p.OpenInt = v
	}
	return nil
}

func (p *PriceInfo) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 19: %s", err)
	} else {
		p.ProdCode = v
	}
	return nil
}

func (p *PriceInfo) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 20: %s", err)
	} else {
		p.ProdName = v
	}
	return nil
}

func (p *PriceInfo) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 21: %s", err)
	} else {
		temp := int8(v)
		p.DecInPrice = temp
	}
	return nil
}

func (p *PriceInfo) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 22: %s", err)
	} else {
		p.ExStateNo = v
	}
	return nil
}

func (p *PriceInfo) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 23: %s", err)
	} else {
		p.TradeStateNo = v
	}
	return nil
}

func (p *PriceInfo) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 24: %s", err)
	} else {
		p.Suspend = v
	}
	return nil
}

func (p *PriceInfo) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 25: %s", err)
	} else {
		p.ExpiryYMD = v
	}
	return nil
}

func (p *PriceInfo) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 26: %s", err)
	} else {
		p.ContractYMD = v
	}
	return nil
}

func (p *PriceInfo) ReadField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 27: %s", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *PriceInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PriceInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PriceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Bid", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Bid: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.Bid)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Bid {
		if err := oprot.WriteDouble(float64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Bid: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BidQty", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:BidQty: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.BidQty)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.BidQty {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:BidQty: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BidTicket", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:BidTicket: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.BidTicket)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.BidTicket {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:BidTicket: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ask", thrift.LIST, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Ask: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.Ask)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Ask {
		if err := oprot.WriteDouble(float64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Ask: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AskQty", thrift.LIST, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:AskQty: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.AskQty)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.AskQty {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:AskQty: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AskTicket", thrift.LIST, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:AskTicket: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.AskTicket)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.AskTicket {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:AskTicket: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Last", thrift.LIST, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:Last: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.Last)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Last {
		if err := oprot.WriteDouble(float64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:Last: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LastQty", thrift.LIST, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:LastQty: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.LastQty)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.LastQty {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:LastQty: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LastTime", thrift.LIST, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:LastTime: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.LastTime)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.LastTime {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:LastTime: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Equil", thrift.DOUBLE, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:Equil: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Equil)); err != nil {
		return fmt.Errorf("%T.Equil (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:Equil: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Open", thrift.DOUBLE, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:Open: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Open)); err != nil {
		return fmt.Errorf("%T.Open (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:Open: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("High", thrift.DOUBLE, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:High: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.High)); err != nil {
		return fmt.Errorf("%T.High (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:High: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Low", thrift.DOUBLE, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:Low: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Low)); err != nil {
		return fmt.Errorf("%T.Low (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:Low: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Close", thrift.DOUBLE, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:Close: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Close)); err != nil {
		return fmt.Errorf("%T.Close (14) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:Close: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CloseDate", thrift.I32, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:CloseDate: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CloseDate)); err != nil {
		return fmt.Errorf("%T.CloseDate (15) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:CloseDate: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TurnoverVol", thrift.DOUBLE, 16); err != nil {
		return fmt.Errorf("%T write field begin error 16:TurnoverVol: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.TurnoverVol)); err != nil {
		return fmt.Errorf("%T.TurnoverVol (16) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 16:TurnoverVol: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TurnoverAmt", thrift.DOUBLE, 17); err != nil {
		return fmt.Errorf("%T write field begin error 17:TurnoverAmt: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.TurnoverAmt)); err != nil {
		return fmt.Errorf("%T.TurnoverAmt (17) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 17:TurnoverAmt: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OpenInt", thrift.I32, 18); err != nil {
		return fmt.Errorf("%T write field begin error 18:OpenInt: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OpenInt)); err != nil {
		return fmt.Errorf("%T.OpenInt (18) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 18:OpenInt: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProdCode", thrift.STRING, 19); err != nil {
		return fmt.Errorf("%T write field begin error 19:ProdCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProdCode)); err != nil {
		return fmt.Errorf("%T.ProdCode (19) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 19:ProdCode: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProdName", thrift.STRING, 20); err != nil {
		return fmt.Errorf("%T write field begin error 20:ProdName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProdName)); err != nil {
		return fmt.Errorf("%T.ProdName (20) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 20:ProdName: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DecInPrice", thrift.BYTE, 21); err != nil {
		return fmt.Errorf("%T write field begin error 21:DecInPrice: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.DecInPrice)); err != nil {
		return fmt.Errorf("%T.DecInPrice (21) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 21:DecInPrice: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExStateNo", thrift.I32, 22); err != nil {
		return fmt.Errorf("%T write field begin error 22:ExStateNo: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ExStateNo)); err != nil {
		return fmt.Errorf("%T.ExStateNo (22) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 22:ExStateNo: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TradeStateNo", thrift.I32, 23); err != nil {
		return fmt.Errorf("%T write field begin error 23:TradeStateNo: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TradeStateNo)); err != nil {
		return fmt.Errorf("%T.TradeStateNo (23) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 23:TradeStateNo: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Suspend", thrift.BOOL, 24); err != nil {
		return fmt.Errorf("%T write field begin error 24:Suspend: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Suspend)); err != nil {
		return fmt.Errorf("%T.Suspend (24) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 24:Suspend: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExpiryYMD", thrift.I32, 25); err != nil {
		return fmt.Errorf("%T write field begin error 25:ExpiryYMD: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ExpiryYMD)); err != nil {
		return fmt.Errorf("%T.ExpiryYMD (25) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 25:ExpiryYMD: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ContractYMD", thrift.I32, 26); err != nil {
		return fmt.Errorf("%T write field begin error 26:ContractYMD: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ContractYMD)); err != nil {
		return fmt.Errorf("%T.ContractYMD (26) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 26:ContractYMD: %s", p, err)
	}
	return err
}

func (p *PriceInfo) writeField27(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Timestamp", thrift.I32, 27); err != nil {
		return fmt.Errorf("%T write field begin error 27:Timestamp: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Timestamp)); err != nil {
		return fmt.Errorf("%T.Timestamp (27) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 27:Timestamp: %s", p, err)
	}
	return err
}

func (p *PriceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PriceInfo(%+v)", *p)
}

type Ticker struct {
	Price      float64 `thrift:"Price,1,required" json:"Price"`
	Qty        int32   `thrift:"Qty,2,required" json:"Qty"`
	TickerTime int32   `thrift:"TickerTime,3,required" json:"TickerTime"`
	DealSrc    int32   `thrift:"DealSrc,4,required" json:"DealSrc"`
	ProdCode   string  `thrift:"ProdCode,5,required" json:"ProdCode"`
	DecInPrice int8    `thrift:"DecInPrice,6,required" json:"DecInPrice"`
}

func NewTicker() *Ticker {
	return &Ticker{}
}

func (p *Ticker) GetPrice() float64 {
	return p.Price
}

func (p *Ticker) GetQty() int32 {
	return p.Qty
}

func (p *Ticker) GetTickerTime() int32 {
	return p.TickerTime
}

func (p *Ticker) GetDealSrc() int32 {
	return p.DealSrc
}

func (p *Ticker) GetProdCode() string {
	return p.ProdCode
}

func (p *Ticker) GetDecInPrice() int8 {
	return p.DecInPrice
}
func (p *Ticker) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Ticker) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *Ticker) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Qty = v
	}
	return nil
}

func (p *Ticker) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.TickerTime = v
	}
	return nil
}

func (p *Ticker) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DealSrc = v
	}
	return nil
}

func (p *Ticker) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ProdCode = v
	}
	return nil
}

func (p *Ticker) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := int8(v)
		p.DecInPrice = temp
	}
	return nil
}

func (p *Ticker) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Ticker"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Ticker) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Price", thrift.DOUBLE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Price: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Price)); err != nil {
		return fmt.Errorf("%T.Price (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Price: %s", p, err)
	}
	return err
}

func (p *Ticker) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Qty", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Qty: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Qty)); err != nil {
		return fmt.Errorf("%T.Qty (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Qty: %s", p, err)
	}
	return err
}

func (p *Ticker) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TickerTime", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:TickerTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TickerTime)); err != nil {
		return fmt.Errorf("%T.TickerTime (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:TickerTime: %s", p, err)
	}
	return err
}

func (p *Ticker) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DealSrc", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:DealSrc: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DealSrc)); err != nil {
		return fmt.Errorf("%T.DealSrc (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:DealSrc: %s", p, err)
	}
	return err
}

func (p *Ticker) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProdCode", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:ProdCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProdCode)); err != nil {
		return fmt.Errorf("%T.ProdCode (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:ProdCode: %s", p, err)
	}
	return err
}

func (p *Ticker) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DecInPrice", thrift.BYTE, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:DecInPrice: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.DecInPrice)); err != nil {
		return fmt.Errorf("%T.DecInPrice (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:DecInPrice: %s", p, err)
	}
	return err
}

func (p *Ticker) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ticker(%+v)", *p)
}

type AccInfo struct {
	NAV                float64  `thrift:"NAV,1,required" json:"NAV"`
	BuyingPower        float64  `thrift:"BuyingPower,2,required" json:"BuyingPower"`
	CashBal            float64  `thrift:"CashBal,3,required" json:"CashBal"`
	MarginCall         float64  `thrift:"MarginCall,4,required" json:"MarginCall"`
	CommodityPL        float64  `thrift:"CommodityPL,5,required" json:"CommodityPL"`
	LockupAmt          float64  `thrift:"LockupAmt,6,required" json:"LockupAmt"`
	CreditLimit        float64  `thrift:"CreditLimit,7,required" json:"CreditLimit"`
	MaxMargin          float64  `thrift:"MaxMargin,8,required" json:"MaxMargin"`
	MaxLoanLimit       float64  `thrift:"MaxLoanLimit,9,required" json:"MaxLoanLimit"`
	TradingLimit       float64  `thrift:"TradingLimit,10,required" json:"TradingLimit"`
	RawMargin          float64  `thrift:"RawMargin,11,required" json:"RawMargin"`
	IMargin            float64  `thrift:"IMargin,12,required" json:"IMargin"`
	MMargin            float64  `thrift:"MMargin,13,required" json:"MMargin"`
	TodayTrans         float64  `thrift:"TodayTrans,14,required" json:"TodayTrans"`
	LoanLimit          float64  `thrift:"LoanLimit,15,required" json:"LoanLimit"`
	TotalFee           float64  `thrift:"TotalFee,16,required" json:"TotalFee"`
	LoanToMR           float64  `thrift:"LoanToMR,17,required" json:"LoanToMR"`
	LoanToMV           float64  `thrift:"LoanToMV,18,required" json:"LoanToMV"`
	AccName            string   `thrift:"AccName,19,required" json:"AccName"`
	BaseCcy            string   `thrift:"BaseCcy,20,required" json:"BaseCcy"`
	MarginClass        string   `thrift:"MarginClass,21,required" json:"MarginClass"`
	TradeClass         string   `thrift:"TradeClass,22,required" json:"TradeClass"`
	ClientId           string   `thrift:"ClientId,23,required" json:"ClientId"`
	AEId               string   `thrift:"AEId,24,required" json:"AEId"`
	AccType            int8     `thrift:"AccType,25,required" json:"AccType"`
	CtrlLevel          int8     `thrift:"CtrlLevel,26,required" json:"CtrlLevel"`
	Active             int8     `thrift:"Active,27,required" json:"Active"`
	MarginPeriod       int8     `thrift:"MarginPeriod,28,required" json:"MarginPeriod"`
	HoldPositionProfit *float64 `thrift:"HoldPositionProfit,29" json:"HoldPositionProfit"`
	TodayProfit        *float64 `thrift:"TodayProfit,30" json:"TodayProfit"`
	PositonProfitFlag  *int32   `thrift:"PositonProfitFlag,31" json:"PositonProfitFlag"`
	TodayProfitFlag    *int32   `thrift:"TodayProfitFlag,32" json:"TodayProfitFlag"`
}

func NewAccInfo() *AccInfo {
	return &AccInfo{}
}

func (p *AccInfo) GetNAV() float64 {
	return p.NAV
}

func (p *AccInfo) GetBuyingPower() float64 {
	return p.BuyingPower
}

func (p *AccInfo) GetCashBal() float64 {
	return p.CashBal
}

func (p *AccInfo) GetMarginCall() float64 {
	return p.MarginCall
}

func (p *AccInfo) GetCommodityPL() float64 {
	return p.CommodityPL
}

func (p *AccInfo) GetLockupAmt() float64 {
	return p.LockupAmt
}

func (p *AccInfo) GetCreditLimit() float64 {
	return p.CreditLimit
}

func (p *AccInfo) GetMaxMargin() float64 {
	return p.MaxMargin
}

func (p *AccInfo) GetMaxLoanLimit() float64 {
	return p.MaxLoanLimit
}

func (p *AccInfo) GetTradingLimit() float64 {
	return p.TradingLimit
}

func (p *AccInfo) GetRawMargin() float64 {
	return p.RawMargin
}

func (p *AccInfo) GetIMargin() float64 {
	return p.IMargin
}

func (p *AccInfo) GetMMargin() float64 {
	return p.MMargin
}

func (p *AccInfo) GetTodayTrans() float64 {
	return p.TodayTrans
}

func (p *AccInfo) GetLoanLimit() float64 {
	return p.LoanLimit
}

func (p *AccInfo) GetTotalFee() float64 {
	return p.TotalFee
}

func (p *AccInfo) GetLoanToMR() float64 {
	return p.LoanToMR
}

func (p *AccInfo) GetLoanToMV() float64 {
	return p.LoanToMV
}

func (p *AccInfo) GetAccName() string {
	return p.AccName
}

func (p *AccInfo) GetBaseCcy() string {
	return p.BaseCcy
}

func (p *AccInfo) GetMarginClass() string {
	return p.MarginClass
}

func (p *AccInfo) GetTradeClass() string {
	return p.TradeClass
}

func (p *AccInfo) GetClientId() string {
	return p.ClientId
}

func (p *AccInfo) GetAEId() string {
	return p.AEId
}

func (p *AccInfo) GetAccType() int8 {
	return p.AccType
}

func (p *AccInfo) GetCtrlLevel() int8 {
	return p.CtrlLevel
}

func (p *AccInfo) GetActive() int8 {
	return p.Active
}

func (p *AccInfo) GetMarginPeriod() int8 {
	return p.MarginPeriod
}

var AccInfo_HoldPositionProfit_DEFAULT float64

func (p *AccInfo) GetHoldPositionProfit() float64 {
	if !p.IsSetHoldPositionProfit() {
		return AccInfo_HoldPositionProfit_DEFAULT
	}
	return *p.HoldPositionProfit
}

var AccInfo_TodayProfit_DEFAULT float64

func (p *AccInfo) GetTodayProfit() float64 {
	if !p.IsSetTodayProfit() {
		return AccInfo_TodayProfit_DEFAULT
	}
	return *p.TodayProfit
}

var AccInfo_PositonProfitFlag_DEFAULT int32

func (p *AccInfo) GetPositonProfitFlag() int32 {
	if !p.IsSetPositonProfitFlag() {
		return AccInfo_PositonProfitFlag_DEFAULT
	}
	return *p.PositonProfitFlag
}

var AccInfo_TodayProfitFlag_DEFAULT int32

func (p *AccInfo) GetTodayProfitFlag() int32 {
	if !p.IsSetTodayProfitFlag() {
		return AccInfo_TodayProfitFlag_DEFAULT
	}
	return *p.TodayProfitFlag
}
func (p *AccInfo) IsSetHoldPositionProfit() bool {
	return p.HoldPositionProfit != nil
}

func (p *AccInfo) IsSetTodayProfit() bool {
	return p.TodayProfit != nil
}

func (p *AccInfo) IsSetPositonProfitFlag() bool {
	return p.PositonProfitFlag != nil
}

func (p *AccInfo) IsSetTodayProfitFlag() bool {
	return p.TodayProfitFlag != nil
}

func (p *AccInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.ReadField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.ReadField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.ReadField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.ReadField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.ReadField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.ReadField28(iprot); err != nil {
				return err
			}
		case 29:
			if err := p.ReadField29(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.ReadField30(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.ReadField31(iprot); err != nil {
				return err
			}
		case 32:
			if err := p.ReadField32(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AccInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.NAV = v
	}
	return nil
}

func (p *AccInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.BuyingPower = v
	}
	return nil
}

func (p *AccInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.CashBal = v
	}
	return nil
}

func (p *AccInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MarginCall = v
	}
	return nil
}

func (p *AccInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.CommodityPL = v
	}
	return nil
}

func (p *AccInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.LockupAmt = v
	}
	return nil
}

func (p *AccInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.CreditLimit = v
	}
	return nil
}

func (p *AccInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.MaxMargin = v
	}
	return nil
}

func (p *AccInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.MaxLoanLimit = v
	}
	return nil
}

func (p *AccInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.TradingLimit = v
	}
	return nil
}

func (p *AccInfo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.RawMargin = v
	}
	return nil
}

func (p *AccInfo) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.IMargin = v
	}
	return nil
}

func (p *AccInfo) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.MMargin = v
	}
	return nil
}

func (p *AccInfo) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.TodayTrans = v
	}
	return nil
}

func (p *AccInfo) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.LoanLimit = v
	}
	return nil
}

func (p *AccInfo) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 16: %s", err)
	} else {
		p.TotalFee = v
	}
	return nil
}

func (p *AccInfo) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		p.LoanToMR = v
	}
	return nil
}

func (p *AccInfo) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 18: %s", err)
	} else {
		p.LoanToMV = v
	}
	return nil
}

func (p *AccInfo) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 19: %s", err)
	} else {
		p.AccName = v
	}
	return nil
}

func (p *AccInfo) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 20: %s", err)
	} else {
		p.BaseCcy = v
	}
	return nil
}

func (p *AccInfo) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 21: %s", err)
	} else {
		p.MarginClass = v
	}
	return nil
}

func (p *AccInfo) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 22: %s", err)
	} else {
		p.TradeClass = v
	}
	return nil
}

func (p *AccInfo) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 23: %s", err)
	} else {
		p.ClientId = v
	}
	return nil
}

func (p *AccInfo) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 24: %s", err)
	} else {
		p.AEId = v
	}
	return nil
}

func (p *AccInfo) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 25: %s", err)
	} else {
		temp := int8(v)
		p.AccType = temp
	}
	return nil
}

func (p *AccInfo) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 26: %s", err)
	} else {
		temp := int8(v)
		p.CtrlLevel = temp
	}
	return nil
}

func (p *AccInfo) ReadField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 27: %s", err)
	} else {
		temp := int8(v)
		p.Active = temp
	}
	return nil
}

func (p *AccInfo) ReadField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 28: %s", err)
	} else {
		temp := int8(v)
		p.MarginPeriod = temp
	}
	return nil
}

func (p *AccInfo) ReadField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 29: %s", err)
	} else {
		p.HoldPositionProfit = &v
	}
	return nil
}

func (p *AccInfo) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 30: %s", err)
	} else {
		p.TodayProfit = &v
	}
	return nil
}

func (p *AccInfo) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 31: %s", err)
	} else {
		p.PositonProfitFlag = &v
	}
	return nil
}

func (p *AccInfo) ReadField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 32: %s", err)
	} else {
		p.TodayProfitFlag = &v
	}
	return nil
}

func (p *AccInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AccInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := p.writeField29(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := p.writeField32(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AccInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("NAV", thrift.DOUBLE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:NAV: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.NAV)); err != nil {
		return fmt.Errorf("%T.NAV (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:NAV: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BuyingPower", thrift.DOUBLE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:BuyingPower: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.BuyingPower)); err != nil {
		return fmt.Errorf("%T.BuyingPower (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:BuyingPower: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CashBal", thrift.DOUBLE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:CashBal: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.CashBal)); err != nil {
		return fmt.Errorf("%T.CashBal (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:CashBal: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MarginCall", thrift.DOUBLE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:MarginCall: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.MarginCall)); err != nil {
		return fmt.Errorf("%T.MarginCall (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:MarginCall: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CommodityPL", thrift.DOUBLE, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:CommodityPL: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.CommodityPL)); err != nil {
		return fmt.Errorf("%T.CommodityPL (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:CommodityPL: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LockupAmt", thrift.DOUBLE, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:LockupAmt: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.LockupAmt)); err != nil {
		return fmt.Errorf("%T.LockupAmt (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:LockupAmt: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CreditLimit", thrift.DOUBLE, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:CreditLimit: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.CreditLimit)); err != nil {
		return fmt.Errorf("%T.CreditLimit (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:CreditLimit: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MaxMargin", thrift.DOUBLE, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:MaxMargin: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.MaxMargin)); err != nil {
		return fmt.Errorf("%T.MaxMargin (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:MaxMargin: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MaxLoanLimit", thrift.DOUBLE, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:MaxLoanLimit: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.MaxLoanLimit)); err != nil {
		return fmt.Errorf("%T.MaxLoanLimit (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:MaxLoanLimit: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TradingLimit", thrift.DOUBLE, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:TradingLimit: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.TradingLimit)); err != nil {
		return fmt.Errorf("%T.TradingLimit (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:TradingLimit: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RawMargin", thrift.DOUBLE, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:RawMargin: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.RawMargin)); err != nil {
		return fmt.Errorf("%T.RawMargin (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:RawMargin: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IMargin", thrift.DOUBLE, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:IMargin: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.IMargin)); err != nil {
		return fmt.Errorf("%T.IMargin (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:IMargin: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MMargin", thrift.DOUBLE, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:MMargin: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.MMargin)); err != nil {
		return fmt.Errorf("%T.MMargin (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:MMargin: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TodayTrans", thrift.DOUBLE, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:TodayTrans: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.TodayTrans)); err != nil {
		return fmt.Errorf("%T.TodayTrans (14) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:TodayTrans: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LoanLimit", thrift.DOUBLE, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:LoanLimit: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.LoanLimit)); err != nil {
		return fmt.Errorf("%T.LoanLimit (15) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:LoanLimit: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalFee", thrift.DOUBLE, 16); err != nil {
		return fmt.Errorf("%T write field begin error 16:TotalFee: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.TotalFee)); err != nil {
		return fmt.Errorf("%T.TotalFee (16) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 16:TotalFee: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LoanToMR", thrift.DOUBLE, 17); err != nil {
		return fmt.Errorf("%T write field begin error 17:LoanToMR: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.LoanToMR)); err != nil {
		return fmt.Errorf("%T.LoanToMR (17) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 17:LoanToMR: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LoanToMV", thrift.DOUBLE, 18); err != nil {
		return fmt.Errorf("%T write field begin error 18:LoanToMV: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.LoanToMV)); err != nil {
		return fmt.Errorf("%T.LoanToMV (18) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 18:LoanToMV: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccName", thrift.STRING, 19); err != nil {
		return fmt.Errorf("%T write field begin error 19:AccName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccName)); err != nil {
		return fmt.Errorf("%T.AccName (19) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 19:AccName: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseCcy", thrift.STRING, 20); err != nil {
		return fmt.Errorf("%T write field begin error 20:BaseCcy: %s", p, err)
	}
	if err := oprot.WriteString(string(p.BaseCcy)); err != nil {
		return fmt.Errorf("%T.BaseCcy (20) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 20:BaseCcy: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MarginClass", thrift.STRING, 21); err != nil {
		return fmt.Errorf("%T write field begin error 21:MarginClass: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MarginClass)); err != nil {
		return fmt.Errorf("%T.MarginClass (21) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 21:MarginClass: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TradeClass", thrift.STRING, 22); err != nil {
		return fmt.Errorf("%T write field begin error 22:TradeClass: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TradeClass)); err != nil {
		return fmt.Errorf("%T.TradeClass (22) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 22:TradeClass: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ClientId", thrift.STRING, 23); err != nil {
		return fmt.Errorf("%T write field begin error 23:ClientId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ClientId)); err != nil {
		return fmt.Errorf("%T.ClientId (23) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 23:ClientId: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AEId", thrift.STRING, 24); err != nil {
		return fmt.Errorf("%T write field begin error 24:AEId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AEId)); err != nil {
		return fmt.Errorf("%T.AEId (24) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 24:AEId: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccType", thrift.BYTE, 25); err != nil {
		return fmt.Errorf("%T write field begin error 25:AccType: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.AccType)); err != nil {
		return fmt.Errorf("%T.AccType (25) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 25:AccType: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CtrlLevel", thrift.BYTE, 26); err != nil {
		return fmt.Errorf("%T write field begin error 26:CtrlLevel: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.CtrlLevel)); err != nil {
		return fmt.Errorf("%T.CtrlLevel (26) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 26:CtrlLevel: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField27(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Active", thrift.BYTE, 27); err != nil {
		return fmt.Errorf("%T write field begin error 27:Active: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Active)); err != nil {
		return fmt.Errorf("%T.Active (27) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 27:Active: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField28(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MarginPeriod", thrift.BYTE, 28); err != nil {
		return fmt.Errorf("%T write field begin error 28:MarginPeriod: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.MarginPeriod)); err != nil {
		return fmt.Errorf("%T.MarginPeriod (28) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 28:MarginPeriod: %s", p, err)
	}
	return err
}

func (p *AccInfo) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetHoldPositionProfit() {
		if err := oprot.WriteFieldBegin("HoldPositionProfit", thrift.DOUBLE, 29); err != nil {
			return fmt.Errorf("%T write field begin error 29:HoldPositionProfit: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.HoldPositionProfit)); err != nil {
			return fmt.Errorf("%T.HoldPositionProfit (29) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 29:HoldPositionProfit: %s", p, err)
		}
	}
	return err
}

func (p *AccInfo) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetTodayProfit() {
		if err := oprot.WriteFieldBegin("TodayProfit", thrift.DOUBLE, 30); err != nil {
			return fmt.Errorf("%T write field begin error 30:TodayProfit: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.TodayProfit)); err != nil {
			return fmt.Errorf("%T.TodayProfit (30) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 30:TodayProfit: %s", p, err)
		}
	}
	return err
}

func (p *AccInfo) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetPositonProfitFlag() {
		if err := oprot.WriteFieldBegin("PositonProfitFlag", thrift.I32, 31); err != nil {
			return fmt.Errorf("%T write field begin error 31:PositonProfitFlag: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.PositonProfitFlag)); err != nil {
			return fmt.Errorf("%T.PositonProfitFlag (31) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 31:PositonProfitFlag: %s", p, err)
		}
	}
	return err
}

func (p *AccInfo) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetTodayProfitFlag() {
		if err := oprot.WriteFieldBegin("TodayProfitFlag", thrift.I32, 32); err != nil {
			return fmt.Errorf("%T write field begin error 32:TodayProfitFlag: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.TodayProfitFlag)); err != nil {
			return fmt.Errorf("%T.TodayProfitFlag (32) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 32:TodayProfitFlag: %s", p, err)
		}
	}
	return err
}

func (p *AccInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccInfo(%+v)", *p)
}

type AccBal struct {
	CashBf      float64 `thrift:"CashBf,1,required" json:"CashBf"`
	TodayCash   float64 `thrift:"TodayCash,2,required" json:"TodayCash"`
	NotYetValue float64 `thrift:"NotYetValue,3,required" json:"NotYetValue"`
	Unpresented float64 `thrift:"Unpresented,4,required" json:"Unpresented"`
	TodayOut    float64 `thrift:"TodayOut,5,required" json:"TodayOut"`
	Ccy         string  `thrift:"Ccy,6,required" json:"Ccy"`
}

func NewAccBal() *AccBal {
	return &AccBal{}
}

func (p *AccBal) GetCashBf() float64 {
	return p.CashBf
}

func (p *AccBal) GetTodayCash() float64 {
	return p.TodayCash
}

func (p *AccBal) GetNotYetValue() float64 {
	return p.NotYetValue
}

func (p *AccBal) GetUnpresented() float64 {
	return p.Unpresented
}

func (p *AccBal) GetTodayOut() float64 {
	return p.TodayOut
}

func (p *AccBal) GetCcy() string {
	return p.Ccy
}
func (p *AccBal) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AccBal) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.CashBf = v
	}
	return nil
}

func (p *AccBal) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TodayCash = v
	}
	return nil
}

func (p *AccBal) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.NotYetValue = v
	}
	return nil
}

func (p *AccBal) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Unpresented = v
	}
	return nil
}

func (p *AccBal) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.TodayOut = v
	}
	return nil
}

func (p *AccBal) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Ccy = v
	}
	return nil
}

func (p *AccBal) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AccBal"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AccBal) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CashBf", thrift.DOUBLE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:CashBf: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.CashBf)); err != nil {
		return fmt.Errorf("%T.CashBf (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:CashBf: %s", p, err)
	}
	return err
}

func (p *AccBal) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TodayCash", thrift.DOUBLE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:TodayCash: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.TodayCash)); err != nil {
		return fmt.Errorf("%T.TodayCash (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:TodayCash: %s", p, err)
	}
	return err
}

func (p *AccBal) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("NotYetValue", thrift.DOUBLE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:NotYetValue: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.NotYetValue)); err != nil {
		return fmt.Errorf("%T.NotYetValue (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:NotYetValue: %s", p, err)
	}
	return err
}

func (p *AccBal) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Unpresented", thrift.DOUBLE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Unpresented: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Unpresented)); err != nil {
		return fmt.Errorf("%T.Unpresented (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Unpresented: %s", p, err)
	}
	return err
}

func (p *AccBal) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TodayOut", thrift.DOUBLE, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:TodayOut: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.TodayOut)); err != nil {
		return fmt.Errorf("%T.TodayOut (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:TodayOut: %s", p, err)
	}
	return err
}

func (p *AccBal) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ccy", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:Ccy: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ccy)); err != nil {
		return fmt.Errorf("%T.Ccy (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:Ccy: %s", p, err)
	}
	return err
}

func (p *AccBal) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccBal(%+v)", *p)
}

type AddOrderReq struct {
	UserId       int32          `thrift:"user_id,1,required" json:"user_id"`
	AccessInfo   *AccessInfo    `thrift:"access_info,2,required" json:"access_info"`
	AccNo        string         `thrift:"AccNo,3,required" json:"AccNo"`
	ProdCode     string         `thrift:"ProdCode,4,required" json:"ProdCode"`
	ClOrderId    string         `thrift:"ClOrderId,5,required" json:"ClOrderId"`
	Price        float64        `thrift:"Price,6,required" json:"Price"`
	Qty          int32          `thrift:"Qty,7,required" json:"Qty"`
	BuySell      int8           `thrift:"BuySell,8,required" json:"BuySell"`
	OrderOptions int32          `thrift:"OrderOptions,9,required" json:"OrderOptions"`
	CondType     OrderCondType  `thrift:"CondType,10,required" json:"CondType"`
	OrderType    OrderPriceType `thrift:"OrderType,11,required" json:"OrderType"`
	ValidType    VLDType        `thrift:"ValidType,12,required" json:"ValidType"`
	DecInPrice   int8           `thrift:"DecInPrice,13,required" json:"DecInPrice"`
	OrderAction  int8           `thrift:"OrderAction,14,required" json:"OrderAction"`
	StopLevel    *float64       `thrift:"StopLevel,15" json:"StopLevel"`
	UpLevel      *float64       `thrift:"UpLevel,16" json:"UpLevel"`
	UpPrice      *float64       `thrift:"UpPrice,17" json:"UpPrice"`
	DownLevel    *float64       `thrift:"DownLevel,18" json:"DownLevel"`
	DownPrice    *float64       `thrift:"DownPrice,19" json:"DownPrice"`
	ExOrderNo    *int64         `thrift:"ExOrderNo,20" json:"ExOrderNo"`
	ValidTime    *int32         `thrift:"ValidTime,21" json:"ValidTime"`
	SchedTime    *int32         `thrift:"SchedTime,22" json:"SchedTime"`
	StopType     *int8          `thrift:"StopType,23" json:"StopType"`
	OpenClose    int8           `thrift:"OpenClose,24,required" json:"OpenClose"`
}

func NewAddOrderReq() *AddOrderReq {
	return &AddOrderReq{}
}

func (p *AddOrderReq) GetUserId() int32 {
	return p.UserId
}

var AddOrderReq_AccessInfo_DEFAULT *AccessInfo

func (p *AddOrderReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return AddOrderReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}

func (p *AddOrderReq) GetAccNo() string {
	return p.AccNo
}

func (p *AddOrderReq) GetProdCode() string {
	return p.ProdCode
}

func (p *AddOrderReq) GetClOrderId() string {
	return p.ClOrderId
}

func (p *AddOrderReq) GetPrice() float64 {
	return p.Price
}

func (p *AddOrderReq) GetQty() int32 {
	return p.Qty
}

func (p *AddOrderReq) GetBuySell() int8 {
	return p.BuySell
}

func (p *AddOrderReq) GetOrderOptions() int32 {
	return p.OrderOptions
}

func (p *AddOrderReq) GetCondType() OrderCondType {
	return p.CondType
}

func (p *AddOrderReq) GetOrderType() OrderPriceType {
	return p.OrderType
}

func (p *AddOrderReq) GetValidType() VLDType {
	return p.ValidType
}

func (p *AddOrderReq) GetDecInPrice() int8 {
	return p.DecInPrice
}

func (p *AddOrderReq) GetOrderAction() int8 {
	return p.OrderAction
}

var AddOrderReq_StopLevel_DEFAULT float64

func (p *AddOrderReq) GetStopLevel() float64 {
	if !p.IsSetStopLevel() {
		return AddOrderReq_StopLevel_DEFAULT
	}
	return *p.StopLevel
}

var AddOrderReq_UpLevel_DEFAULT float64

func (p *AddOrderReq) GetUpLevel() float64 {
	if !p.IsSetUpLevel() {
		return AddOrderReq_UpLevel_DEFAULT
	}
	return *p.UpLevel
}

var AddOrderReq_UpPrice_DEFAULT float64

func (p *AddOrderReq) GetUpPrice() float64 {
	if !p.IsSetUpPrice() {
		return AddOrderReq_UpPrice_DEFAULT
	}
	return *p.UpPrice
}

var AddOrderReq_DownLevel_DEFAULT float64

func (p *AddOrderReq) GetDownLevel() float64 {
	if !p.IsSetDownLevel() {
		return AddOrderReq_DownLevel_DEFAULT
	}
	return *p.DownLevel
}

var AddOrderReq_DownPrice_DEFAULT float64

func (p *AddOrderReq) GetDownPrice() float64 {
	if !p.IsSetDownPrice() {
		return AddOrderReq_DownPrice_DEFAULT
	}
	return *p.DownPrice
}

var AddOrderReq_ExOrderNo_DEFAULT int64

func (p *AddOrderReq) GetExOrderNo() int64 {
	if !p.IsSetExOrderNo() {
		return AddOrderReq_ExOrderNo_DEFAULT
	}
	return *p.ExOrderNo
}

var AddOrderReq_ValidTime_DEFAULT int32

func (p *AddOrderReq) GetValidTime() int32 {
	if !p.IsSetValidTime() {
		return AddOrderReq_ValidTime_DEFAULT
	}
	return *p.ValidTime
}

var AddOrderReq_SchedTime_DEFAULT int32

func (p *AddOrderReq) GetSchedTime() int32 {
	if !p.IsSetSchedTime() {
		return AddOrderReq_SchedTime_DEFAULT
	}
	return *p.SchedTime
}

var AddOrderReq_StopType_DEFAULT int8

func (p *AddOrderReq) GetStopType() int8 {
	if !p.IsSetStopType() {
		return AddOrderReq_StopType_DEFAULT
	}
	return *p.StopType
}

func (p *AddOrderReq) GetOpenClose() int8 {
	return p.OpenClose
}
func (p *AddOrderReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *AddOrderReq) IsSetStopLevel() bool {
	return p.StopLevel != nil
}

func (p *AddOrderReq) IsSetUpLevel() bool {
	return p.UpLevel != nil
}

func (p *AddOrderReq) IsSetUpPrice() bool {
	return p.UpPrice != nil
}

func (p *AddOrderReq) IsSetDownLevel() bool {
	return p.DownLevel != nil
}

func (p *AddOrderReq) IsSetDownPrice() bool {
	return p.DownPrice != nil
}

func (p *AddOrderReq) IsSetExOrderNo() bool {
	return p.ExOrderNo != nil
}

func (p *AddOrderReq) IsSetValidTime() bool {
	return p.ValidTime != nil
}

func (p *AddOrderReq) IsSetSchedTime() bool {
	return p.SchedTime != nil
}

func (p *AddOrderReq) IsSetStopType() bool {
	return p.StopType != nil
}

func (p *AddOrderReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.ReadField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.ReadField24(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddOrderReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *AddOrderReq) ReadField2(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *AddOrderReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *AddOrderReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ProdCode = v
	}
	return nil
}

func (p *AddOrderReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ClOrderId = v
	}
	return nil
}

func (p *AddOrderReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *AddOrderReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Qty = v
	}
	return nil
}

func (p *AddOrderReq) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		temp := int8(v)
		p.BuySell = temp
	}
	return nil
}

func (p *AddOrderReq) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.OrderOptions = v
	}
	return nil
}

func (p *AddOrderReq) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		temp := OrderCondType(v)
		p.CondType = temp
	}
	return nil
}

func (p *AddOrderReq) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		temp := OrderPriceType(v)
		p.OrderType = temp
	}
	return nil
}

func (p *AddOrderReq) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		temp := VLDType(v)
		p.ValidType = temp
	}
	return nil
}

func (p *AddOrderReq) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		temp := int8(v)
		p.DecInPrice = temp
	}
	return nil
}

func (p *AddOrderReq) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		temp := int8(v)
		p.OrderAction = temp
	}
	return nil
}

func (p *AddOrderReq) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.StopLevel = &v
	}
	return nil
}

func (p *AddOrderReq) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 16: %s", err)
	} else {
		p.UpLevel = &v
	}
	return nil
}

func (p *AddOrderReq) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		p.UpPrice = &v
	}
	return nil
}

func (p *AddOrderReq) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 18: %s", err)
	} else {
		p.DownLevel = &v
	}
	return nil
}

func (p *AddOrderReq) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 19: %s", err)
	} else {
		p.DownPrice = &v
	}
	return nil
}

func (p *AddOrderReq) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 20: %s", err)
	} else {
		p.ExOrderNo = &v
	}
	return nil
}

func (p *AddOrderReq) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 21: %s", err)
	} else {
		p.ValidTime = &v
	}
	return nil
}

func (p *AddOrderReq) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 22: %s", err)
	} else {
		p.SchedTime = &v
	}
	return nil
}

func (p *AddOrderReq) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 23: %s", err)
	} else {
		temp := int8(v)
		p.StopType = &temp
	}
	return nil
}

func (p *AddOrderReq) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 24: %s", err)
	} else {
		temp := int8(v)
		p.OpenClose = temp
	}
	return nil
}

func (p *AddOrderReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddOrderReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddOrderReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_id: %s", p, err)
	}
	return err
}

func (p *AddOrderReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:access_info: %s", p, err)
	}
	if err := p.AccessInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:access_info: %s", p, err)
	}
	return err
}

func (p *AddOrderReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:AccNo: %s", p, err)
	}
	return err
}

func (p *AddOrderReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProdCode", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:ProdCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProdCode)); err != nil {
		return fmt.Errorf("%T.ProdCode (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:ProdCode: %s", p, err)
	}
	return err
}

func (p *AddOrderReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ClOrderId", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:ClOrderId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ClOrderId)); err != nil {
		return fmt.Errorf("%T.ClOrderId (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:ClOrderId: %s", p, err)
	}
	return err
}

func (p *AddOrderReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Price", thrift.DOUBLE, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:Price: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Price)); err != nil {
		return fmt.Errorf("%T.Price (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:Price: %s", p, err)
	}
	return err
}

func (p *AddOrderReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Qty", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:Qty: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Qty)); err != nil {
		return fmt.Errorf("%T.Qty (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:Qty: %s", p, err)
	}
	return err
}

func (p *AddOrderReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BuySell", thrift.BYTE, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:BuySell: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.BuySell)); err != nil {
		return fmt.Errorf("%T.BuySell (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:BuySell: %s", p, err)
	}
	return err
}

func (p *AddOrderReq) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderOptions", thrift.I32, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:OrderOptions: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OrderOptions)); err != nil {
		return fmt.Errorf("%T.OrderOptions (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:OrderOptions: %s", p, err)
	}
	return err
}

func (p *AddOrderReq) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CondType", thrift.I32, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:CondType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CondType)); err != nil {
		return fmt.Errorf("%T.CondType (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:CondType: %s", p, err)
	}
	return err
}

func (p *AddOrderReq) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderType", thrift.I32, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:OrderType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OrderType)); err != nil {
		return fmt.Errorf("%T.OrderType (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:OrderType: %s", p, err)
	}
	return err
}

func (p *AddOrderReq) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ValidType", thrift.I32, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:ValidType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ValidType)); err != nil {
		return fmt.Errorf("%T.ValidType (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:ValidType: %s", p, err)
	}
	return err
}

func (p *AddOrderReq) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DecInPrice", thrift.BYTE, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:DecInPrice: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.DecInPrice)); err != nil {
		return fmt.Errorf("%T.DecInPrice (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:DecInPrice: %s", p, err)
	}
	return err
}

func (p *AddOrderReq) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrderAction", thrift.BYTE, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:OrderAction: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.OrderAction)); err != nil {
		return fmt.Errorf("%T.OrderAction (14) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:OrderAction: %s", p, err)
	}
	return err
}

func (p *AddOrderReq) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetStopLevel() {
		if err := oprot.WriteFieldBegin("StopLevel", thrift.DOUBLE, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:StopLevel: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.StopLevel)); err != nil {
			return fmt.Errorf("%T.StopLevel (15) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:StopLevel: %s", p, err)
		}
	}
	return err
}

func (p *AddOrderReq) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpLevel() {
		if err := oprot.WriteFieldBegin("UpLevel", thrift.DOUBLE, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:UpLevel: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.UpLevel)); err != nil {
			return fmt.Errorf("%T.UpLevel (16) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:UpLevel: %s", p, err)
		}
	}
	return err
}

func (p *AddOrderReq) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpPrice() {
		if err := oprot.WriteFieldBegin("UpPrice", thrift.DOUBLE, 17); err != nil {
			return fmt.Errorf("%T write field begin error 17:UpPrice: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.UpPrice)); err != nil {
			return fmt.Errorf("%T.UpPrice (17) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 17:UpPrice: %s", p, err)
		}
	}
	return err
}

func (p *AddOrderReq) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetDownLevel() {
		if err := oprot.WriteFieldBegin("DownLevel", thrift.DOUBLE, 18); err != nil {
			return fmt.Errorf("%T write field begin error 18:DownLevel: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.DownLevel)); err != nil {
			return fmt.Errorf("%T.DownLevel (18) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 18:DownLevel: %s", p, err)
		}
	}
	return err
}

func (p *AddOrderReq) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetDownPrice() {
		if err := oprot.WriteFieldBegin("DownPrice", thrift.DOUBLE, 19); err != nil {
			return fmt.Errorf("%T write field begin error 19:DownPrice: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.DownPrice)); err != nil {
			return fmt.Errorf("%T.DownPrice (19) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 19:DownPrice: %s", p, err)
		}
	}
	return err
}

func (p *AddOrderReq) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetExOrderNo() {
		if err := oprot.WriteFieldBegin("ExOrderNo", thrift.I64, 20); err != nil {
			return fmt.Errorf("%T write field begin error 20:ExOrderNo: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.ExOrderNo)); err != nil {
			return fmt.Errorf("%T.ExOrderNo (20) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 20:ExOrderNo: %s", p, err)
		}
	}
	return err
}

func (p *AddOrderReq) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetValidTime() {
		if err := oprot.WriteFieldBegin("ValidTime", thrift.I32, 21); err != nil {
			return fmt.Errorf("%T write field begin error 21:ValidTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ValidTime)); err != nil {
			return fmt.Errorf("%T.ValidTime (21) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 21:ValidTime: %s", p, err)
		}
	}
	return err
}

func (p *AddOrderReq) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchedTime() {
		if err := oprot.WriteFieldBegin("SchedTime", thrift.I32, 22); err != nil {
			return fmt.Errorf("%T write field begin error 22:SchedTime: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.SchedTime)); err != nil {
			return fmt.Errorf("%T.SchedTime (22) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 22:SchedTime: %s", p, err)
		}
	}
	return err
}

func (p *AddOrderReq) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetStopType() {
		if err := oprot.WriteFieldBegin("StopType", thrift.BYTE, 23); err != nil {
			return fmt.Errorf("%T write field begin error 23:StopType: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.StopType)); err != nil {
			return fmt.Errorf("%T.StopType (23) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 23:StopType: %s", p, err)
		}
	}
	return err
}

func (p *AddOrderReq) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OpenClose", thrift.BYTE, 24); err != nil {
		return fmt.Errorf("%T write field begin error 24:OpenClose: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.OpenClose)); err != nil {
		return fmt.Errorf("%T.OpenClose (24) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 24:OpenClose: %s", p, err)
	}
	return err
}

func (p *AddOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddOrderReq(%+v)", *p)
}

type AddOrderResp struct {
	Err *ErrInfo `thrift:"err,1,required" json:"err"`
}

func NewAddOrderResp() *AddOrderResp {
	return &AddOrderResp{}
}

var AddOrderResp_Err_DEFAULT *ErrInfo

func (p *AddOrderResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return AddOrderResp_Err_DEFAULT
	}
	return p.Err
}
func (p *AddOrderResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *AddOrderResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddOrderResp) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *AddOrderResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddOrderResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddOrderResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err: %s", p, err)
	}
	return err
}

func (p *AddOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddOrderResp(%+v)", *p)
}

type DeleteOrderReq struct {
	UserId     int32       `thrift:"user_id,1,required" json:"user_id"`
	AccNo      string      `thrift:"AccNo,2,required" json:"AccNo"`
	AccessInfo *AccessInfo `thrift:"access_info,3,required" json:"access_info"`
	DeleteMode int8        `thrift:"DeleteMode,4,required" json:"DeleteMode"`
	IntOrderNo *int32      `thrift:"IntOrderNo,5" json:"IntOrderNo"`
	ProdCode   *string     `thrift:"ProdCode,6" json:"ProdCode"`
	ClOrderId  *string     `thrift:"ClOrderId,7" json:"ClOrderId"`
}

func NewDeleteOrderReq() *DeleteOrderReq {
	return &DeleteOrderReq{}
}

func (p *DeleteOrderReq) GetUserId() int32 {
	return p.UserId
}

func (p *DeleteOrderReq) GetAccNo() string {
	return p.AccNo
}

var DeleteOrderReq_AccessInfo_DEFAULT *AccessInfo

func (p *DeleteOrderReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return DeleteOrderReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}

func (p *DeleteOrderReq) GetDeleteMode() int8 {
	return p.DeleteMode
}

var DeleteOrderReq_IntOrderNo_DEFAULT int32

func (p *DeleteOrderReq) GetIntOrderNo() int32 {
	if !p.IsSetIntOrderNo() {
		return DeleteOrderReq_IntOrderNo_DEFAULT
	}
	return *p.IntOrderNo
}

var DeleteOrderReq_ProdCode_DEFAULT string

func (p *DeleteOrderReq) GetProdCode() string {
	if !p.IsSetProdCode() {
		return DeleteOrderReq_ProdCode_DEFAULT
	}
	return *p.ProdCode
}

var DeleteOrderReq_ClOrderId_DEFAULT string

func (p *DeleteOrderReq) GetClOrderId() string {
	if !p.IsSetClOrderId() {
		return DeleteOrderReq_ClOrderId_DEFAULT
	}
	return *p.ClOrderId
}
func (p *DeleteOrderReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *DeleteOrderReq) IsSetIntOrderNo() bool {
	return p.IntOrderNo != nil
}

func (p *DeleteOrderReq) IsSetProdCode() bool {
	return p.ProdCode != nil
}

func (p *DeleteOrderReq) IsSetClOrderId() bool {
	return p.ClOrderId != nil
}

func (p *DeleteOrderReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteOrderReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *DeleteOrderReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *DeleteOrderReq) ReadField3(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *DeleteOrderReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := int8(v)
		p.DeleteMode = temp
	}
	return nil
}

func (p *DeleteOrderReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.IntOrderNo = &v
	}
	return nil
}

func (p *DeleteOrderReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.ProdCode = &v
	}
	return nil
}

func (p *DeleteOrderReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.ClOrderId = &v
	}
	return nil
}

func (p *DeleteOrderReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteOrderReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteOrderReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_id: %s", p, err)
	}
	return err
}

func (p *DeleteOrderReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:AccNo: %s", p, err)
	}
	return err
}

func (p *DeleteOrderReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:access_info: %s", p, err)
	}
	if err := p.AccessInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:access_info: %s", p, err)
	}
	return err
}

func (p *DeleteOrderReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DeleteMode", thrift.BYTE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:DeleteMode: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.DeleteMode)); err != nil {
		return fmt.Errorf("%T.DeleteMode (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:DeleteMode: %s", p, err)
	}
	return err
}

func (p *DeleteOrderReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntOrderNo() {
		if err := oprot.WriteFieldBegin("IntOrderNo", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:IntOrderNo: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.IntOrderNo)); err != nil {
			return fmt.Errorf("%T.IntOrderNo (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:IntOrderNo: %s", p, err)
		}
	}
	return err
}

func (p *DeleteOrderReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetProdCode() {
		if err := oprot.WriteFieldBegin("ProdCode", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:ProdCode: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ProdCode)); err != nil {
			return fmt.Errorf("%T.ProdCode (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:ProdCode: %s", p, err)
		}
	}
	return err
}

func (p *DeleteOrderReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetClOrderId() {
		if err := oprot.WriteFieldBegin("ClOrderId", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:ClOrderId: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ClOrderId)); err != nil {
			return fmt.Errorf("%T.ClOrderId (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:ClOrderId: %s", p, err)
		}
	}
	return err
}

func (p *DeleteOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteOrderReq(%+v)", *p)
}

type DeleteOrderResp struct {
	Err *ErrInfo `thrift:"err,1,required" json:"err"`
}

func NewDeleteOrderResp() *DeleteOrderResp {
	return &DeleteOrderResp{}
}

var DeleteOrderResp_Err_DEFAULT *ErrInfo

func (p *DeleteOrderResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return DeleteOrderResp_Err_DEFAULT
	}
	return p.Err
}
func (p *DeleteOrderResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *DeleteOrderResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteOrderResp) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *DeleteOrderResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteOrderResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteOrderResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err: %s", p, err)
	}
	return err
}

func (p *DeleteOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteOrderResp(%+v)", *p)
}

type GetOrderByNoReq struct {
	UserId     int32       `thrift:"user_id,1,required" json:"user_id"`
	AccNo      string      `thrift:"AccNo,2,required" json:"AccNo"`
	AccessInfo *AccessInfo `thrift:"access_info,3,required" json:"access_info"`
	IntOrderNo int32       `thrift:"IntOrderNo,4,required" json:"IntOrderNo"`
}

func NewGetOrderByNoReq() *GetOrderByNoReq {
	return &GetOrderByNoReq{}
}

func (p *GetOrderByNoReq) GetUserId() int32 {
	return p.UserId
}

func (p *GetOrderByNoReq) GetAccNo() string {
	return p.AccNo
}

var GetOrderByNoReq_AccessInfo_DEFAULT *AccessInfo

func (p *GetOrderByNoReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return GetOrderByNoReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}

func (p *GetOrderByNoReq) GetIntOrderNo() int32 {
	return p.IntOrderNo
}
func (p *GetOrderByNoReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *GetOrderByNoReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetOrderByNoReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetOrderByNoReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *GetOrderByNoReq) ReadField3(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *GetOrderByNoReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.IntOrderNo = v
	}
	return nil
}

func (p *GetOrderByNoReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetOrderByNoReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetOrderByNoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_id: %s", p, err)
	}
	return err
}

func (p *GetOrderByNoReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:AccNo: %s", p, err)
	}
	return err
}

func (p *GetOrderByNoReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:access_info: %s", p, err)
	}
	if err := p.AccessInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:access_info: %s", p, err)
	}
	return err
}

func (p *GetOrderByNoReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IntOrderNo", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:IntOrderNo: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.IntOrderNo)); err != nil {
		return fmt.Errorf("%T.IntOrderNo (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:IntOrderNo: %s", p, err)
	}
	return err
}

func (p *GetOrderByNoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOrderByNoReq(%+v)", *p)
}

type GetOrderByNoResp struct {
	Err       *ErrInfo `thrift:"err,1,required" json:"err"`
	OrderInfo *Order   `thrift:"orderInfo,2" json:"orderInfo"`
}

func NewGetOrderByNoResp() *GetOrderByNoResp {
	return &GetOrderByNoResp{}
}

var GetOrderByNoResp_Err_DEFAULT *ErrInfo

func (p *GetOrderByNoResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return GetOrderByNoResp_Err_DEFAULT
	}
	return p.Err
}

var GetOrderByNoResp_OrderInfo_DEFAULT *Order

func (p *GetOrderByNoResp) GetOrderInfo() *Order {
	if !p.IsSetOrderInfo() {
		return GetOrderByNoResp_OrderInfo_DEFAULT
	}
	return p.OrderInfo
}
func (p *GetOrderByNoResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *GetOrderByNoResp) IsSetOrderInfo() bool {
	return p.OrderInfo != nil
}

func (p *GetOrderByNoResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetOrderByNoResp) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *GetOrderByNoResp) ReadField2(iprot thrift.TProtocol) error {
	p.OrderInfo = &Order{}
	if err := p.OrderInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.OrderInfo, err)
	}
	return nil
}

func (p *GetOrderByNoResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetOrderByNoResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetOrderByNoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err: %s", p, err)
	}
	return err
}

func (p *GetOrderByNoResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderInfo() {
		if err := oprot.WriteFieldBegin("orderInfo", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:orderInfo: %s", p, err)
		}
		if err := p.OrderInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.OrderInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:orderInfo: %s", p, err)
		}
	}
	return err
}

func (p *GetOrderByNoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOrderByNoResp(%+v)", *p)
}

type GetHisOrderReq struct {
	UserId     int32       `thrift:"user_id,1,required" json:"user_id"`
	AccNo      string      `thrift:"AccNo,2,required" json:"AccNo"`
	AccessInfo *AccessInfo `thrift:"access_info,3,required" json:"access_info"`
	StartIndex int32       `thrift:"start_index,4" json:"start_index"`
	BatchNum   int32       `thrift:"batch_num,5" json:"batch_num"`
}

func NewGetHisOrderReq() *GetHisOrderReq {
	return &GetHisOrderReq{}
}

func (p *GetHisOrderReq) GetUserId() int32 {
	return p.UserId
}

func (p *GetHisOrderReq) GetAccNo() string {
	return p.AccNo
}

var GetHisOrderReq_AccessInfo_DEFAULT *AccessInfo

func (p *GetHisOrderReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return GetHisOrderReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}

var GetHisOrderReq_StartIndex_DEFAULT int32 = 0

func (p *GetHisOrderReq) GetStartIndex() int32 {
	return p.StartIndex
}

var GetHisOrderReq_BatchNum_DEFAULT int32 = 0

func (p *GetHisOrderReq) GetBatchNum() int32 {
	return p.BatchNum
}
func (p *GetHisOrderReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *GetHisOrderReq) IsSetStartIndex() bool {
	return p.StartIndex != GetHisOrderReq_StartIndex_DEFAULT
}

func (p *GetHisOrderReq) IsSetBatchNum() bool {
	return p.BatchNum != GetHisOrderReq_BatchNum_DEFAULT
}

func (p *GetHisOrderReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetHisOrderReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetHisOrderReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *GetHisOrderReq) ReadField3(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *GetHisOrderReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *GetHisOrderReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.BatchNum = v
	}
	return nil
}

func (p *GetHisOrderReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetHisOrderReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetHisOrderReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_id: %s", p, err)
	}
	return err
}

func (p *GetHisOrderReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:AccNo: %s", p, err)
	}
	return err
}

func (p *GetHisOrderReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:access_info: %s", p, err)
	}
	if err := p.AccessInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:access_info: %s", p, err)
	}
	return err
}

func (p *GetHisOrderReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err := oprot.WriteFieldBegin("start_index", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:start_index: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
			return fmt.Errorf("%T.start_index (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:start_index: %s", p, err)
		}
	}
	return err
}

func (p *GetHisOrderReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchNum() {
		if err := oprot.WriteFieldBegin("batch_num", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:batch_num: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.BatchNum)); err != nil {
			return fmt.Errorf("%T.batch_num (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:batch_num: %s", p, err)
		}
	}
	return err
}

func (p *GetHisOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetHisOrderReq(%+v)", *p)
}

type GetHisOrderResp struct {
	Err     *ErrInfo `thrift:"err,1,required" json:"err"`
	Orders  []*Order `thrift:"orders,2" json:"orders"`
	HasMore bool     `thrift:"has_more,3,required" json:"has_more"`
}

func NewGetHisOrderResp() *GetHisOrderResp {
	return &GetHisOrderResp{}
}

var GetHisOrderResp_Err_DEFAULT *ErrInfo

func (p *GetHisOrderResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return GetHisOrderResp_Err_DEFAULT
	}
	return p.Err
}

var GetHisOrderResp_Orders_DEFAULT []*Order

func (p *GetHisOrderResp) GetOrders() []*Order {
	return p.Orders
}

func (p *GetHisOrderResp) GetHasMore() bool {
	return p.HasMore
}
func (p *GetHisOrderResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *GetHisOrderResp) IsSetOrders() bool {
	return p.Orders != nil
}

func (p *GetHisOrderResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetHisOrderResp) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *GetHisOrderResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Order, 0, size)
	p.Orders = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &Order{}
		if err := _elem9.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem9, err)
		}
		p.Orders = append(p.Orders, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetHisOrderResp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.HasMore = v
	}
	return nil
}

func (p *GetHisOrderResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetHisOrderResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetHisOrderResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err: %s", p, err)
	}
	return err
}

func (p *GetHisOrderResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrders() {
		if err := oprot.WriteFieldBegin("orders", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:orders: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Orders)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Orders {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:orders: %s", p, err)
		}
	}
	return err
}

func (p *GetHisOrderResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("has_more", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:has_more: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.HasMore)); err != nil {
		return fmt.Errorf("%T.has_more (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:has_more: %s", p, err)
	}
	return err
}

func (p *GetHisOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetHisOrderResp(%+v)", *p)
}

type ChangeOrderReq struct {
	UserId     int32       `thrift:"user_id,1,required" json:"user_id"`
	AccNo      string      `thrift:"AccNo,2,required" json:"AccNo"`
	AccessInfo *AccessInfo `thrift:"access_info,3,required" json:"access_info"`
	IntOrderNo int32       `thrift:"IntOrderNo,4,required" json:"IntOrderNo"`
	OrgPrice   float64     `thrift:"OrgPrice,5,required" json:"OrgPrice"`
	OrgQty     int32       `thrift:"OrgQty,6,required" json:"OrgQty"`
	NewPrice_  float64     `thrift:"NewPrice,7,required" json:"NewPrice"`
	NewQty_    int32       `thrift:"NewQty,8,required" json:"NewQty"`
}

func NewChangeOrderReq() *ChangeOrderReq {
	return &ChangeOrderReq{}
}

func (p *ChangeOrderReq) GetUserId() int32 {
	return p.UserId
}

func (p *ChangeOrderReq) GetAccNo() string {
	return p.AccNo
}

var ChangeOrderReq_AccessInfo_DEFAULT *AccessInfo

func (p *ChangeOrderReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return ChangeOrderReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}

func (p *ChangeOrderReq) GetIntOrderNo() int32 {
	return p.IntOrderNo
}

func (p *ChangeOrderReq) GetOrgPrice() float64 {
	return p.OrgPrice
}

func (p *ChangeOrderReq) GetOrgQty() int32 {
	return p.OrgQty
}

func (p *ChangeOrderReq) GetNewPrice_() float64 {
	return p.NewPrice_
}

func (p *ChangeOrderReq) GetNewQty_() int32 {
	return p.NewQty_
}
func (p *ChangeOrderReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *ChangeOrderReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeOrderReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *ChangeOrderReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *ChangeOrderReq) ReadField3(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *ChangeOrderReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.IntOrderNo = v
	}
	return nil
}

func (p *ChangeOrderReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.OrgPrice = v
	}
	return nil
}

func (p *ChangeOrderReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.OrgQty = v
	}
	return nil
}

func (p *ChangeOrderReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.NewPrice_ = v
	}
	return nil
}

func (p *ChangeOrderReq) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.NewQty_ = v
	}
	return nil
}

func (p *ChangeOrderReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChangeOrderReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeOrderReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_id: %s", p, err)
	}
	return err
}

func (p *ChangeOrderReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:AccNo: %s", p, err)
	}
	return err
}

func (p *ChangeOrderReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:access_info: %s", p, err)
	}
	if err := p.AccessInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:access_info: %s", p, err)
	}
	return err
}

func (p *ChangeOrderReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IntOrderNo", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:IntOrderNo: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.IntOrderNo)); err != nil {
		return fmt.Errorf("%T.IntOrderNo (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:IntOrderNo: %s", p, err)
	}
	return err
}

func (p *ChangeOrderReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrgPrice", thrift.DOUBLE, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:OrgPrice: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.OrgPrice)); err != nil {
		return fmt.Errorf("%T.OrgPrice (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:OrgPrice: %s", p, err)
	}
	return err
}

func (p *ChangeOrderReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrgQty", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:OrgQty: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OrgQty)); err != nil {
		return fmt.Errorf("%T.OrgQty (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:OrgQty: %s", p, err)
	}
	return err
}

func (p *ChangeOrderReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("NewPrice", thrift.DOUBLE, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:NewPrice: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.NewPrice_)); err != nil {
		return fmt.Errorf("%T.NewPrice (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:NewPrice: %s", p, err)
	}
	return err
}

func (p *ChangeOrderReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("NewQty", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:NewQty: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NewQty_)); err != nil {
		return fmt.Errorf("%T.NewQty (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:NewQty: %s", p, err)
	}
	return err
}

func (p *ChangeOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeOrderReq(%+v)", *p)
}

type ChangeOrderResp struct {
	Err *ErrInfo `thrift:"err,1,required" json:"err"`
}

func NewChangeOrderResp() *ChangeOrderResp {
	return &ChangeOrderResp{}
}

var ChangeOrderResp_Err_DEFAULT *ErrInfo

func (p *ChangeOrderResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return ChangeOrderResp_Err_DEFAULT
	}
	return p.Err
}
func (p *ChangeOrderResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *ChangeOrderResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeOrderResp) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *ChangeOrderResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChangeOrderResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeOrderResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err: %s", p, err)
	}
	return err
}

func (p *ChangeOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeOrderResp(%+v)", *p)
}

type SetOrderInactiveReq struct {
	UserId      int32       `thrift:"user_id,1,required" json:"user_id"`
	AccNo       string      `thrift:"AccNo,2,required" json:"AccNo"`
	AccessInfo  *AccessInfo `thrift:"access_info,3,required" json:"access_info"`
	ActivateMod int8        `thrift:"ActivateMod,4,required" json:"ActivateMod"`
	IntOrderNo  *int32      `thrift:"IntOrderNo,5" json:"IntOrderNo"`
}

func NewSetOrderInactiveReq() *SetOrderInactiveReq {
	return &SetOrderInactiveReq{}
}

func (p *SetOrderInactiveReq) GetUserId() int32 {
	return p.UserId
}

func (p *SetOrderInactiveReq) GetAccNo() string {
	return p.AccNo
}

var SetOrderInactiveReq_AccessInfo_DEFAULT *AccessInfo

func (p *SetOrderInactiveReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return SetOrderInactiveReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}

func (p *SetOrderInactiveReq) GetActivateMod() int8 {
	return p.ActivateMod
}

var SetOrderInactiveReq_IntOrderNo_DEFAULT int32

func (p *SetOrderInactiveReq) GetIntOrderNo() int32 {
	if !p.IsSetIntOrderNo() {
		return SetOrderInactiveReq_IntOrderNo_DEFAULT
	}
	return *p.IntOrderNo
}
func (p *SetOrderInactiveReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *SetOrderInactiveReq) IsSetIntOrderNo() bool {
	return p.IntOrderNo != nil
}

func (p *SetOrderInactiveReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetOrderInactiveReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *SetOrderInactiveReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *SetOrderInactiveReq) ReadField3(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *SetOrderInactiveReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := int8(v)
		p.ActivateMod = temp
	}
	return nil
}

func (p *SetOrderInactiveReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.IntOrderNo = &v
	}
	return nil
}

func (p *SetOrderInactiveReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetOrderInactiveReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetOrderInactiveReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_id: %s", p, err)
	}
	return err
}

func (p *SetOrderInactiveReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:AccNo: %s", p, err)
	}
	return err
}

func (p *SetOrderInactiveReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:access_info: %s", p, err)
	}
	if err := p.AccessInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:access_info: %s", p, err)
	}
	return err
}

func (p *SetOrderInactiveReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ActivateMod", thrift.BYTE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:ActivateMod: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.ActivateMod)); err != nil {
		return fmt.Errorf("%T.ActivateMod (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:ActivateMod: %s", p, err)
	}
	return err
}

func (p *SetOrderInactiveReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntOrderNo() {
		if err := oprot.WriteFieldBegin("IntOrderNo", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:IntOrderNo: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.IntOrderNo)); err != nil {
			return fmt.Errorf("%T.IntOrderNo (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:IntOrderNo: %s", p, err)
		}
	}
	return err
}

func (p *SetOrderInactiveReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetOrderInactiveReq(%+v)", *p)
}

type SetOrderInactiveResp struct {
	Err *ErrInfo `thrift:"err,1,required" json:"err"`
}

func NewSetOrderInactiveResp() *SetOrderInactiveResp {
	return &SetOrderInactiveResp{}
}

var SetOrderInactiveResp_Err_DEFAULT *ErrInfo

func (p *SetOrderInactiveResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return SetOrderInactiveResp_Err_DEFAULT
	}
	return p.Err
}
func (p *SetOrderInactiveResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *SetOrderInactiveResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetOrderInactiveResp) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *SetOrderInactiveResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetOrderInactiveResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetOrderInactiveResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err: %s", p, err)
	}
	return err
}

func (p *SetOrderInactiveResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetOrderInactiveResp(%+v)", *p)
}

type GetActiveOrderReq struct {
	UserId     int32       `thrift:"user_id,1,required" json:"user_id"`
	AccNo      string      `thrift:"AccNo,2,required" json:"AccNo"`
	AccessInfo *AccessInfo `thrift:"access_info,3,required" json:"access_info"`
	StartIndex int32       `thrift:"start_index,4" json:"start_index"`
	BatchNum   int32       `thrift:"batch_num,5" json:"batch_num"`
}

func NewGetActiveOrderReq() *GetActiveOrderReq {
	return &GetActiveOrderReq{}
}

func (p *GetActiveOrderReq) GetUserId() int32 {
	return p.UserId
}

func (p *GetActiveOrderReq) GetAccNo() string {
	return p.AccNo
}

var GetActiveOrderReq_AccessInfo_DEFAULT *AccessInfo

func (p *GetActiveOrderReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return GetActiveOrderReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}

var GetActiveOrderReq_StartIndex_DEFAULT int32 = 0

func (p *GetActiveOrderReq) GetStartIndex() int32 {
	return p.StartIndex
}

var GetActiveOrderReq_BatchNum_DEFAULT int32 = 0

func (p *GetActiveOrderReq) GetBatchNum() int32 {
	return p.BatchNum
}
func (p *GetActiveOrderReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *GetActiveOrderReq) IsSetStartIndex() bool {
	return p.StartIndex != GetActiveOrderReq_StartIndex_DEFAULT
}

func (p *GetActiveOrderReq) IsSetBatchNum() bool {
	return p.BatchNum != GetActiveOrderReq_BatchNum_DEFAULT
}

func (p *GetActiveOrderReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetActiveOrderReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetActiveOrderReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *GetActiveOrderReq) ReadField3(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *GetActiveOrderReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *GetActiveOrderReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.BatchNum = v
	}
	return nil
}

func (p *GetActiveOrderReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetActiveOrderReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetActiveOrderReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_id: %s", p, err)
	}
	return err
}

func (p *GetActiveOrderReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:AccNo: %s", p, err)
	}
	return err
}

func (p *GetActiveOrderReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:access_info: %s", p, err)
	}
	if err := p.AccessInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:access_info: %s", p, err)
	}
	return err
}

func (p *GetActiveOrderReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err := oprot.WriteFieldBegin("start_index", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:start_index: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
			return fmt.Errorf("%T.start_index (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:start_index: %s", p, err)
		}
	}
	return err
}

func (p *GetActiveOrderReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchNum() {
		if err := oprot.WriteFieldBegin("batch_num", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:batch_num: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.BatchNum)); err != nil {
			return fmt.Errorf("%T.batch_num (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:batch_num: %s", p, err)
		}
	}
	return err
}

func (p *GetActiveOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetActiveOrderReq(%+v)", *p)
}

type GetActiveOrderResp struct {
	Err          *ErrInfo `thrift:"err,1,required" json:"err"`
	ActiveOrders []*Order `thrift:"ActiveOrders,2" json:"ActiveOrders"`
	HasMore      bool     `thrift:"has_more,3,required" json:"has_more"`
}

func NewGetActiveOrderResp() *GetActiveOrderResp {
	return &GetActiveOrderResp{}
}

var GetActiveOrderResp_Err_DEFAULT *ErrInfo

func (p *GetActiveOrderResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return GetActiveOrderResp_Err_DEFAULT
	}
	return p.Err
}

var GetActiveOrderResp_ActiveOrders_DEFAULT []*Order

func (p *GetActiveOrderResp) GetActiveOrders() []*Order {
	return p.ActiveOrders
}

func (p *GetActiveOrderResp) GetHasMore() bool {
	return p.HasMore
}
func (p *GetActiveOrderResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *GetActiveOrderResp) IsSetActiveOrders() bool {
	return p.ActiveOrders != nil
}

func (p *GetActiveOrderResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetActiveOrderResp) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *GetActiveOrderResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Order, 0, size)
	p.ActiveOrders = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &Order{}
		if err := _elem10.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem10, err)
		}
		p.ActiveOrders = append(p.ActiveOrders, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetActiveOrderResp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.HasMore = v
	}
	return nil
}

func (p *GetActiveOrderResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetActiveOrderResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetActiveOrderResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err: %s", p, err)
	}
	return err
}

func (p *GetActiveOrderResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveOrders() {
		if err := oprot.WriteFieldBegin("ActiveOrders", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:ActiveOrders: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ActiveOrders)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.ActiveOrders {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:ActiveOrders: %s", p, err)
		}
	}
	return err
}

func (p *GetActiveOrderResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("has_more", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:has_more: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.HasMore)); err != nil {
		return fmt.Errorf("%T.has_more (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:has_more: %s", p, err)
	}
	return err
}

func (p *GetActiveOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetActiveOrderResp(%+v)", *p)
}

type GetPositionReq struct {
	UserId     int32       `thrift:"user_id,1,required" json:"user_id"`
	AccNo      string      `thrift:"AccNo,2,required" json:"AccNo"`
	AccessInfo *AccessInfo `thrift:"access_info,3,required" json:"access_info"`
	TypeA1     int8        `thrift:"Type,4,required" json:"Type"`
	ProdCode   *string     `thrift:"ProdCode,5" json:"ProdCode"`
	StartIndex int32       `thrift:"start_index,6" json:"start_index"`
	BatchNum   int32       `thrift:"batch_num,7" json:"batch_num"`
}

func NewGetPositionReq() *GetPositionReq {
	return &GetPositionReq{}
}

func (p *GetPositionReq) GetUserId() int32 {
	return p.UserId
}

func (p *GetPositionReq) GetAccNo() string {
	return p.AccNo
}

var GetPositionReq_AccessInfo_DEFAULT *AccessInfo

func (p *GetPositionReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return GetPositionReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}

func (p *GetPositionReq) GetTypeA1() int8 {
	return p.TypeA1
}

var GetPositionReq_ProdCode_DEFAULT string

func (p *GetPositionReq) GetProdCode() string {
	if !p.IsSetProdCode() {
		return GetPositionReq_ProdCode_DEFAULT
	}
	return *p.ProdCode
}

var GetPositionReq_StartIndex_DEFAULT int32 = 0

func (p *GetPositionReq) GetStartIndex() int32 {
	return p.StartIndex
}

var GetPositionReq_BatchNum_DEFAULT int32 = 0

func (p *GetPositionReq) GetBatchNum() int32 {
	return p.BatchNum
}
func (p *GetPositionReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *GetPositionReq) IsSetProdCode() bool {
	return p.ProdCode != nil
}

func (p *GetPositionReq) IsSetStartIndex() bool {
	return p.StartIndex != GetPositionReq_StartIndex_DEFAULT
}

func (p *GetPositionReq) IsSetBatchNum() bool {
	return p.BatchNum != GetPositionReq_BatchNum_DEFAULT
}

func (p *GetPositionReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPositionReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetPositionReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *GetPositionReq) ReadField3(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *GetPositionReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := int8(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *GetPositionReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ProdCode = &v
	}
	return nil
}

func (p *GetPositionReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *GetPositionReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.BatchNum = v
	}
	return nil
}

func (p *GetPositionReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPositionReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPositionReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_id: %s", p, err)
	}
	return err
}

func (p *GetPositionReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:AccNo: %s", p, err)
	}
	return err
}

func (p *GetPositionReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:access_info: %s", p, err)
	}
	if err := p.AccessInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:access_info: %s", p, err)
	}
	return err
}

func (p *GetPositionReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Type", thrift.BYTE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Type: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.Type (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Type: %s", p, err)
	}
	return err
}

func (p *GetPositionReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetProdCode() {
		if err := oprot.WriteFieldBegin("ProdCode", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:ProdCode: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ProdCode)); err != nil {
			return fmt.Errorf("%T.ProdCode (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:ProdCode: %s", p, err)
		}
	}
	return err
}

func (p *GetPositionReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err := oprot.WriteFieldBegin("start_index", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:start_index: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
			return fmt.Errorf("%T.start_index (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:start_index: %s", p, err)
		}
	}
	return err
}

func (p *GetPositionReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchNum() {
		if err := oprot.WriteFieldBegin("batch_num", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:batch_num: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.BatchNum)); err != nil {
			return fmt.Errorf("%T.batch_num (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:batch_num: %s", p, err)
		}
	}
	return err
}

func (p *GetPositionReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPositionReq(%+v)", *p)
}

type GetPositionResp struct {
	Err          *ErrInfo    `thrift:"err,1,required" json:"err"`
	PositionList []*Position `thrift:"PositionList,2" json:"PositionList"`
	HasMore      bool        `thrift:"has_more,3,required" json:"has_more"`
}

func NewGetPositionResp() *GetPositionResp {
	return &GetPositionResp{}
}

var GetPositionResp_Err_DEFAULT *ErrInfo

func (p *GetPositionResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return GetPositionResp_Err_DEFAULT
	}
	return p.Err
}

var GetPositionResp_PositionList_DEFAULT []*Position

func (p *GetPositionResp) GetPositionList() []*Position {
	return p.PositionList
}

func (p *GetPositionResp) GetHasMore() bool {
	return p.HasMore
}
func (p *GetPositionResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *GetPositionResp) IsSetPositionList() bool {
	return p.PositionList != nil
}

func (p *GetPositionResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPositionResp) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *GetPositionResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Position, 0, size)
	p.PositionList = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &Position{}
		if err := _elem11.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem11, err)
		}
		p.PositionList = append(p.PositionList, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPositionResp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.HasMore = v
	}
	return nil
}

func (p *GetPositionResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPositionResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPositionResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err: %s", p, err)
	}
	return err
}

func (p *GetPositionResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPositionList() {
		if err := oprot.WriteFieldBegin("PositionList", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:PositionList: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PositionList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.PositionList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:PositionList: %s", p, err)
		}
	}
	return err
}

func (p *GetPositionResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("has_more", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:has_more: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.HasMore)); err != nil {
		return fmt.Errorf("%T.has_more (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:has_more: %s", p, err)
	}
	return err
}

func (p *GetPositionResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPositionResp(%+v)", *p)
}

type GetTradeReq struct {
	UserId     int32       `thrift:"user_id,1,required" json:"user_id"`
	AccNo      string      `thrift:"AccNo,2,required" json:"AccNo"`
	AccessInfo *AccessInfo `thrift:"access_info,3,required" json:"access_info"`
	StartIndex int32       `thrift:"start_index,4" json:"start_index"`
	BatchNum   int32       `thrift:"batch_num,5" json:"batch_num"`
}

func NewGetTradeReq() *GetTradeReq {
	return &GetTradeReq{}
}

func (p *GetTradeReq) GetUserId() int32 {
	return p.UserId
}

func (p *GetTradeReq) GetAccNo() string {
	return p.AccNo
}

var GetTradeReq_AccessInfo_DEFAULT *AccessInfo

func (p *GetTradeReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return GetTradeReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}

var GetTradeReq_StartIndex_DEFAULT int32 = 0

func (p *GetTradeReq) GetStartIndex() int32 {
	return p.StartIndex
}

var GetTradeReq_BatchNum_DEFAULT int32 = 0

func (p *GetTradeReq) GetBatchNum() int32 {
	return p.BatchNum
}
func (p *GetTradeReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *GetTradeReq) IsSetStartIndex() bool {
	return p.StartIndex != GetTradeReq_StartIndex_DEFAULT
}

func (p *GetTradeReq) IsSetBatchNum() bool {
	return p.BatchNum != GetTradeReq_BatchNum_DEFAULT
}

func (p *GetTradeReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTradeReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetTradeReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *GetTradeReq) ReadField3(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *GetTradeReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *GetTradeReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.BatchNum = v
	}
	return nil
}

func (p *GetTradeReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTradeReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTradeReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_id: %s", p, err)
	}
	return err
}

func (p *GetTradeReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:AccNo: %s", p, err)
	}
	return err
}

func (p *GetTradeReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:access_info: %s", p, err)
	}
	if err := p.AccessInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:access_info: %s", p, err)
	}
	return err
}

func (p *GetTradeReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err := oprot.WriteFieldBegin("start_index", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:start_index: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
			return fmt.Errorf("%T.start_index (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:start_index: %s", p, err)
		}
	}
	return err
}

func (p *GetTradeReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchNum() {
		if err := oprot.WriteFieldBegin("batch_num", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:batch_num: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.BatchNum)); err != nil {
			return fmt.Errorf("%T.batch_num (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:batch_num: %s", p, err)
		}
	}
	return err
}

func (p *GetTradeReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTradeReq(%+v)", *p)
}

type GetTradeResp struct {
	Err           *ErrInfo     `thrift:"err,1,required" json:"err"`
	TradeInfoList []*TradeInfo `thrift:"TradeInfoList,2" json:"TradeInfoList"`
	HasMore       bool         `thrift:"has_more,3,required" json:"has_more"`
}

func NewGetTradeResp() *GetTradeResp {
	return &GetTradeResp{}
}

var GetTradeResp_Err_DEFAULT *ErrInfo

func (p *GetTradeResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return GetTradeResp_Err_DEFAULT
	}
	return p.Err
}

var GetTradeResp_TradeInfoList_DEFAULT []*TradeInfo

func (p *GetTradeResp) GetTradeInfoList() []*TradeInfo {
	return p.TradeInfoList
}

func (p *GetTradeResp) GetHasMore() bool {
	return p.HasMore
}
func (p *GetTradeResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *GetTradeResp) IsSetTradeInfoList() bool {
	return p.TradeInfoList != nil
}

func (p *GetTradeResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTradeResp) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *GetTradeResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TradeInfo, 0, size)
	p.TradeInfoList = tSlice
	for i := 0; i < size; i++ {
		_elem12 := &TradeInfo{}
		if err := _elem12.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem12, err)
		}
		p.TradeInfoList = append(p.TradeInfoList, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetTradeResp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.HasMore = v
	}
	return nil
}

func (p *GetTradeResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTradeResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTradeResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err: %s", p, err)
	}
	return err
}

func (p *GetTradeResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTradeInfoList() {
		if err := oprot.WriteFieldBegin("TradeInfoList", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:TradeInfoList: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TradeInfoList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.TradeInfoList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:TradeInfoList: %s", p, err)
		}
	}
	return err
}

func (p *GetTradeResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("has_more", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:has_more: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.HasMore)); err != nil {
		return fmt.Errorf("%T.has_more (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:has_more: %s", p, err)
	}
	return err
}

func (p *GetTradeResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTradeResp(%+v)", *p)
}

type GetPriceReq struct {
	ProdCode   string      `thrift:"ProdCode,1,required" json:"ProdCode"`
	AccessInfo *AccessInfo `thrift:"access_info,2" json:"access_info"`
}

func NewGetPriceReq() *GetPriceReq {
	return &GetPriceReq{}
}

func (p *GetPriceReq) GetProdCode() string {
	return p.ProdCode
}

var GetPriceReq_AccessInfo_DEFAULT *AccessInfo

func (p *GetPriceReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return GetPriceReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}
func (p *GetPriceReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *GetPriceReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPriceReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProdCode = v
	}
	return nil
}

func (p *GetPriceReq) ReadField2(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *GetPriceReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPriceReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPriceReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProdCode", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ProdCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProdCode)); err != nil {
		return fmt.Errorf("%T.ProdCode (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ProdCode: %s", p, err)
	}
	return err
}

func (p *GetPriceReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccessInfo() {
		if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:access_info: %s", p, err)
		}
		if err := p.AccessInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:access_info: %s", p, err)
		}
	}
	return err
}

func (p *GetPriceReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPriceReq(%+v)", *p)
}

type GetPriceResp struct {
	Err     *ErrInfo   `thrift:"err,1,required" json:"err"`
	Price   *PriceInfo `thrift:"price,2" json:"price"`
	Product *Product   `thrift:"product,3" json:"product"`
}

func NewGetPriceResp() *GetPriceResp {
	return &GetPriceResp{}
}

var GetPriceResp_Err_DEFAULT *ErrInfo

func (p *GetPriceResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return GetPriceResp_Err_DEFAULT
	}
	return p.Err
}

var GetPriceResp_Price_DEFAULT *PriceInfo

func (p *GetPriceResp) GetPrice() *PriceInfo {
	if !p.IsSetPrice() {
		return GetPriceResp_Price_DEFAULT
	}
	return p.Price
}

var GetPriceResp_Product_DEFAULT *Product

func (p *GetPriceResp) GetProduct() *Product {
	if !p.IsSetProduct() {
		return GetPriceResp_Product_DEFAULT
	}
	return p.Product
}
func (p *GetPriceResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *GetPriceResp) IsSetPrice() bool {
	return p.Price != nil
}

func (p *GetPriceResp) IsSetProduct() bool {
	return p.Product != nil
}

func (p *GetPriceResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPriceResp) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *GetPriceResp) ReadField2(iprot thrift.TProtocol) error {
	p.Price = &PriceInfo{}
	if err := p.Price.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Price, err)
	}
	return nil
}

func (p *GetPriceResp) ReadField3(iprot thrift.TProtocol) error {
	p.Product = &Product{}
	if err := p.Product.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Product, err)
	}
	return nil
}

func (p *GetPriceResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPriceResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPriceResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err: %s", p, err)
	}
	return err
}

func (p *GetPriceResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrice() {
		if err := oprot.WriteFieldBegin("price", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:price: %s", p, err)
		}
		if err := p.Price.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Price, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:price: %s", p, err)
		}
	}
	return err
}

func (p *GetPriceResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetProduct() {
		if err := oprot.WriteFieldBegin("product", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:product: %s", p, err)
		}
		if err := p.Product.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Product, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:product: %s", p, err)
		}
	}
	return err
}

func (p *GetPriceResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPriceResp(%+v)", *p)
}

type GetAccInfoReq struct {
	UserId     int32       `thrift:"user_id,1,required" json:"user_id"`
	AccNo      string      `thrift:"AccNo,2,required" json:"AccNo"`
	AccessInfo *AccessInfo `thrift:"access_info,3,required" json:"access_info"`
	NeedProfit int32       `thrift:"NeedProfit,4,required" json:"NeedProfit"`
}

func NewGetAccInfoReq() *GetAccInfoReq {
	return &GetAccInfoReq{}
}

func (p *GetAccInfoReq) GetUserId() int32 {
	return p.UserId
}

func (p *GetAccInfoReq) GetAccNo() string {
	return p.AccNo
}

var GetAccInfoReq_AccessInfo_DEFAULT *AccessInfo

func (p *GetAccInfoReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return GetAccInfoReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}

func (p *GetAccInfoReq) GetNeedProfit() int32 {
	return p.NeedProfit
}
func (p *GetAccInfoReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *GetAccInfoReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAccInfoReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetAccInfoReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *GetAccInfoReq) ReadField3(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *GetAccInfoReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.NeedProfit = v
	}
	return nil
}

func (p *GetAccInfoReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAccInfoReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAccInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_id: %s", p, err)
	}
	return err
}

func (p *GetAccInfoReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:AccNo: %s", p, err)
	}
	return err
}

func (p *GetAccInfoReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:access_info: %s", p, err)
	}
	if err := p.AccessInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:access_info: %s", p, err)
	}
	return err
}

func (p *GetAccInfoReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("NeedProfit", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:NeedProfit: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NeedProfit)); err != nil {
		return fmt.Errorf("%T.NeedProfit (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:NeedProfit: %s", p, err)
	}
	return err
}

func (p *GetAccInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAccInfoReq(%+v)", *p)
}

type GetAccInfoResp struct {
	Err     *ErrInfo `thrift:"err,1,required" json:"err"`
	AccInfo *AccInfo `thrift:"accInfo,2" json:"accInfo"`
}

func NewGetAccInfoResp() *GetAccInfoResp {
	return &GetAccInfoResp{}
}

var GetAccInfoResp_Err_DEFAULT *ErrInfo

func (p *GetAccInfoResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return GetAccInfoResp_Err_DEFAULT
	}
	return p.Err
}

var GetAccInfoResp_AccInfo_DEFAULT *AccInfo

func (p *GetAccInfoResp) GetAccInfo() *AccInfo {
	if !p.IsSetAccInfo() {
		return GetAccInfoResp_AccInfo_DEFAULT
	}
	return p.AccInfo
}
func (p *GetAccInfoResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *GetAccInfoResp) IsSetAccInfo() bool {
	return p.AccInfo != nil
}

func (p *GetAccInfoResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAccInfoResp) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *GetAccInfoResp) ReadField2(iprot thrift.TProtocol) error {
	p.AccInfo = &AccInfo{}
	if err := p.AccInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccInfo, err)
	}
	return nil
}

func (p *GetAccInfoResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAccInfoResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAccInfoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err: %s", p, err)
	}
	return err
}

func (p *GetAccInfoResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccInfo() {
		if err := oprot.WriteFieldBegin("accInfo", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:accInfo: %s", p, err)
		}
		if err := p.AccInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AccInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:accInfo: %s", p, err)
		}
	}
	return err
}

func (p *GetAccInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAccInfoResp(%+v)", *p)
}

type GetTickerReq struct {
	ProdCode   string      `thrift:"ProdCode,1,required" json:"ProdCode"`
	StartTime  int32       `thrift:"StartTime,2,required" json:"StartTime"`
	ReqNum     *int32      `thrift:"ReqNum,3" json:"ReqNum"`
	AccessInfo *AccessInfo `thrift:"access_info,4" json:"access_info"`
}

func NewGetTickerReq() *GetTickerReq {
	return &GetTickerReq{}
}

func (p *GetTickerReq) GetProdCode() string {
	return p.ProdCode
}

func (p *GetTickerReq) GetStartTime() int32 {
	return p.StartTime
}

var GetTickerReq_ReqNum_DEFAULT int32

func (p *GetTickerReq) GetReqNum() int32 {
	if !p.IsSetReqNum() {
		return GetTickerReq_ReqNum_DEFAULT
	}
	return *p.ReqNum
}

var GetTickerReq_AccessInfo_DEFAULT *AccessInfo

func (p *GetTickerReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return GetTickerReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}
func (p *GetTickerReq) IsSetReqNum() bool {
	return p.ReqNum != nil
}

func (p *GetTickerReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *GetTickerReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTickerReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProdCode = v
	}
	return nil
}

func (p *GetTickerReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *GetTickerReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ReqNum = &v
	}
	return nil
}

func (p *GetTickerReq) ReadField4(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *GetTickerReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTickerReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTickerReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProdCode", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ProdCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProdCode)); err != nil {
		return fmt.Errorf("%T.ProdCode (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ProdCode: %s", p, err)
	}
	return err
}

func (p *GetTickerReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StartTime", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:StartTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.StartTime)); err != nil {
		return fmt.Errorf("%T.StartTime (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:StartTime: %s", p, err)
	}
	return err
}

func (p *GetTickerReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReqNum() {
		if err := oprot.WriteFieldBegin("ReqNum", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:ReqNum: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ReqNum)); err != nil {
			return fmt.Errorf("%T.ReqNum (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:ReqNum: %s", p, err)
		}
	}
	return err
}

func (p *GetTickerReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccessInfo() {
		if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:access_info: %s", p, err)
		}
		if err := p.AccessInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:access_info: %s", p, err)
		}
	}
	return err
}

func (p *GetTickerReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTickerReq(%+v)", *p)
}

type GetTickerResp struct {
	Err     *ErrInfo  `thrift:"err,1,required" json:"err"`
	Tickers []*Ticker `thrift:"tickers,2" json:"tickers"`
}

func NewGetTickerResp() *GetTickerResp {
	return &GetTickerResp{}
}

var GetTickerResp_Err_DEFAULT *ErrInfo

func (p *GetTickerResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return GetTickerResp_Err_DEFAULT
	}
	return p.Err
}

var GetTickerResp_Tickers_DEFAULT []*Ticker

func (p *GetTickerResp) GetTickers() []*Ticker {
	return p.Tickers
}
func (p *GetTickerResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *GetTickerResp) IsSetTickers() bool {
	return p.Tickers != nil
}

func (p *GetTickerResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTickerResp) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *GetTickerResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Ticker, 0, size)
	p.Tickers = tSlice
	for i := 0; i < size; i++ {
		_elem13 := &Ticker{}
		if err := _elem13.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem13, err)
		}
		p.Tickers = append(p.Tickers, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetTickerResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTickerResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTickerResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err: %s", p, err)
	}
	return err
}

func (p *GetTickerResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTickers() {
		if err := oprot.WriteFieldBegin("tickers", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:tickers: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tickers)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Tickers {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:tickers: %s", p, err)
		}
	}
	return err
}

func (p *GetTickerResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTickerResp(%+v)", *p)
}

type ChangePasswordReq struct {
	UserId     int32       `thrift:"user_id,1,required" json:"user_id"`
	AccNo      string      `thrift:"AccNo,2,required" json:"AccNo"`
	AccessInfo *AccessInfo `thrift:"access_info,3,required" json:"access_info"`
	OldPsw     string      `thrift:"old_psw,4,required" json:"old_psw"`
	NewPsw_    string      `thrift:"new_psw,5,required" json:"new_psw"`
}

func NewChangePasswordReq() *ChangePasswordReq {
	return &ChangePasswordReq{}
}

func (p *ChangePasswordReq) GetUserId() int32 {
	return p.UserId
}

func (p *ChangePasswordReq) GetAccNo() string {
	return p.AccNo
}

var ChangePasswordReq_AccessInfo_DEFAULT *AccessInfo

func (p *ChangePasswordReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return ChangePasswordReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}

func (p *ChangePasswordReq) GetOldPsw() string {
	return p.OldPsw
}

func (p *ChangePasswordReq) GetNewPsw_() string {
	return p.NewPsw_
}
func (p *ChangePasswordReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *ChangePasswordReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangePasswordReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *ChangePasswordReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *ChangePasswordReq) ReadField3(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *ChangePasswordReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.OldPsw = v
	}
	return nil
}

func (p *ChangePasswordReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.NewPsw_ = v
	}
	return nil
}

func (p *ChangePasswordReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChangePasswordReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangePasswordReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_id: %s", p, err)
	}
	return err
}

func (p *ChangePasswordReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:AccNo: %s", p, err)
	}
	return err
}

func (p *ChangePasswordReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:access_info: %s", p, err)
	}
	if err := p.AccessInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:access_info: %s", p, err)
	}
	return err
}

func (p *ChangePasswordReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("old_psw", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:old_psw: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OldPsw)); err != nil {
		return fmt.Errorf("%T.old_psw (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:old_psw: %s", p, err)
	}
	return err
}

func (p *ChangePasswordReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_psw", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:new_psw: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NewPsw_)); err != nil {
		return fmt.Errorf("%T.new_psw (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:new_psw: %s", p, err)
	}
	return err
}

func (p *ChangePasswordReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangePasswordReq(%+v)", *p)
}

type ChangePasswordResp struct {
	Err *ErrInfo `thrift:"err,1,required" json:"err"`
}

func NewChangePasswordResp() *ChangePasswordResp {
	return &ChangePasswordResp{}
}

var ChangePasswordResp_Err_DEFAULT *ErrInfo

func (p *ChangePasswordResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return ChangePasswordResp_Err_DEFAULT
	}
	return p.Err
}
func (p *ChangePasswordResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *ChangePasswordResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangePasswordResp) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *ChangePasswordResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChangePasswordResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangePasswordResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err: %s", p, err)
	}
	return err
}

func (p *ChangePasswordResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangePasswordResp(%+v)", *p)
}

type GetUserAccountStatusReq struct {
	UserId     int32       `thrift:"user_id,1,required" json:"user_id"`
	AccessInfo *AccessInfo `thrift:"access_info,2,required" json:"access_info"`
}

func NewGetUserAccountStatusReq() *GetUserAccountStatusReq {
	return &GetUserAccountStatusReq{}
}

func (p *GetUserAccountStatusReq) GetUserId() int32 {
	return p.UserId
}

var GetUserAccountStatusReq_AccessInfo_DEFAULT *AccessInfo

func (p *GetUserAccountStatusReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return GetUserAccountStatusReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}
func (p *GetUserAccountStatusReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *GetUserAccountStatusReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserAccountStatusReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetUserAccountStatusReq) ReadField2(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *GetUserAccountStatusReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetUserAccountStatusReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserAccountStatusReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_id: %s", p, err)
	}
	return err
}

func (p *GetUserAccountStatusReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:access_info: %s", p, err)
	}
	if err := p.AccessInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:access_info: %s", p, err)
	}
	return err
}

func (p *GetUserAccountStatusReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserAccountStatusReq(%+v)", *p)
}

type GetUserAccountStatusResp struct {
	Err           *ErrInfo `thrift:"err,1,required" json:"err"`
	AccountStatus int32    `thrift:"account_status,2,required" json:"account_status"`
	UserId        int32    `thrift:"user_id,3,required" json:"user_id"`
	AccountNo     string   `thrift:"account_no,4,required" json:"account_no"`
}

func NewGetUserAccountStatusResp() *GetUserAccountStatusResp {
	return &GetUserAccountStatusResp{}
}

var GetUserAccountStatusResp_Err_DEFAULT *ErrInfo

func (p *GetUserAccountStatusResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return GetUserAccountStatusResp_Err_DEFAULT
	}
	return p.Err
}

func (p *GetUserAccountStatusResp) GetAccountStatus() int32 {
	return p.AccountStatus
}

func (p *GetUserAccountStatusResp) GetUserId() int32 {
	return p.UserId
}

func (p *GetUserAccountStatusResp) GetAccountNo() string {
	return p.AccountNo
}
func (p *GetUserAccountStatusResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *GetUserAccountStatusResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserAccountStatusResp) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *GetUserAccountStatusResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AccountStatus = v
	}
	return nil
}

func (p *GetUserAccountStatusResp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetUserAccountStatusResp) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.AccountNo = v
	}
	return nil
}

func (p *GetUserAccountStatusResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetUserAccountStatusResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserAccountStatusResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err: %s", p, err)
	}
	return err
}

func (p *GetUserAccountStatusResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("account_status", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:account_status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.AccountStatus)); err != nil {
		return fmt.Errorf("%T.account_status (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:account_status: %s", p, err)
	}
	return err
}

func (p *GetUserAccountStatusResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:user_id: %s", p, err)
	}
	return err
}

func (p *GetUserAccountStatusResp) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("account_no", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:account_no: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccountNo)); err != nil {
		return fmt.Errorf("%T.account_no (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:account_no: %s", p, err)
	}
	return err
}

func (p *GetUserAccountStatusResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserAccountStatusResp(%+v)", *p)
}

type FundInOutRecord struct {
	Description *int32  `thrift:"description,1" json:"description"`
	Money       *string `thrift:"money,2" json:"money"`
	CreateTime  *int64  `thrift:"create_time,3" json:"create_time"`
}

func NewFundInOutRecord() *FundInOutRecord {
	return &FundInOutRecord{}
}

var FundInOutRecord_Description_DEFAULT int32

func (p *FundInOutRecord) GetDescription() int32 {
	if !p.IsSetDescription() {
		return FundInOutRecord_Description_DEFAULT
	}
	return *p.Description
}

var FundInOutRecord_Money_DEFAULT string

func (p *FundInOutRecord) GetMoney() string {
	if !p.IsSetMoney() {
		return FundInOutRecord_Money_DEFAULT
	}
	return *p.Money
}

var FundInOutRecord_CreateTime_DEFAULT int64

func (p *FundInOutRecord) GetCreateTime() int64 {
	if !p.IsSetCreateTime() {
		return FundInOutRecord_CreateTime_DEFAULT
	}
	return *p.CreateTime
}
func (p *FundInOutRecord) IsSetDescription() bool {
	return p.Description != nil
}

func (p *FundInOutRecord) IsSetMoney() bool {
	return p.Money != nil
}

func (p *FundInOutRecord) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *FundInOutRecord) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FundInOutRecord) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Description = &v
	}
	return nil
}

func (p *FundInOutRecord) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Money = &v
	}
	return nil
}

func (p *FundInOutRecord) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.CreateTime = &v
	}
	return nil
}

func (p *FundInOutRecord) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FundInOutRecord"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FundInOutRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err := oprot.WriteFieldBegin("description", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:description: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Description)); err != nil {
			return fmt.Errorf("%T.description (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:description: %s", p, err)
		}
	}
	return err
}

func (p *FundInOutRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMoney() {
		if err := oprot.WriteFieldBegin("money", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:money: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Money)); err != nil {
			return fmt.Errorf("%T.money (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:money: %s", p, err)
		}
	}
	return err
}

func (p *FundInOutRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err := oprot.WriteFieldBegin("create_time", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:create_time: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
			return fmt.Errorf("%T.create_time (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:create_time: %s", p, err)
		}
	}
	return err
}

func (p *FundInOutRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FundInOutRecord(%+v)", *p)
}

type GetFundInOutRecordReq struct {
	AccNo      string      `thrift:"AccNo,1,required" json:"AccNo"`
	UserId     int32       `thrift:"user_id,2,required" json:"user_id"`
	AccessInfo *AccessInfo `thrift:"access_info,3,required" json:"access_info"`
	Index      *int32      `thrift:"index,4" json:"index"`
	BatchNum   *int32      `thrift:"batch_num,5" json:"batch_num"`
}

func NewGetFundInOutRecordReq() *GetFundInOutRecordReq {
	return &GetFundInOutRecordReq{}
}

func (p *GetFundInOutRecordReq) GetAccNo() string {
	return p.AccNo
}

func (p *GetFundInOutRecordReq) GetUserId() int32 {
	return p.UserId
}

var GetFundInOutRecordReq_AccessInfo_DEFAULT *AccessInfo

func (p *GetFundInOutRecordReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return GetFundInOutRecordReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}

var GetFundInOutRecordReq_Index_DEFAULT int32

func (p *GetFundInOutRecordReq) GetIndex() int32 {
	if !p.IsSetIndex() {
		return GetFundInOutRecordReq_Index_DEFAULT
	}
	return *p.Index
}

var GetFundInOutRecordReq_BatchNum_DEFAULT int32

func (p *GetFundInOutRecordReq) GetBatchNum() int32 {
	if !p.IsSetBatchNum() {
		return GetFundInOutRecordReq_BatchNum_DEFAULT
	}
	return *p.BatchNum
}
func (p *GetFundInOutRecordReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *GetFundInOutRecordReq) IsSetIndex() bool {
	return p.Index != nil
}

func (p *GetFundInOutRecordReq) IsSetBatchNum() bool {
	return p.BatchNum != nil
}

func (p *GetFundInOutRecordReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFundInOutRecordReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *GetFundInOutRecordReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetFundInOutRecordReq) ReadField3(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *GetFundInOutRecordReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Index = &v
	}
	return nil
}

func (p *GetFundInOutRecordReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.BatchNum = &v
	}
	return nil
}

func (p *GetFundInOutRecordReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetFundInOutRecordReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFundInOutRecordReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:AccNo: %s", p, err)
	}
	return err
}

func (p *GetFundInOutRecordReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:user_id: %s", p, err)
	}
	return err
}

func (p *GetFundInOutRecordReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:access_info: %s", p, err)
	}
	if err := p.AccessInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:access_info: %s", p, err)
	}
	return err
}

func (p *GetFundInOutRecordReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndex() {
		if err := oprot.WriteFieldBegin("index", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:index: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Index)); err != nil {
			return fmt.Errorf("%T.index (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:index: %s", p, err)
		}
	}
	return err
}

func (p *GetFundInOutRecordReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchNum() {
		if err := oprot.WriteFieldBegin("batch_num", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:batch_num: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.BatchNum)); err != nil {
			return fmt.Errorf("%T.batch_num (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:batch_num: %s", p, err)
		}
	}
	return err
}

func (p *GetFundInOutRecordReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFundInOutRecordReq(%+v)", *p)
}

type GetFundInOutRecordResp struct {
	Err           *ErrInfo           `thrift:"err,1,required" json:"err"`
	FundInOutList []*FundInOutRecord `thrift:"fund_in_out_list,2" json:"fund_in_out_list"`
	HasMore       bool               `thrift:"has_more,3,required" json:"has_more"`
}

func NewGetFundInOutRecordResp() *GetFundInOutRecordResp {
	return &GetFundInOutRecordResp{}
}

var GetFundInOutRecordResp_Err_DEFAULT *ErrInfo

func (p *GetFundInOutRecordResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return GetFundInOutRecordResp_Err_DEFAULT
	}
	return p.Err
}

var GetFundInOutRecordResp_FundInOutList_DEFAULT []*FundInOutRecord

func (p *GetFundInOutRecordResp) GetFundInOutList() []*FundInOutRecord {
	return p.FundInOutList
}

func (p *GetFundInOutRecordResp) GetHasMore() bool {
	return p.HasMore
}
func (p *GetFundInOutRecordResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *GetFundInOutRecordResp) IsSetFundInOutList() bool {
	return p.FundInOutList != nil
}

func (p *GetFundInOutRecordResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFundInOutRecordResp) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *GetFundInOutRecordResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FundInOutRecord, 0, size)
	p.FundInOutList = tSlice
	for i := 0; i < size; i++ {
		_elem14 := &FundInOutRecord{}
		if err := _elem14.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem14, err)
		}
		p.FundInOutList = append(p.FundInOutList, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetFundInOutRecordResp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.HasMore = v
	}
	return nil
}

func (p *GetFundInOutRecordResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetFundInOutRecordResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFundInOutRecordResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err: %s", p, err)
	}
	return err
}

func (p *GetFundInOutRecordResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFundInOutList() {
		if err := oprot.WriteFieldBegin("fund_in_out_list", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:fund_in_out_list: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FundInOutList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.FundInOutList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:fund_in_out_list: %s", p, err)
		}
	}
	return err
}

func (p *GetFundInOutRecordResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("has_more", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:has_more: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.HasMore)); err != nil {
		return fmt.Errorf("%T.has_more (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:has_more: %s", p, err)
	}
	return err
}

func (p *GetFundInOutRecordResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFundInOutRecordResp(%+v)", *p)
}

type FuturesQuoteFeeInfo struct {
	TradeCost      float64  `thrift:"trade_cost,1,required" json:"trade_cost"`
	ExchangeCost   *float64 `thrift:"exchange_cost,2" json:"exchange_cost"`
	SecuritiesCost *float64 `thrift:"securities_cost,3" json:"securities_cost"`
	IMargin        float64  `thrift:"IMargin,4,required" json:"IMargin"`
	MMargin        float64  `thrift:"MMargin,5,required" json:"MMargin"`
	QuoteId        string   `thrift:"quote_id,6,required" json:"quote_id"`
}

func NewFuturesQuoteFeeInfo() *FuturesQuoteFeeInfo {
	return &FuturesQuoteFeeInfo{}
}

func (p *FuturesQuoteFeeInfo) GetTradeCost() float64 {
	return p.TradeCost
}

var FuturesQuoteFeeInfo_ExchangeCost_DEFAULT float64

func (p *FuturesQuoteFeeInfo) GetExchangeCost() float64 {
	if !p.IsSetExchangeCost() {
		return FuturesQuoteFeeInfo_ExchangeCost_DEFAULT
	}
	return *p.ExchangeCost
}

var FuturesQuoteFeeInfo_SecuritiesCost_DEFAULT float64

func (p *FuturesQuoteFeeInfo) GetSecuritiesCost() float64 {
	if !p.IsSetSecuritiesCost() {
		return FuturesQuoteFeeInfo_SecuritiesCost_DEFAULT
	}
	return *p.SecuritiesCost
}

func (p *FuturesQuoteFeeInfo) GetIMargin() float64 {
	return p.IMargin
}

func (p *FuturesQuoteFeeInfo) GetMMargin() float64 {
	return p.MMargin
}

func (p *FuturesQuoteFeeInfo) GetQuoteId() string {
	return p.QuoteId
}
func (p *FuturesQuoteFeeInfo) IsSetExchangeCost() bool {
	return p.ExchangeCost != nil
}

func (p *FuturesQuoteFeeInfo) IsSetSecuritiesCost() bool {
	return p.SecuritiesCost != nil
}

func (p *FuturesQuoteFeeInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FuturesQuoteFeeInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TradeCost = v
	}
	return nil
}

func (p *FuturesQuoteFeeInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ExchangeCost = &v
	}
	return nil
}

func (p *FuturesQuoteFeeInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SecuritiesCost = &v
	}
	return nil
}

func (p *FuturesQuoteFeeInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.IMargin = v
	}
	return nil
}

func (p *FuturesQuoteFeeInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MMargin = v
	}
	return nil
}

func (p *FuturesQuoteFeeInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.QuoteId = v
	}
	return nil
}

func (p *FuturesQuoteFeeInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FuturesQuoteFeeInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FuturesQuoteFeeInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trade_cost", thrift.DOUBLE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:trade_cost: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.TradeCost)); err != nil {
		return fmt.Errorf("%T.trade_cost (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:trade_cost: %s", p, err)
	}
	return err
}

func (p *FuturesQuoteFeeInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExchangeCost() {
		if err := oprot.WriteFieldBegin("exchange_cost", thrift.DOUBLE, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:exchange_cost: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.ExchangeCost)); err != nil {
			return fmt.Errorf("%T.exchange_cost (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:exchange_cost: %s", p, err)
		}
	}
	return err
}

func (p *FuturesQuoteFeeInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecuritiesCost() {
		if err := oprot.WriteFieldBegin("securities_cost", thrift.DOUBLE, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:securities_cost: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.SecuritiesCost)); err != nil {
			return fmt.Errorf("%T.securities_cost (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:securities_cost: %s", p, err)
		}
	}
	return err
}

func (p *FuturesQuoteFeeInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IMargin", thrift.DOUBLE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:IMargin: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.IMargin)); err != nil {
		return fmt.Errorf("%T.IMargin (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:IMargin: %s", p, err)
	}
	return err
}

func (p *FuturesQuoteFeeInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MMargin", thrift.DOUBLE, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:MMargin: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.MMargin)); err != nil {
		return fmt.Errorf("%T.MMargin (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:MMargin: %s", p, err)
	}
	return err
}

func (p *FuturesQuoteFeeInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("quote_id", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:quote_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QuoteId)); err != nil {
		return fmt.Errorf("%T.quote_id (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:quote_id: %s", p, err)
	}
	return err
}

func (p *FuturesQuoteFeeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FuturesQuoteFeeInfo(%+v)", *p)
}

type GetFuturesQuoteFeeInfoReq struct {
	QuoteId    string      `thrift:"quote_id,1,required" json:"quote_id"`
	AccessInfo *AccessInfo `thrift:"access_info,2,required" json:"access_info"`
	UserId     int32       `thrift:"user_id,3,required" json:"user_id"`
	AccNo      string      `thrift:"AccNo,4,required" json:"AccNo"`
}

func NewGetFuturesQuoteFeeInfoReq() *GetFuturesQuoteFeeInfoReq {
	return &GetFuturesQuoteFeeInfoReq{}
}

func (p *GetFuturesQuoteFeeInfoReq) GetQuoteId() string {
	return p.QuoteId
}

var GetFuturesQuoteFeeInfoReq_AccessInfo_DEFAULT *AccessInfo

func (p *GetFuturesQuoteFeeInfoReq) GetAccessInfo() *AccessInfo {
	if !p.IsSetAccessInfo() {
		return GetFuturesQuoteFeeInfoReq_AccessInfo_DEFAULT
	}
	return p.AccessInfo
}

func (p *GetFuturesQuoteFeeInfoReq) GetUserId() int32 {
	return p.UserId
}

func (p *GetFuturesQuoteFeeInfoReq) GetAccNo() string {
	return p.AccNo
}
func (p *GetFuturesQuoteFeeInfoReq) IsSetAccessInfo() bool {
	return p.AccessInfo != nil
}

func (p *GetFuturesQuoteFeeInfoReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFuturesQuoteFeeInfoReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.QuoteId = v
	}
	return nil
}

func (p *GetFuturesQuoteFeeInfoReq) ReadField2(iprot thrift.TProtocol) error {
	p.AccessInfo = &AccessInfo{}
	if err := p.AccessInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AccessInfo, err)
	}
	return nil
}

func (p *GetFuturesQuoteFeeInfoReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetFuturesQuoteFeeInfoReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.AccNo = v
	}
	return nil
}

func (p *GetFuturesQuoteFeeInfoReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetFuturesQuoteFeeInfoReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFuturesQuoteFeeInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("quote_id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:quote_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QuoteId)); err != nil {
		return fmt.Errorf("%T.quote_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:quote_id: %s", p, err)
	}
	return err
}

func (p *GetFuturesQuoteFeeInfoReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_info", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:access_info: %s", p, err)
	}
	if err := p.AccessInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.AccessInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:access_info: %s", p, err)
	}
	return err
}

func (p *GetFuturesQuoteFeeInfoReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:user_id: %s", p, err)
	}
	return err
}

func (p *GetFuturesQuoteFeeInfoReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccNo", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:AccNo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccNo)); err != nil {
		return fmt.Errorf("%T.AccNo (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:AccNo: %s", p, err)
	}
	return err
}

func (p *GetFuturesQuoteFeeInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFuturesQuoteFeeInfoReq(%+v)", *p)
}

type GetFuturesQuoteFeeInfoResp struct {
	QuoteFeeInfo *FuturesQuoteFeeInfo `thrift:"quote_fee_info,1,required" json:"quote_fee_info"`
	Err          *ErrInfo             `thrift:"err,2,required" json:"err"`
}

func NewGetFuturesQuoteFeeInfoResp() *GetFuturesQuoteFeeInfoResp {
	return &GetFuturesQuoteFeeInfoResp{}
}

var GetFuturesQuoteFeeInfoResp_QuoteFeeInfo_DEFAULT *FuturesQuoteFeeInfo

func (p *GetFuturesQuoteFeeInfoResp) GetQuoteFeeInfo() *FuturesQuoteFeeInfo {
	if !p.IsSetQuoteFeeInfo() {
		return GetFuturesQuoteFeeInfoResp_QuoteFeeInfo_DEFAULT
	}
	return p.QuoteFeeInfo
}

var GetFuturesQuoteFeeInfoResp_Err_DEFAULT *ErrInfo

func (p *GetFuturesQuoteFeeInfoResp) GetErr() *ErrInfo {
	if !p.IsSetErr() {
		return GetFuturesQuoteFeeInfoResp_Err_DEFAULT
	}
	return p.Err
}
func (p *GetFuturesQuoteFeeInfoResp) IsSetQuoteFeeInfo() bool {
	return p.QuoteFeeInfo != nil
}

func (p *GetFuturesQuoteFeeInfoResp) IsSetErr() bool {
	return p.Err != nil
}

func (p *GetFuturesQuoteFeeInfoResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFuturesQuoteFeeInfoResp) ReadField1(iprot thrift.TProtocol) error {
	p.QuoteFeeInfo = &FuturesQuoteFeeInfo{}
	if err := p.QuoteFeeInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QuoteFeeInfo, err)
	}
	return nil
}

func (p *GetFuturesQuoteFeeInfoResp) ReadField2(iprot thrift.TProtocol) error {
	p.Err = &ErrInfo{
		ErrMsg: "default err msg",
	}
	if err := p.Err.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Err, err)
	}
	return nil
}

func (p *GetFuturesQuoteFeeInfoResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetFuturesQuoteFeeInfoResp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFuturesQuoteFeeInfoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("quote_fee_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:quote_fee_info: %s", p, err)
	}
	if err := p.QuoteFeeInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.QuoteFeeInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:quote_fee_info: %s", p, err)
	}
	return err
}

func (p *GetFuturesQuoteFeeInfoResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:err: %s", p, err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Err, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:err: %s", p, err)
	}
	return err
}

func (p *GetFuturesQuoteFeeInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFuturesQuoteFeeInfoResp(%+v)", *p)
}
