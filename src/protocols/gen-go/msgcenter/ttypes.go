// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package msgcenter

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Errno int64

const (
	Errno_SUCCESS         Errno = 0
	Errno_FAILURE         Errno = 1
	Errno_INSILENCE       Errno = 2
	Errno_INBLACKLIST     Errno = 3
	Errno_NOTFOLLOW       Errno = 4
	Errno_CONTENTCENSORED Errno = 5
)

func (p Errno) String() string {
	switch p {
	case Errno_SUCCESS:
		return "Errno_SUCCESS"
	case Errno_FAILURE:
		return "Errno_FAILURE"
	case Errno_INSILENCE:
		return "Errno_INSILENCE"
	case Errno_INBLACKLIST:
		return "Errno_INBLACKLIST"
	case Errno_NOTFOLLOW:
		return "Errno_NOTFOLLOW"
	case Errno_CONTENTCENSORED:
		return "Errno_CONTENTCENSORED"
	}
	return "<UNSET>"
}

func ErrnoFromString(s string) (Errno, error) {
	switch s {
	case "Errno_SUCCESS":
		return Errno_SUCCESS, nil
	case "Errno_FAILURE":
		return Errno_FAILURE, nil
	case "Errno_INSILENCE":
		return Errno_INSILENCE, nil
	case "Errno_INBLACKLIST":
		return Errno_INBLACKLIST, nil
	case "Errno_NOTFOLLOW":
		return Errno_NOTFOLLOW, nil
	case "Errno_CONTENTCENSORED":
		return Errno_CONTENTCENSORED, nil
	}
	return Errno(0), fmt.Errorf("not a valid Errno string")
}

func ErrnoPtr(v Errno) *Errno { return &v }

type NoticeType int64

const (
	NoticeType_ACCOUNT_MONEY         NoticeType = 1800000
	NoticeType_FINANCIAL_ASSISTANT   NoticeType = 1800001
	NoticeType_STOCK_ASSISTANT       NoticeType = 1800002
	NoticeType_FOREX_ASSISTANT       NoticeType = 1800003
	NoticeType_MASTER_ASSISTANT      NoticeType = 1800004
	NoticeType_LIFE_ASSISTANT        NoticeType = 1800005
	NoticeType_FORMAX_MEMBER         NoticeType = 1800006
	NoticeType_FORMAX_ACTIVITY       NoticeType = 1800007
	NoticeType_SYSTEM_NOTICE         NoticeType = 1800008
	NoticeType_MASTER_OFFICAL        NoticeType = 1800009
	NoticeType_AMERICAN_STOCK        NoticeType = 1800010
	NoticeType_HOT_NEWS              NoticeType = 1800011
	NoticeType_LICAI_RESERVED1       NoticeType = 1800012
	NoticeType_LICAI_RESERVED2       NoticeType = 1800013
	NoticeType_LOAN_ACCOUNT_MONEY    NoticeType = 1800014
	NoticeType_LOAN_ACTIVITY         NoticeType = 1800015
	NoticeType_LOAN_SYSTEM           NoticeType = 1800016
	NoticeType_LOAN_ASSISTANT        NoticeType = 1800017
	NoticeType_BOND_ACCOUNT_MONEY    NoticeType = 1800018
	NoticeType_BOND_ACTIVITY         NoticeType = 1800019
	NoticeType_BOND_SYSTEM           NoticeType = 1800020
	NoticeType_BOND_FOREX_ASSISTANT  NoticeType = 1800021
	NoticeType_BOND_STOCK_ASSISTANT  NoticeType = 1800022
	NoticeType_BOND_MASTER_ASSISTANT NoticeType = 1800023
	NoticeType_BOND_MASTER_OFFICAL   NoticeType = 1800024
	NoticeType_BOND_HOT_NEWS         NoticeType = 1800025
	NoticeType_BOND_AMERICAN_STOCK   NoticeType = 1800026
	NoticeType_LIFEAPP_NOTICE        NoticeType = 1900000
	NoticeType_INSUREANCE_NOTICE     NoticeType = 1900001
)

func (p NoticeType) String() string {
	switch p {
	case NoticeType_ACCOUNT_MONEY:
		return "NoticeType_ACCOUNT_MONEY"
	case NoticeType_FINANCIAL_ASSISTANT:
		return "NoticeType_FINANCIAL_ASSISTANT"
	case NoticeType_STOCK_ASSISTANT:
		return "NoticeType_STOCK_ASSISTANT"
	case NoticeType_FOREX_ASSISTANT:
		return "NoticeType_FOREX_ASSISTANT"
	case NoticeType_MASTER_ASSISTANT:
		return "NoticeType_MASTER_ASSISTANT"
	case NoticeType_LIFE_ASSISTANT:
		return "NoticeType_LIFE_ASSISTANT"
	case NoticeType_FORMAX_MEMBER:
		return "NoticeType_FORMAX_MEMBER"
	case NoticeType_FORMAX_ACTIVITY:
		return "NoticeType_FORMAX_ACTIVITY"
	case NoticeType_SYSTEM_NOTICE:
		return "NoticeType_SYSTEM_NOTICE"
	case NoticeType_MASTER_OFFICAL:
		return "NoticeType_MASTER_OFFICAL"
	case NoticeType_AMERICAN_STOCK:
		return "NoticeType_AMERICAN_STOCK"
	case NoticeType_HOT_NEWS:
		return "NoticeType_HOT_NEWS"
	case NoticeType_LICAI_RESERVED1:
		return "NoticeType_LICAI_RESERVED1"
	case NoticeType_LICAI_RESERVED2:
		return "NoticeType_LICAI_RESERVED2"
	case NoticeType_LOAN_ACCOUNT_MONEY:
		return "NoticeType_LOAN_ACCOUNT_MONEY"
	case NoticeType_LOAN_ACTIVITY:
		return "NoticeType_LOAN_ACTIVITY"
	case NoticeType_LOAN_SYSTEM:
		return "NoticeType_LOAN_SYSTEM"
	case NoticeType_LOAN_ASSISTANT:
		return "NoticeType_LOAN_ASSISTANT"
	case NoticeType_BOND_ACCOUNT_MONEY:
		return "NoticeType_BOND_ACCOUNT_MONEY"
	case NoticeType_BOND_ACTIVITY:
		return "NoticeType_BOND_ACTIVITY"
	case NoticeType_BOND_SYSTEM:
		return "NoticeType_BOND_SYSTEM"
	case NoticeType_BOND_FOREX_ASSISTANT:
		return "NoticeType_BOND_FOREX_ASSISTANT"
	case NoticeType_BOND_STOCK_ASSISTANT:
		return "NoticeType_BOND_STOCK_ASSISTANT"
	case NoticeType_BOND_MASTER_ASSISTANT:
		return "NoticeType_BOND_MASTER_ASSISTANT"
	case NoticeType_BOND_MASTER_OFFICAL:
		return "NoticeType_BOND_MASTER_OFFICAL"
	case NoticeType_BOND_HOT_NEWS:
		return "NoticeType_BOND_HOT_NEWS"
	case NoticeType_BOND_AMERICAN_STOCK:
		return "NoticeType_BOND_AMERICAN_STOCK"
	case NoticeType_LIFEAPP_NOTICE:
		return "NoticeType_LIFEAPP_NOTICE"
	case NoticeType_INSUREANCE_NOTICE:
		return "NoticeType_INSUREANCE_NOTICE"
	}
	return "<UNSET>"
}

func NoticeTypeFromString(s string) (NoticeType, error) {
	switch s {
	case "NoticeType_ACCOUNT_MONEY":
		return NoticeType_ACCOUNT_MONEY, nil
	case "NoticeType_FINANCIAL_ASSISTANT":
		return NoticeType_FINANCIAL_ASSISTANT, nil
	case "NoticeType_STOCK_ASSISTANT":
		return NoticeType_STOCK_ASSISTANT, nil
	case "NoticeType_FOREX_ASSISTANT":
		return NoticeType_FOREX_ASSISTANT, nil
	case "NoticeType_MASTER_ASSISTANT":
		return NoticeType_MASTER_ASSISTANT, nil
	case "NoticeType_LIFE_ASSISTANT":
		return NoticeType_LIFE_ASSISTANT, nil
	case "NoticeType_FORMAX_MEMBER":
		return NoticeType_FORMAX_MEMBER, nil
	case "NoticeType_FORMAX_ACTIVITY":
		return NoticeType_FORMAX_ACTIVITY, nil
	case "NoticeType_SYSTEM_NOTICE":
		return NoticeType_SYSTEM_NOTICE, nil
	case "NoticeType_MASTER_OFFICAL":
		return NoticeType_MASTER_OFFICAL, nil
	case "NoticeType_AMERICAN_STOCK":
		return NoticeType_AMERICAN_STOCK, nil
	case "NoticeType_HOT_NEWS":
		return NoticeType_HOT_NEWS, nil
	case "NoticeType_LICAI_RESERVED1":
		return NoticeType_LICAI_RESERVED1, nil
	case "NoticeType_LICAI_RESERVED2":
		return NoticeType_LICAI_RESERVED2, nil
	case "NoticeType_LOAN_ACCOUNT_MONEY":
		return NoticeType_LOAN_ACCOUNT_MONEY, nil
	case "NoticeType_LOAN_ACTIVITY":
		return NoticeType_LOAN_ACTIVITY, nil
	case "NoticeType_LOAN_SYSTEM":
		return NoticeType_LOAN_SYSTEM, nil
	case "NoticeType_LOAN_ASSISTANT":
		return NoticeType_LOAN_ASSISTANT, nil
	case "NoticeType_BOND_ACCOUNT_MONEY":
		return NoticeType_BOND_ACCOUNT_MONEY, nil
	case "NoticeType_BOND_ACTIVITY":
		return NoticeType_BOND_ACTIVITY, nil
	case "NoticeType_BOND_SYSTEM":
		return NoticeType_BOND_SYSTEM, nil
	case "NoticeType_BOND_FOREX_ASSISTANT":
		return NoticeType_BOND_FOREX_ASSISTANT, nil
	case "NoticeType_BOND_STOCK_ASSISTANT":
		return NoticeType_BOND_STOCK_ASSISTANT, nil
	case "NoticeType_BOND_MASTER_ASSISTANT":
		return NoticeType_BOND_MASTER_ASSISTANT, nil
	case "NoticeType_BOND_MASTER_OFFICAL":
		return NoticeType_BOND_MASTER_OFFICAL, nil
	case "NoticeType_BOND_HOT_NEWS":
		return NoticeType_BOND_HOT_NEWS, nil
	case "NoticeType_BOND_AMERICAN_STOCK":
		return NoticeType_BOND_AMERICAN_STOCK, nil
	case "NoticeType_LIFEAPP_NOTICE":
		return NoticeType_LIFEAPP_NOTICE, nil
	case "NoticeType_INSUREANCE_NOTICE":
		return NoticeType_INSUREANCE_NOTICE, nil
	}
	return NoticeType(0), fmt.Errorf("not a valid NoticeType string")
}

func NoticeTypePtr(v NoticeType) *NoticeType { return &v }

type ReportType int64

const (
	ReportType_NONE   ReportType = 0
	ReportType_TYPE_1 ReportType = 1
	ReportType_TYPE_2 ReportType = 2
	ReportType_TYPE_3 ReportType = 4
	ReportType_TYPE_4 ReportType = 8
	ReportType_TYPE_5 ReportType = 16
	ReportType_TYPE_6 ReportType = 32
	ReportType_TYPE_7 ReportType = 64
	ReportType_TYPE_8 ReportType = 128
)

func (p ReportType) String() string {
	switch p {
	case ReportType_NONE:
		return "ReportType_NONE"
	case ReportType_TYPE_1:
		return "ReportType_TYPE_1"
	case ReportType_TYPE_2:
		return "ReportType_TYPE_2"
	case ReportType_TYPE_3:
		return "ReportType_TYPE_3"
	case ReportType_TYPE_4:
		return "ReportType_TYPE_4"
	case ReportType_TYPE_5:
		return "ReportType_TYPE_5"
	case ReportType_TYPE_6:
		return "ReportType_TYPE_6"
	case ReportType_TYPE_7:
		return "ReportType_TYPE_7"
	case ReportType_TYPE_8:
		return "ReportType_TYPE_8"
	}
	return "<UNSET>"
}

func ReportTypeFromString(s string) (ReportType, error) {
	switch s {
	case "ReportType_NONE":
		return ReportType_NONE, nil
	case "ReportType_TYPE_1":
		return ReportType_TYPE_1, nil
	case "ReportType_TYPE_2":
		return ReportType_TYPE_2, nil
	case "ReportType_TYPE_3":
		return ReportType_TYPE_3, nil
	case "ReportType_TYPE_4":
		return ReportType_TYPE_4, nil
	case "ReportType_TYPE_5":
		return ReportType_TYPE_5, nil
	case "ReportType_TYPE_6":
		return ReportType_TYPE_6, nil
	case "ReportType_TYPE_7":
		return ReportType_TYPE_7, nil
	case "ReportType_TYPE_8":
		return ReportType_TYPE_8, nil
	}
	return ReportType(0), fmt.Errorf("not a valid ReportType string")
}

func ReportTypePtr(v ReportType) *ReportType { return &v }

type ErrInfo struct {
	ErrNo  Errno   `thrift:"err_no,1,required" json:"err_no"`
	ErrMsg *string `thrift:"err_msg,2" json:"err_msg"`
}

func NewErrInfo() *ErrInfo {
	return &ErrInfo{}
}

func (p *ErrInfo) GetErrNo() Errno {
	return p.ErrNo
}

var ErrInfo_ErrMsg_DEFAULT string

func (p *ErrInfo) GetErrMsg() string {
	if !p.IsSetErrMsg() {
		return ErrInfo_ErrMsg_DEFAULT
	}
	return *p.ErrMsg
}
func (p *ErrInfo) IsSetErrMsg() bool {
	return p.ErrMsg != nil
}

func (p *ErrInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ErrInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := Errno(v)
		p.ErrNo = temp
	}
	return nil
}

func (p *ErrInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ErrMsg = &v
	}
	return nil
}

func (p *ErrInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ErrInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ErrInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_no", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_no: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ErrNo)); err != nil {
		return fmt.Errorf("%T.err_no (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_no: %s", p, err)
	}
	return err
}

func (p *ErrInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrMsg() {
		if err := oprot.WriteFieldBegin("err_msg", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:err_msg: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ErrMsg)); err != nil {
			return fmt.Errorf("%T.err_msg (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:err_msg: %s", p, err)
		}
	}
	return err
}

func (p *ErrInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ErrInfo(%+v)", *p)
}

type TerminalInfo struct {
	MarketPlace *int32  `thrift:"market_place,1" json:"market_place"`
	Version     *int32  `thrift:"version,2" json:"version"`
	DeviceType  *int32  `thrift:"device_type,3" json:"device_type"`
	DeviceKey   *string `thrift:"device_key,4" json:"device_key"`
	Lang        *string `thrift:"lang,5" json:"lang"`
	AppType     *int32  `thrift:"app_type,6" json:"app_type"`
	SysVersion  *int32  `thrift:"sys_version,7" json:"sys_version"`
	Idfa        *string `thrift:"idfa,8" json:"idfa"`
}

func NewTerminalInfo() *TerminalInfo {
	return &TerminalInfo{}
}

var TerminalInfo_MarketPlace_DEFAULT int32

func (p *TerminalInfo) GetMarketPlace() int32 {
	if !p.IsSetMarketPlace() {
		return TerminalInfo_MarketPlace_DEFAULT
	}
	return *p.MarketPlace
}

var TerminalInfo_Version_DEFAULT int32

func (p *TerminalInfo) GetVersion() int32 {
	if !p.IsSetVersion() {
		return TerminalInfo_Version_DEFAULT
	}
	return *p.Version
}

var TerminalInfo_DeviceType_DEFAULT int32

func (p *TerminalInfo) GetDeviceType() int32 {
	if !p.IsSetDeviceType() {
		return TerminalInfo_DeviceType_DEFAULT
	}
	return *p.DeviceType
}

var TerminalInfo_DeviceKey_DEFAULT string

func (p *TerminalInfo) GetDeviceKey() string {
	if !p.IsSetDeviceKey() {
		return TerminalInfo_DeviceKey_DEFAULT
	}
	return *p.DeviceKey
}

var TerminalInfo_Lang_DEFAULT string

func (p *TerminalInfo) GetLang() string {
	if !p.IsSetLang() {
		return TerminalInfo_Lang_DEFAULT
	}
	return *p.Lang
}

var TerminalInfo_AppType_DEFAULT int32

func (p *TerminalInfo) GetAppType() int32 {
	if !p.IsSetAppType() {
		return TerminalInfo_AppType_DEFAULT
	}
	return *p.AppType
}

var TerminalInfo_SysVersion_DEFAULT int32

func (p *TerminalInfo) GetSysVersion() int32 {
	if !p.IsSetSysVersion() {
		return TerminalInfo_SysVersion_DEFAULT
	}
	return *p.SysVersion
}

var TerminalInfo_Idfa_DEFAULT string

func (p *TerminalInfo) GetIdfa() string {
	if !p.IsSetIdfa() {
		return TerminalInfo_Idfa_DEFAULT
	}
	return *p.Idfa
}
func (p *TerminalInfo) IsSetMarketPlace() bool {
	return p.MarketPlace != nil
}

func (p *TerminalInfo) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TerminalInfo) IsSetDeviceType() bool {
	return p.DeviceType != nil
}

func (p *TerminalInfo) IsSetDeviceKey() bool {
	return p.DeviceKey != nil
}

func (p *TerminalInfo) IsSetLang() bool {
	return p.Lang != nil
}

func (p *TerminalInfo) IsSetAppType() bool {
	return p.AppType != nil
}

func (p *TerminalInfo) IsSetSysVersion() bool {
	return p.SysVersion != nil
}

func (p *TerminalInfo) IsSetIdfa() bool {
	return p.Idfa != nil
}

func (p *TerminalInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TerminalInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MarketPlace = &v
	}
	return nil
}

func (p *TerminalInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Version = &v
	}
	return nil
}

func (p *TerminalInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DeviceType = &v
	}
	return nil
}

func (p *TerminalInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeviceKey = &v
	}
	return nil
}

func (p *TerminalInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Lang = &v
	}
	return nil
}

func (p *TerminalInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.AppType = &v
	}
	return nil
}

func (p *TerminalInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.SysVersion = &v
	}
	return nil
}

func (p *TerminalInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Idfa = &v
	}
	return nil
}

func (p *TerminalInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TerminalInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TerminalInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMarketPlace() {
		if err := oprot.WriteFieldBegin("market_place", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:market_place: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MarketPlace)); err != nil {
			return fmt.Errorf("%T.market_place (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:market_place: %s", p, err)
		}
	}
	return err
}

func (p *TerminalInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin("version", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:version: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Version)); err != nil {
			return fmt.Errorf("%T.version (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:version: %s", p, err)
		}
	}
	return err
}

func (p *TerminalInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeviceType() {
		if err := oprot.WriteFieldBegin("device_type", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:device_type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.DeviceType)); err != nil {
			return fmt.Errorf("%T.device_type (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:device_type: %s", p, err)
		}
	}
	return err
}

func (p *TerminalInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeviceKey() {
		if err := oprot.WriteFieldBegin("device_key", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:device_key: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.DeviceKey)); err != nil {
			return fmt.Errorf("%T.device_key (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:device_key: %s", p, err)
		}
	}
	return err
}

func (p *TerminalInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLang() {
		if err := oprot.WriteFieldBegin("lang", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:lang: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Lang)); err != nil {
			return fmt.Errorf("%T.lang (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:lang: %s", p, err)
		}
	}
	return err
}

func (p *TerminalInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppType() {
		if err := oprot.WriteFieldBegin("app_type", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:app_type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.AppType)); err != nil {
			return fmt.Errorf("%T.app_type (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:app_type: %s", p, err)
		}
	}
	return err
}

func (p *TerminalInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSysVersion() {
		if err := oprot.WriteFieldBegin("sys_version", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:sys_version: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.SysVersion)); err != nil {
			return fmt.Errorf("%T.sys_version (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:sys_version: %s", p, err)
		}
	}
	return err
}

func (p *TerminalInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdfa() {
		if err := oprot.WriteFieldBegin("idfa", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:idfa: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Idfa)); err != nil {
			return fmt.Errorf("%T.idfa (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:idfa: %s", p, err)
		}
	}
	return err
}

func (p *TerminalInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TerminalInfo(%+v)", *p)
}

type UserBaseInfo struct {
	Uid          int64   `thrift:"uid,1,required" json:"uid"`
	Nickname     string  `thrift:"nickname,2,required" json:"nickname"`
	LogoUrl      *string `thrift:"logo_url,3" json:"logo_url"`
	LabelName    *string `thrift:"label_name,4" json:"label_name"`
	LabelUrl     *string `thrift:"label_url,5" json:"label_url"`
	BlueLabelUrl *string `thrift:"blue_label_url,6" json:"blue_label_url"`
	HomepageUrl  *string `thrift:"homepage_url,7" json:"homepage_url"`
}

func NewUserBaseInfo() *UserBaseInfo {
	return &UserBaseInfo{}
}

func (p *UserBaseInfo) GetUid() int64 {
	return p.Uid
}

func (p *UserBaseInfo) GetNickname() string {
	return p.Nickname
}

var UserBaseInfo_LogoUrl_DEFAULT string

func (p *UserBaseInfo) GetLogoUrl() string {
	if !p.IsSetLogoUrl() {
		return UserBaseInfo_LogoUrl_DEFAULT
	}
	return *p.LogoUrl
}

var UserBaseInfo_LabelName_DEFAULT string

func (p *UserBaseInfo) GetLabelName() string {
	if !p.IsSetLabelName() {
		return UserBaseInfo_LabelName_DEFAULT
	}
	return *p.LabelName
}

var UserBaseInfo_LabelUrl_DEFAULT string

func (p *UserBaseInfo) GetLabelUrl() string {
	if !p.IsSetLabelUrl() {
		return UserBaseInfo_LabelUrl_DEFAULT
	}
	return *p.LabelUrl
}

var UserBaseInfo_BlueLabelUrl_DEFAULT string

func (p *UserBaseInfo) GetBlueLabelUrl() string {
	if !p.IsSetBlueLabelUrl() {
		return UserBaseInfo_BlueLabelUrl_DEFAULT
	}
	return *p.BlueLabelUrl
}

var UserBaseInfo_HomepageUrl_DEFAULT string

func (p *UserBaseInfo) GetHomepageUrl() string {
	if !p.IsSetHomepageUrl() {
		return UserBaseInfo_HomepageUrl_DEFAULT
	}
	return *p.HomepageUrl
}
func (p *UserBaseInfo) IsSetLogoUrl() bool {
	return p.LogoUrl != nil
}

func (p *UserBaseInfo) IsSetLabelName() bool {
	return p.LabelName != nil
}

func (p *UserBaseInfo) IsSetLabelUrl() bool {
	return p.LabelUrl != nil
}

func (p *UserBaseInfo) IsSetBlueLabelUrl() bool {
	return p.BlueLabelUrl != nil
}

func (p *UserBaseInfo) IsSetHomepageUrl() bool {
	return p.HomepageUrl != nil
}

func (p *UserBaseInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UserBaseInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *UserBaseInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Nickname = v
	}
	return nil
}

func (p *UserBaseInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.LogoUrl = &v
	}
	return nil
}

func (p *UserBaseInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.LabelName = &v
	}
	return nil
}

func (p *UserBaseInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.LabelUrl = &v
	}
	return nil
}

func (p *UserBaseInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.BlueLabelUrl = &v
	}
	return nil
}

func (p *UserBaseInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.HomepageUrl = &v
	}
	return nil
}

func (p *UserBaseInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserBaseInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UserBaseInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *UserBaseInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:nickname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Nickname)); err != nil {
		return fmt.Errorf("%T.nickname (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:nickname: %s", p, err)
	}
	return err
}

func (p *UserBaseInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogoUrl() {
		if err := oprot.WriteFieldBegin("logo_url", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:logo_url: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.LogoUrl)); err != nil {
			return fmt.Errorf("%T.logo_url (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:logo_url: %s", p, err)
		}
	}
	return err
}

func (p *UserBaseInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabelName() {
		if err := oprot.WriteFieldBegin("label_name", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:label_name: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.LabelName)); err != nil {
			return fmt.Errorf("%T.label_name (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:label_name: %s", p, err)
		}
	}
	return err
}

func (p *UserBaseInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabelUrl() {
		if err := oprot.WriteFieldBegin("label_url", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:label_url: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.LabelUrl)); err != nil {
			return fmt.Errorf("%T.label_url (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:label_url: %s", p, err)
		}
	}
	return err
}

func (p *UserBaseInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBlueLabelUrl() {
		if err := oprot.WriteFieldBegin("blue_label_url", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:blue_label_url: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.BlueLabelUrl)); err != nil {
			return fmt.Errorf("%T.blue_label_url (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:blue_label_url: %s", p, err)
		}
	}
	return err
}

func (p *UserBaseInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetHomepageUrl() {
		if err := oprot.WriteFieldBegin("homepage_url", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:homepage_url: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.HomepageUrl)); err != nil {
			return fmt.Errorf("%T.homepage_url (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:homepage_url: %s", p, err)
		}
	}
	return err
}

func (p *UserBaseInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserBaseInfo(%+v)", *p)
}

type ContentPicture struct {
	PicUrl        *string `thrift:"pic_url,1" json:"pic_url"`
	PicJumpSchema *string `thrift:"pic_jump_schema,2" json:"pic_jump_schema"`
}

func NewContentPicture() *ContentPicture {
	return &ContentPicture{}
}

var ContentPicture_PicUrl_DEFAULT string

func (p *ContentPicture) GetPicUrl() string {
	if !p.IsSetPicUrl() {
		return ContentPicture_PicUrl_DEFAULT
	}
	return *p.PicUrl
}

var ContentPicture_PicJumpSchema_DEFAULT string

func (p *ContentPicture) GetPicJumpSchema() string {
	if !p.IsSetPicJumpSchema() {
		return ContentPicture_PicJumpSchema_DEFAULT
	}
	return *p.PicJumpSchema
}
func (p *ContentPicture) IsSetPicUrl() bool {
	return p.PicUrl != nil
}

func (p *ContentPicture) IsSetPicJumpSchema() bool {
	return p.PicJumpSchema != nil
}

func (p *ContentPicture) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ContentPicture) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PicUrl = &v
	}
	return nil
}

func (p *ContentPicture) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PicJumpSchema = &v
	}
	return nil
}

func (p *ContentPicture) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContentPicture"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ContentPicture) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPicUrl() {
		if err := oprot.WriteFieldBegin("pic_url", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:pic_url: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.PicUrl)); err != nil {
			return fmt.Errorf("%T.pic_url (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:pic_url: %s", p, err)
		}
	}
	return err
}

func (p *ContentPicture) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPicJumpSchema() {
		if err := oprot.WriteFieldBegin("pic_jump_schema", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:pic_jump_schema: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.PicJumpSchema)); err != nil {
			return fmt.Errorf("%T.pic_jump_schema (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:pic_jump_schema: %s", p, err)
		}
	}
	return err
}

func (p *ContentPicture) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContentPicture(%+v)", *p)
}

type StyleCardMsg struct {
	Title         *string           `thrift:"title,1" json:"title"`
	MsgContent    *string           `thrift:"msg_content,2" json:"msg_content"`
	MsgPicture    []*ContentPicture `thrift:"msg_picture,3" json:"msg_picture"`
	MsgJumpSchema *string           `thrift:"msg_jump_schema,4" json:"msg_jump_schema"`
}

func NewStyleCardMsg() *StyleCardMsg {
	return &StyleCardMsg{}
}

var StyleCardMsg_Title_DEFAULT string

func (p *StyleCardMsg) GetTitle() string {
	if !p.IsSetTitle() {
		return StyleCardMsg_Title_DEFAULT
	}
	return *p.Title
}

var StyleCardMsg_MsgContent_DEFAULT string

func (p *StyleCardMsg) GetMsgContent() string {
	if !p.IsSetMsgContent() {
		return StyleCardMsg_MsgContent_DEFAULT
	}
	return *p.MsgContent
}

var StyleCardMsg_MsgPicture_DEFAULT []*ContentPicture

func (p *StyleCardMsg) GetMsgPicture() []*ContentPicture {
	return p.MsgPicture
}

var StyleCardMsg_MsgJumpSchema_DEFAULT string

func (p *StyleCardMsg) GetMsgJumpSchema() string {
	if !p.IsSetMsgJumpSchema() {
		return StyleCardMsg_MsgJumpSchema_DEFAULT
	}
	return *p.MsgJumpSchema
}
func (p *StyleCardMsg) IsSetTitle() bool {
	return p.Title != nil
}

func (p *StyleCardMsg) IsSetMsgContent() bool {
	return p.MsgContent != nil
}

func (p *StyleCardMsg) IsSetMsgPicture() bool {
	return p.MsgPicture != nil
}

func (p *StyleCardMsg) IsSetMsgJumpSchema() bool {
	return p.MsgJumpSchema != nil
}

func (p *StyleCardMsg) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StyleCardMsg) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *StyleCardMsg) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MsgContent = &v
	}
	return nil
}

func (p *StyleCardMsg) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ContentPicture, 0, size)
	p.MsgPicture = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &ContentPicture{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.MsgPicture = append(p.MsgPicture, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *StyleCardMsg) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MsgJumpSchema = &v
	}
	return nil
}

func (p *StyleCardMsg) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StyleCardMsg"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StyleCardMsg) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:title: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return fmt.Errorf("%T.title (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:title: %s", p, err)
		}
	}
	return err
}

func (p *StyleCardMsg) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgContent() {
		if err := oprot.WriteFieldBegin("msg_content", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:msg_content: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.MsgContent)); err != nil {
			return fmt.Errorf("%T.msg_content (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:msg_content: %s", p, err)
		}
	}
	return err
}

func (p *StyleCardMsg) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgPicture() {
		if err := oprot.WriteFieldBegin("msg_picture", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:msg_picture: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MsgPicture)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.MsgPicture {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:msg_picture: %s", p, err)
		}
	}
	return err
}

func (p *StyleCardMsg) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgJumpSchema() {
		if err := oprot.WriteFieldBegin("msg_jump_schema", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:msg_jump_schema: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.MsgJumpSchema)); err != nil {
			return fmt.Errorf("%T.msg_jump_schema (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:msg_jump_schema: %s", p, err)
		}
	}
	return err
}

func (p *StyleCardMsg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StyleCardMsg(%+v)", *p)
}

type StylePictureMsg struct {
	Title         *string           `thrift:"title,1" json:"title"`
	MsgPicture    []*ContentPicture `thrift:"msg_picture,2" json:"msg_picture"`
	MsgJumpSchema *string           `thrift:"msg_jump_schema,3" json:"msg_jump_schema"`
}

func NewStylePictureMsg() *StylePictureMsg {
	return &StylePictureMsg{}
}

var StylePictureMsg_Title_DEFAULT string

func (p *StylePictureMsg) GetTitle() string {
	if !p.IsSetTitle() {
		return StylePictureMsg_Title_DEFAULT
	}
	return *p.Title
}

var StylePictureMsg_MsgPicture_DEFAULT []*ContentPicture

func (p *StylePictureMsg) GetMsgPicture() []*ContentPicture {
	return p.MsgPicture
}

var StylePictureMsg_MsgJumpSchema_DEFAULT string

func (p *StylePictureMsg) GetMsgJumpSchema() string {
	if !p.IsSetMsgJumpSchema() {
		return StylePictureMsg_MsgJumpSchema_DEFAULT
	}
	return *p.MsgJumpSchema
}
func (p *StylePictureMsg) IsSetTitle() bool {
	return p.Title != nil
}

func (p *StylePictureMsg) IsSetMsgPicture() bool {
	return p.MsgPicture != nil
}

func (p *StylePictureMsg) IsSetMsgJumpSchema() bool {
	return p.MsgJumpSchema != nil
}

func (p *StylePictureMsg) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StylePictureMsg) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *StylePictureMsg) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ContentPicture, 0, size)
	p.MsgPicture = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &ContentPicture{}
		if err := _elem1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem1, err)
		}
		p.MsgPicture = append(p.MsgPicture, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *StylePictureMsg) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MsgJumpSchema = &v
	}
	return nil
}

func (p *StylePictureMsg) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StylePictureMsg"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StylePictureMsg) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:title: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return fmt.Errorf("%T.title (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:title: %s", p, err)
		}
	}
	return err
}

func (p *StylePictureMsg) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgPicture() {
		if err := oprot.WriteFieldBegin("msg_picture", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:msg_picture: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MsgPicture)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.MsgPicture {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:msg_picture: %s", p, err)
		}
	}
	return err
}

func (p *StylePictureMsg) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgJumpSchema() {
		if err := oprot.WriteFieldBegin("msg_jump_schema", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:msg_jump_schema: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.MsgJumpSchema)); err != nil {
			return fmt.Errorf("%T.msg_jump_schema (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:msg_jump_schema: %s", p, err)
		}
	}
	return err
}

func (p *StylePictureMsg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StylePictureMsg(%+v)", *p)
}

type StyleContentMsg struct {
	MsgContent *string `thrift:"msg_content,1" json:"msg_content"`
	ErrTips    *string `thrift:"err_tips,2" json:"err_tips"`
}

func NewStyleContentMsg() *StyleContentMsg {
	return &StyleContentMsg{}
}

var StyleContentMsg_MsgContent_DEFAULT string

func (p *StyleContentMsg) GetMsgContent() string {
	if !p.IsSetMsgContent() {
		return StyleContentMsg_MsgContent_DEFAULT
	}
	return *p.MsgContent
}

var StyleContentMsg_ErrTips_DEFAULT string

func (p *StyleContentMsg) GetErrTips() string {
	if !p.IsSetErrTips() {
		return StyleContentMsg_ErrTips_DEFAULT
	}
	return *p.ErrTips
}
func (p *StyleContentMsg) IsSetMsgContent() bool {
	return p.MsgContent != nil
}

func (p *StyleContentMsg) IsSetErrTips() bool {
	return p.ErrTips != nil
}

func (p *StyleContentMsg) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StyleContentMsg) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MsgContent = &v
	}
	return nil
}

func (p *StyleContentMsg) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ErrTips = &v
	}
	return nil
}

func (p *StyleContentMsg) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StyleContentMsg"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StyleContentMsg) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgContent() {
		if err := oprot.WriteFieldBegin("msg_content", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:msg_content: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.MsgContent)); err != nil {
			return fmt.Errorf("%T.msg_content (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:msg_content: %s", p, err)
		}
	}
	return err
}

func (p *StyleContentMsg) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrTips() {
		if err := oprot.WriteFieldBegin("err_tips", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:err_tips: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ErrTips)); err != nil {
			return fmt.Errorf("%T.err_tips (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:err_tips: %s", p, err)
		}
	}
	return err
}

func (p *StyleContentMsg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StyleContentMsg(%+v)", *p)
}

type StyleShareInfo struct {
	Title   string `thrift:"title,1,required" json:"title"`
	Msg     string `thrift:"msg,2,required" json:"msg"`
	IconUrl string `thrift:"icon_url,3,required" json:"icon_url"`
	JumpUrl string `thrift:"jump_url,4,required" json:"jump_url"`
}

func NewStyleShareInfo() *StyleShareInfo {
	return &StyleShareInfo{}
}

func (p *StyleShareInfo) GetTitle() string {
	return p.Title
}

func (p *StyleShareInfo) GetMsg() string {
	return p.Msg
}

func (p *StyleShareInfo) GetIconUrl() string {
	return p.IconUrl
}

func (p *StyleShareInfo) GetJumpUrl() string {
	return p.JumpUrl
}
func (p *StyleShareInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StyleShareInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *StyleShareInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *StyleShareInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.IconUrl = v
	}
	return nil
}

func (p *StyleShareInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.JumpUrl = v
	}
	return nil
}

func (p *StyleShareInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StyleShareInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StyleShareInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:title: %s", p, err)
	}
	return err
}

func (p *StyleShareInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:msg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return fmt.Errorf("%T.msg (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:msg: %s", p, err)
	}
	return err
}

func (p *StyleShareInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("icon_url", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:icon_url: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IconUrl)); err != nil {
		return fmt.Errorf("%T.icon_url (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:icon_url: %s", p, err)
	}
	return err
}

func (p *StyleShareInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("jump_url", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:jump_url: %s", p, err)
	}
	if err := oprot.WriteString(string(p.JumpUrl)); err != nil {
		return fmt.Errorf("%T.jump_url (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:jump_url: %s", p, err)
	}
	return err
}

func (p *StyleShareInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StyleShareInfo(%+v)", *p)
}

type PublishMsgNode struct {
	CardMsg    *StyleCardMsg    `thrift:"card_msg,1" json:"card_msg"`
	ContentMsg *StyleContentMsg `thrift:"content_msg,2" json:"content_msg"`
	PicMsg     *StylePictureMsg `thrift:"pic_msg,3" json:"pic_msg"`
}

func NewPublishMsgNode() *PublishMsgNode {
	return &PublishMsgNode{}
}

var PublishMsgNode_CardMsg_DEFAULT *StyleCardMsg

func (p *PublishMsgNode) GetCardMsg() *StyleCardMsg {
	if !p.IsSetCardMsg() {
		return PublishMsgNode_CardMsg_DEFAULT
	}
	return p.CardMsg
}

var PublishMsgNode_ContentMsg_DEFAULT *StyleContentMsg

func (p *PublishMsgNode) GetContentMsg() *StyleContentMsg {
	if !p.IsSetContentMsg() {
		return PublishMsgNode_ContentMsg_DEFAULT
	}
	return p.ContentMsg
}

var PublishMsgNode_PicMsg_DEFAULT *StylePictureMsg

func (p *PublishMsgNode) GetPicMsg() *StylePictureMsg {
	if !p.IsSetPicMsg() {
		return PublishMsgNode_PicMsg_DEFAULT
	}
	return p.PicMsg
}
func (p *PublishMsgNode) IsSetCardMsg() bool {
	return p.CardMsg != nil
}

func (p *PublishMsgNode) IsSetContentMsg() bool {
	return p.ContentMsg != nil
}

func (p *PublishMsgNode) IsSetPicMsg() bool {
	return p.PicMsg != nil
}

func (p *PublishMsgNode) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PublishMsgNode) ReadField1(iprot thrift.TProtocol) error {
	p.CardMsg = &StyleCardMsg{}
	if err := p.CardMsg.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CardMsg, err)
	}
	return nil
}

func (p *PublishMsgNode) ReadField2(iprot thrift.TProtocol) error {
	p.ContentMsg = &StyleContentMsg{}
	if err := p.ContentMsg.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ContentMsg, err)
	}
	return nil
}

func (p *PublishMsgNode) ReadField3(iprot thrift.TProtocol) error {
	p.PicMsg = &StylePictureMsg{}
	if err := p.PicMsg.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PicMsg, err)
	}
	return nil
}

func (p *PublishMsgNode) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PublishMsgNode"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PublishMsgNode) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCardMsg() {
		if err := oprot.WriteFieldBegin("card_msg", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:card_msg: %s", p, err)
		}
		if err := p.CardMsg.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CardMsg, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:card_msg: %s", p, err)
		}
	}
	return err
}

func (p *PublishMsgNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentMsg() {
		if err := oprot.WriteFieldBegin("content_msg", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:content_msg: %s", p, err)
		}
		if err := p.ContentMsg.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ContentMsg, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:content_msg: %s", p, err)
		}
	}
	return err
}

func (p *PublishMsgNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPicMsg() {
		if err := oprot.WriteFieldBegin("pic_msg", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:pic_msg: %s", p, err)
		}
		if err := p.PicMsg.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.PicMsg, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:pic_msg: %s", p, err)
		}
	}
	return err
}

func (p *PublishMsgNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublishMsgNode(%+v)", *p)
}

type MsgNode struct {
	Msgid      int64           `thrift:"msgid,1,required" json:"msgid"`
	SrcUid     int64           `thrift:"src_uid,2,required" json:"src_uid"`
	DesUid     int64           `thrift:"des_uid,3,required" json:"des_uid"`
	CreateTime int64           `thrift:"create_time,4,required" json:"create_time"`
	MsgZh      *PublishMsgNode `thrift:"msg_zh,5" json:"msg_zh"`
	MsgEn      *PublishMsgNode `thrift:"msg_en,6" json:"msg_en"`
	MsgHk      *PublishMsgNode `thrift:"msg_hk,7" json:"msg_hk"`
	MsgLevel   int32           `thrift:"msg_level,8" json:"msg_level"`
	MsgState   int32           `thrift:"msg_state,9" json:"msg_state"`
}

func NewMsgNode() *MsgNode {
	return &MsgNode{}
}

func (p *MsgNode) GetMsgid() int64 {
	return p.Msgid
}

func (p *MsgNode) GetSrcUid() int64 {
	return p.SrcUid
}

func (p *MsgNode) GetDesUid() int64 {
	return p.DesUid
}

func (p *MsgNode) GetCreateTime() int64 {
	return p.CreateTime
}

var MsgNode_MsgZh_DEFAULT *PublishMsgNode

func (p *MsgNode) GetMsgZh() *PublishMsgNode {
	if !p.IsSetMsgZh() {
		return MsgNode_MsgZh_DEFAULT
	}
	return p.MsgZh
}

var MsgNode_MsgEn_DEFAULT *PublishMsgNode

func (p *MsgNode) GetMsgEn() *PublishMsgNode {
	if !p.IsSetMsgEn() {
		return MsgNode_MsgEn_DEFAULT
	}
	return p.MsgEn
}

var MsgNode_MsgHk_DEFAULT *PublishMsgNode

func (p *MsgNode) GetMsgHk() *PublishMsgNode {
	if !p.IsSetMsgHk() {
		return MsgNode_MsgHk_DEFAULT
	}
	return p.MsgHk
}

var MsgNode_MsgLevel_DEFAULT int32 = 0

func (p *MsgNode) GetMsgLevel() int32 {
	return p.MsgLevel
}

var MsgNode_MsgState_DEFAULT int32 = 0

func (p *MsgNode) GetMsgState() int32 {
	return p.MsgState
}
func (p *MsgNode) IsSetMsgZh() bool {
	return p.MsgZh != nil
}

func (p *MsgNode) IsSetMsgEn() bool {
	return p.MsgEn != nil
}

func (p *MsgNode) IsSetMsgHk() bool {
	return p.MsgHk != nil
}

func (p *MsgNode) IsSetMsgLevel() bool {
	return p.MsgLevel != MsgNode_MsgLevel_DEFAULT
}

func (p *MsgNode) IsSetMsgState() bool {
	return p.MsgState != MsgNode_MsgState_DEFAULT
}

func (p *MsgNode) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MsgNode) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msgid = v
	}
	return nil
}

func (p *MsgNode) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SrcUid = v
	}
	return nil
}

func (p *MsgNode) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DesUid = v
	}
	return nil
}

func (p *MsgNode) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *MsgNode) ReadField5(iprot thrift.TProtocol) error {
	p.MsgZh = &PublishMsgNode{}
	if err := p.MsgZh.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MsgZh, err)
	}
	return nil
}

func (p *MsgNode) ReadField6(iprot thrift.TProtocol) error {
	p.MsgEn = &PublishMsgNode{}
	if err := p.MsgEn.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MsgEn, err)
	}
	return nil
}

func (p *MsgNode) ReadField7(iprot thrift.TProtocol) error {
	p.MsgHk = &PublishMsgNode{}
	if err := p.MsgHk.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MsgHk, err)
	}
	return nil
}

func (p *MsgNode) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.MsgLevel = v
	}
	return nil
}

func (p *MsgNode) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.MsgState = v
	}
	return nil
}

func (p *MsgNode) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MsgNode"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MsgNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msgid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Msgid)); err != nil {
		return fmt.Errorf("%T.msgid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msgid: %s", p, err)
	}
	return err
}

func (p *MsgNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("src_uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:src_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SrcUid)); err != nil {
		return fmt.Errorf("%T.src_uid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:src_uid: %s", p, err)
	}
	return err
}

func (p *MsgNode) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("des_uid", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:des_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.DesUid)); err != nil {
		return fmt.Errorf("%T.des_uid (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:des_uid: %s", p, err)
	}
	return err
}

func (p *MsgNode) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_time", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:create_time: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.create_time (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:create_time: %s", p, err)
	}
	return err
}

func (p *MsgNode) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgZh() {
		if err := oprot.WriteFieldBegin("msg_zh", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:msg_zh: %s", p, err)
		}
		if err := p.MsgZh.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MsgZh, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:msg_zh: %s", p, err)
		}
	}
	return err
}

func (p *MsgNode) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgEn() {
		if err := oprot.WriteFieldBegin("msg_en", thrift.STRUCT, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:msg_en: %s", p, err)
		}
		if err := p.MsgEn.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MsgEn, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:msg_en: %s", p, err)
		}
	}
	return err
}

func (p *MsgNode) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgHk() {
		if err := oprot.WriteFieldBegin("msg_hk", thrift.STRUCT, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:msg_hk: %s", p, err)
		}
		if err := p.MsgHk.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MsgHk, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:msg_hk: %s", p, err)
		}
	}
	return err
}

func (p *MsgNode) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgLevel() {
		if err := oprot.WriteFieldBegin("msg_level", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:msg_level: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MsgLevel)); err != nil {
			return fmt.Errorf("%T.msg_level (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:msg_level: %s", p, err)
		}
	}
	return err
}

func (p *MsgNode) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgState() {
		if err := oprot.WriteFieldBegin("msg_state", thrift.I32, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:msg_state: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MsgState)); err != nil {
			return fmt.Errorf("%T.msg_state (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:msg_state: %s", p, err)
		}
	}
	return err
}

func (p *MsgNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MsgNode(%+v)", *p)
}

type MsgListNode struct {
	UserBaseInfo *UserBaseInfo `thrift:"user_base_info,1,required" json:"user_base_info"`
	Msg          *MsgNode      `thrift:"msg,2" json:"msg"`
	UnreadTotal  int32         `thrift:"unread_total,3" json:"unread_total"`
	UnreadStrong int32         `thrift:"unread_strong,4" json:"unread_strong"`
	Extra        *string       `thrift:"extra,5" json:"extra"`
	IsBlock      bool          `thrift:"is_block,6" json:"is_block"`
	TypeA1       *int32        `thrift:"type,7" json:"type"`
}

func NewMsgListNode() *MsgListNode {
	return &MsgListNode{}
}

var MsgListNode_UserBaseInfo_DEFAULT *UserBaseInfo

func (p *MsgListNode) GetUserBaseInfo() *UserBaseInfo {
	if !p.IsSetUserBaseInfo() {
		return MsgListNode_UserBaseInfo_DEFAULT
	}
	return p.UserBaseInfo
}

var MsgListNode_Msg_DEFAULT *MsgNode

func (p *MsgListNode) GetMsg() *MsgNode {
	if !p.IsSetMsg() {
		return MsgListNode_Msg_DEFAULT
	}
	return p.Msg
}

var MsgListNode_UnreadTotal_DEFAULT int32 = 0

func (p *MsgListNode) GetUnreadTotal() int32 {
	return p.UnreadTotal
}

var MsgListNode_UnreadStrong_DEFAULT int32 = 0

func (p *MsgListNode) GetUnreadStrong() int32 {
	return p.UnreadStrong
}

var MsgListNode_Extra_DEFAULT string

func (p *MsgListNode) GetExtra() string {
	if !p.IsSetExtra() {
		return MsgListNode_Extra_DEFAULT
	}
	return *p.Extra
}

var MsgListNode_IsBlock_DEFAULT bool = false

func (p *MsgListNode) GetIsBlock() bool {
	return p.IsBlock
}

var MsgListNode_TypeA1_DEFAULT int32

func (p *MsgListNode) GetTypeA1() int32 {
	if !p.IsSetTypeA1() {
		return MsgListNode_TypeA1_DEFAULT
	}
	return *p.TypeA1
}
func (p *MsgListNode) IsSetUserBaseInfo() bool {
	return p.UserBaseInfo != nil
}

func (p *MsgListNode) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *MsgListNode) IsSetUnreadTotal() bool {
	return p.UnreadTotal != MsgListNode_UnreadTotal_DEFAULT
}

func (p *MsgListNode) IsSetUnreadStrong() bool {
	return p.UnreadStrong != MsgListNode_UnreadStrong_DEFAULT
}

func (p *MsgListNode) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *MsgListNode) IsSetIsBlock() bool {
	return p.IsBlock != MsgListNode_IsBlock_DEFAULT
}

func (p *MsgListNode) IsSetTypeA1() bool {
	return p.TypeA1 != nil
}

func (p *MsgListNode) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MsgListNode) ReadField1(iprot thrift.TProtocol) error {
	p.UserBaseInfo = &UserBaseInfo{}
	if err := p.UserBaseInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserBaseInfo, err)
	}
	return nil
}

func (p *MsgListNode) ReadField2(iprot thrift.TProtocol) error {
	p.Msg = &MsgNode{}
	if err := p.Msg.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Msg, err)
	}
	return nil
}

func (p *MsgListNode) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UnreadTotal = v
	}
	return nil
}

func (p *MsgListNode) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UnreadStrong = v
	}
	return nil
}

func (p *MsgListNode) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Extra = &v
	}
	return nil
}

func (p *MsgListNode) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.IsBlock = v
	}
	return nil
}

func (p *MsgListNode) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.TypeA1 = &v
	}
	return nil
}

func (p *MsgListNode) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MsgListNode"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MsgListNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_base_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:user_base_info: %s", p, err)
	}
	if err := p.UserBaseInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.UserBaseInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:user_base_info: %s", p, err)
	}
	return err
}

func (p *MsgListNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err := oprot.WriteFieldBegin("msg", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:msg: %s", p, err)
		}
		if err := p.Msg.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Msg, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:msg: %s", p, err)
		}
	}
	return err
}

func (p *MsgListNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnreadTotal() {
		if err := oprot.WriteFieldBegin("unread_total", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:unread_total: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UnreadTotal)); err != nil {
			return fmt.Errorf("%T.unread_total (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:unread_total: %s", p, err)
		}
	}
	return err
}

func (p *MsgListNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnreadStrong() {
		if err := oprot.WriteFieldBegin("unread_strong", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:unread_strong: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UnreadStrong)); err != nil {
			return fmt.Errorf("%T.unread_strong (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:unread_strong: %s", p, err)
		}
	}
	return err
}

func (p *MsgListNode) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err := oprot.WriteFieldBegin("extra", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:extra: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Extra)); err != nil {
			return fmt.Errorf("%T.extra (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:extra: %s", p, err)
		}
	}
	return err
}

func (p *MsgListNode) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsBlock() {
		if err := oprot.WriteFieldBegin("is_block", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:is_block: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IsBlock)); err != nil {
			return fmt.Errorf("%T.is_block (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:is_block: %s", p, err)
		}
	}
	return err
}

func (p *MsgListNode) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypeA1() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.TypeA1)); err != nil {
			return fmt.Errorf("%T.type (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:type: %s", p, err)
		}
	}
	return err
}

func (p *MsgListNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MsgListNode(%+v)", *p)
}

type QueryMsgListReq struct {
	Uid int64 `thrift:"uid,1,required" json:"uid"`
	// unused fields # 2 to 100
	TerminalInfo *TerminalInfo `thrift:"terminal_info,101" json:"terminal_info"`
}

func NewQueryMsgListReq() *QueryMsgListReq {
	return &QueryMsgListReq{}
}

func (p *QueryMsgListReq) GetUid() int64 {
	return p.Uid
}

var QueryMsgListReq_TerminalInfo_DEFAULT *TerminalInfo

func (p *QueryMsgListReq) GetTerminalInfo() *TerminalInfo {
	if !p.IsSetTerminalInfo() {
		return QueryMsgListReq_TerminalInfo_DEFAULT
	}
	return p.TerminalInfo
}
func (p *QueryMsgListReq) IsSetTerminalInfo() bool {
	return p.TerminalInfo != nil
}

func (p *QueryMsgListReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 101:
			if err := p.ReadField101(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryMsgListReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *QueryMsgListReq) ReadField101(iprot thrift.TProtocol) error {
	p.TerminalInfo = &TerminalInfo{}
	if err := p.TerminalInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TerminalInfo, err)
	}
	return nil
}

func (p *QueryMsgListReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryMsgListReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField101(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryMsgListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *QueryMsgListReq) writeField101(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("terminal_info", thrift.STRUCT, 101); err != nil {
		return fmt.Errorf("%T write field begin error 101:terminal_info: %s", p, err)
	}
	if err := p.TerminalInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TerminalInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 101:terminal_info: %s", p, err)
	}
	return err
}

func (p *QueryMsgListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryMsgListReq(%+v)", *p)
}

type QueryMsgCountReturn struct {
	ErrInfo       *ErrInfo `thrift:"err_info,1,required" json:"err_info"`
	UnreadTotal   int32    `thrift:"unread_total,2" json:"unread_total"`
	UnreadStrong  int32    `thrift:"unread_strong,3" json:"unread_strong"`
	UnreadDynamic int32    `thrift:"unread_dynamic,4" json:"unread_dynamic"`
}

func NewQueryMsgCountReturn() *QueryMsgCountReturn {
	return &QueryMsgCountReturn{}
}

var QueryMsgCountReturn_ErrInfo_DEFAULT *ErrInfo

func (p *QueryMsgCountReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return QueryMsgCountReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var QueryMsgCountReturn_UnreadTotal_DEFAULT int32 = 0

func (p *QueryMsgCountReturn) GetUnreadTotal() int32 {
	return p.UnreadTotal
}

var QueryMsgCountReturn_UnreadStrong_DEFAULT int32 = 0

func (p *QueryMsgCountReturn) GetUnreadStrong() int32 {
	return p.UnreadStrong
}

var QueryMsgCountReturn_UnreadDynamic_DEFAULT int32 = 0

func (p *QueryMsgCountReturn) GetUnreadDynamic() int32 {
	return p.UnreadDynamic
}
func (p *QueryMsgCountReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *QueryMsgCountReturn) IsSetUnreadTotal() bool {
	return p.UnreadTotal != QueryMsgCountReturn_UnreadTotal_DEFAULT
}

func (p *QueryMsgCountReturn) IsSetUnreadStrong() bool {
	return p.UnreadStrong != QueryMsgCountReturn_UnreadStrong_DEFAULT
}

func (p *QueryMsgCountReturn) IsSetUnreadDynamic() bool {
	return p.UnreadDynamic != QueryMsgCountReturn_UnreadDynamic_DEFAULT
}

func (p *QueryMsgCountReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryMsgCountReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *QueryMsgCountReturn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UnreadTotal = v
	}
	return nil
}

func (p *QueryMsgCountReturn) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UnreadStrong = v
	}
	return nil
}

func (p *QueryMsgCountReturn) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UnreadDynamic = v
	}
	return nil
}

func (p *QueryMsgCountReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryMsgCountReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryMsgCountReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *QueryMsgCountReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnreadTotal() {
		if err := oprot.WriteFieldBegin("unread_total", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:unread_total: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UnreadTotal)); err != nil {
			return fmt.Errorf("%T.unread_total (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:unread_total: %s", p, err)
		}
	}
	return err
}

func (p *QueryMsgCountReturn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnreadStrong() {
		if err := oprot.WriteFieldBegin("unread_strong", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:unread_strong: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UnreadStrong)); err != nil {
			return fmt.Errorf("%T.unread_strong (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:unread_strong: %s", p, err)
		}
	}
	return err
}

func (p *QueryMsgCountReturn) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnreadDynamic() {
		if err := oprot.WriteFieldBegin("unread_dynamic", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:unread_dynamic: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UnreadDynamic)); err != nil {
			return fmt.Errorf("%T.unread_dynamic (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:unread_dynamic: %s", p, err)
		}
	}
	return err
}

func (p *QueryMsgCountReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryMsgCountReturn(%+v)", *p)
}

type QueryMsgListReturn struct {
	ErrInfo     *ErrInfo       `thrift:"err_info,1,required" json:"err_info"`
	MsgNodeList []*MsgListNode `thrift:"msg_node_list,2" json:"msg_node_list"`
}

func NewQueryMsgListReturn() *QueryMsgListReturn {
	return &QueryMsgListReturn{}
}

var QueryMsgListReturn_ErrInfo_DEFAULT *ErrInfo

func (p *QueryMsgListReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return QueryMsgListReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var QueryMsgListReturn_MsgNodeList_DEFAULT []*MsgListNode

func (p *QueryMsgListReturn) GetMsgNodeList() []*MsgListNode {
	return p.MsgNodeList
}
func (p *QueryMsgListReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *QueryMsgListReturn) IsSetMsgNodeList() bool {
	return p.MsgNodeList != nil
}

func (p *QueryMsgListReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryMsgListReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *QueryMsgListReturn) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*MsgListNode, 0, size)
	p.MsgNodeList = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &MsgListNode{}
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2, err)
		}
		p.MsgNodeList = append(p.MsgNodeList, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *QueryMsgListReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryMsgListReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryMsgListReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *QueryMsgListReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgNodeList() {
		if err := oprot.WriteFieldBegin("msg_node_list", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:msg_node_list: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MsgNodeList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.MsgNodeList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:msg_node_list: %s", p, err)
		}
	}
	return err
}

func (p *QueryMsgListReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryMsgListReturn(%+v)", *p)
}

type QueryUserMsgReq struct {
	Uid       int64 `thrift:"uid,1,required" json:"uid"`
	SrcUid    int64 `thrift:"src_uid,2,required" json:"src_uid"`
	LastMsgid int64 `thrift:"last_msgid,3" json:"last_msgid"`
	MsgNum    int64 `thrift:"msg_num,4" json:"msg_num"`
	IsNew     bool  `thrift:"is_new,5" json:"is_new"`
	// unused fields # 6 to 100
	TerminalInfo *TerminalInfo `thrift:"terminal_info,101" json:"terminal_info"`
}

func NewQueryUserMsgReq() *QueryUserMsgReq {
	return &QueryUserMsgReq{
		MsgNum: 15,
	}
}

func (p *QueryUserMsgReq) GetUid() int64 {
	return p.Uid
}

func (p *QueryUserMsgReq) GetSrcUid() int64 {
	return p.SrcUid
}

var QueryUserMsgReq_LastMsgid_DEFAULT int64 = 0

func (p *QueryUserMsgReq) GetLastMsgid() int64 {
	return p.LastMsgid
}

var QueryUserMsgReq_MsgNum_DEFAULT int64 = 15

func (p *QueryUserMsgReq) GetMsgNum() int64 {
	return p.MsgNum
}

var QueryUserMsgReq_IsNew_DEFAULT bool = false

func (p *QueryUserMsgReq) GetIsNew() bool {
	return p.IsNew
}

var QueryUserMsgReq_TerminalInfo_DEFAULT *TerminalInfo

func (p *QueryUserMsgReq) GetTerminalInfo() *TerminalInfo {
	if !p.IsSetTerminalInfo() {
		return QueryUserMsgReq_TerminalInfo_DEFAULT
	}
	return p.TerminalInfo
}
func (p *QueryUserMsgReq) IsSetLastMsgid() bool {
	return p.LastMsgid != QueryUserMsgReq_LastMsgid_DEFAULT
}

func (p *QueryUserMsgReq) IsSetMsgNum() bool {
	return p.MsgNum != QueryUserMsgReq_MsgNum_DEFAULT
}

func (p *QueryUserMsgReq) IsSetIsNew() bool {
	return p.IsNew != QueryUserMsgReq_IsNew_DEFAULT
}

func (p *QueryUserMsgReq) IsSetTerminalInfo() bool {
	return p.TerminalInfo != nil
}

func (p *QueryUserMsgReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 101:
			if err := p.ReadField101(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryUserMsgReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *QueryUserMsgReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SrcUid = v
	}
	return nil
}

func (p *QueryUserMsgReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.LastMsgid = v
	}
	return nil
}

func (p *QueryUserMsgReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MsgNum = v
	}
	return nil
}

func (p *QueryUserMsgReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.IsNew = v
	}
	return nil
}

func (p *QueryUserMsgReq) ReadField101(iprot thrift.TProtocol) error {
	p.TerminalInfo = &TerminalInfo{}
	if err := p.TerminalInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TerminalInfo, err)
	}
	return nil
}

func (p *QueryUserMsgReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryUserMsgReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField101(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryUserMsgReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *QueryUserMsgReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("src_uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:src_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SrcUid)); err != nil {
		return fmt.Errorf("%T.src_uid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:src_uid: %s", p, err)
	}
	return err
}

func (p *QueryUserMsgReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastMsgid() {
		if err := oprot.WriteFieldBegin("last_msgid", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:last_msgid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.LastMsgid)); err != nil {
			return fmt.Errorf("%T.last_msgid (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:last_msgid: %s", p, err)
		}
	}
	return err
}

func (p *QueryUserMsgReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgNum() {
		if err := oprot.WriteFieldBegin("msg_num", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:msg_num: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.MsgNum)); err != nil {
			return fmt.Errorf("%T.msg_num (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:msg_num: %s", p, err)
		}
	}
	return err
}

func (p *QueryUserMsgReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsNew() {
		if err := oprot.WriteFieldBegin("is_new", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:is_new: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IsNew)); err != nil {
			return fmt.Errorf("%T.is_new (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:is_new: %s", p, err)
		}
	}
	return err
}

func (p *QueryUserMsgReq) writeField101(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("terminal_info", thrift.STRUCT, 101); err != nil {
		return fmt.Errorf("%T write field begin error 101:terminal_info: %s", p, err)
	}
	if err := p.TerminalInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TerminalInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 101:terminal_info: %s", p, err)
	}
	return err
}

func (p *QueryUserMsgReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserMsgReq(%+v)", *p)
}

type QueryUserMsgReturn struct {
	ErrInfo      *ErrInfo       `thrift:"err_info,1,required" json:"err_info"`
	UserBaseInfo *UserBaseInfo  `thrift:"user_base_info,2" json:"user_base_info"`
	MsgList      []*MsgListNode `thrift:"msg_list,3" json:"msg_list"`
	HasMore      bool           `thrift:"has_more,4" json:"has_more"`
	IsBlock      bool           `thrift:"is_block,5" json:"is_block"`
}

func NewQueryUserMsgReturn() *QueryUserMsgReturn {
	return &QueryUserMsgReturn{}
}

var QueryUserMsgReturn_ErrInfo_DEFAULT *ErrInfo

func (p *QueryUserMsgReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return QueryUserMsgReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var QueryUserMsgReturn_UserBaseInfo_DEFAULT *UserBaseInfo

func (p *QueryUserMsgReturn) GetUserBaseInfo() *UserBaseInfo {
	if !p.IsSetUserBaseInfo() {
		return QueryUserMsgReturn_UserBaseInfo_DEFAULT
	}
	return p.UserBaseInfo
}

var QueryUserMsgReturn_MsgList_DEFAULT []*MsgListNode

func (p *QueryUserMsgReturn) GetMsgList() []*MsgListNode {
	return p.MsgList
}

var QueryUserMsgReturn_HasMore_DEFAULT bool = false

func (p *QueryUserMsgReturn) GetHasMore() bool {
	return p.HasMore
}

var QueryUserMsgReturn_IsBlock_DEFAULT bool = false

func (p *QueryUserMsgReturn) GetIsBlock() bool {
	return p.IsBlock
}
func (p *QueryUserMsgReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *QueryUserMsgReturn) IsSetUserBaseInfo() bool {
	return p.UserBaseInfo != nil
}

func (p *QueryUserMsgReturn) IsSetMsgList() bool {
	return p.MsgList != nil
}

func (p *QueryUserMsgReturn) IsSetHasMore() bool {
	return p.HasMore != QueryUserMsgReturn_HasMore_DEFAULT
}

func (p *QueryUserMsgReturn) IsSetIsBlock() bool {
	return p.IsBlock != QueryUserMsgReturn_IsBlock_DEFAULT
}

func (p *QueryUserMsgReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryUserMsgReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *QueryUserMsgReturn) ReadField2(iprot thrift.TProtocol) error {
	p.UserBaseInfo = &UserBaseInfo{}
	if err := p.UserBaseInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserBaseInfo, err)
	}
	return nil
}

func (p *QueryUserMsgReturn) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*MsgListNode, 0, size)
	p.MsgList = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &MsgListNode{}
		if err := _elem3.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem3, err)
		}
		p.MsgList = append(p.MsgList, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *QueryUserMsgReturn) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.HasMore = v
	}
	return nil
}

func (p *QueryUserMsgReturn) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.IsBlock = v
	}
	return nil
}

func (p *QueryUserMsgReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryUserMsgReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryUserMsgReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *QueryUserMsgReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserBaseInfo() {
		if err := oprot.WriteFieldBegin("user_base_info", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:user_base_info: %s", p, err)
		}
		if err := p.UserBaseInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserBaseInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:user_base_info: %s", p, err)
		}
	}
	return err
}

func (p *QueryUserMsgReturn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgList() {
		if err := oprot.WriteFieldBegin("msg_list", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:msg_list: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MsgList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.MsgList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:msg_list: %s", p, err)
		}
	}
	return err
}

func (p *QueryUserMsgReturn) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasMore() {
		if err := oprot.WriteFieldBegin("has_more", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:has_more: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.HasMore)); err != nil {
			return fmt.Errorf("%T.has_more (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:has_more: %s", p, err)
		}
	}
	return err
}

func (p *QueryUserMsgReturn) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsBlock() {
		if err := oprot.WriteFieldBegin("is_block", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:is_block: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IsBlock)); err != nil {
			return fmt.Errorf("%T.is_block (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:is_block: %s", p, err)
		}
	}
	return err
}

func (p *QueryUserMsgReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserMsgReturn(%+v)", *p)
}

type SendUserMsgReq struct {
	Msg       *MsgNode `thrift:"msg,1,required" json:"msg"`
	TempMsgid *int64   `thrift:"temp_msgid,2" json:"temp_msgid"`
	// unused fields # 3 to 100
	TerminalInfo *TerminalInfo `thrift:"terminal_info,101" json:"terminal_info"`
}

func NewSendUserMsgReq() *SendUserMsgReq {
	return &SendUserMsgReq{}
}

var SendUserMsgReq_Msg_DEFAULT *MsgNode

func (p *SendUserMsgReq) GetMsg() *MsgNode {
	if !p.IsSetMsg() {
		return SendUserMsgReq_Msg_DEFAULT
	}
	return p.Msg
}

var SendUserMsgReq_TempMsgid_DEFAULT int64

func (p *SendUserMsgReq) GetTempMsgid() int64 {
	if !p.IsSetTempMsgid() {
		return SendUserMsgReq_TempMsgid_DEFAULT
	}
	return *p.TempMsgid
}

var SendUserMsgReq_TerminalInfo_DEFAULT *TerminalInfo

func (p *SendUserMsgReq) GetTerminalInfo() *TerminalInfo {
	if !p.IsSetTerminalInfo() {
		return SendUserMsgReq_TerminalInfo_DEFAULT
	}
	return p.TerminalInfo
}
func (p *SendUserMsgReq) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *SendUserMsgReq) IsSetTempMsgid() bool {
	return p.TempMsgid != nil
}

func (p *SendUserMsgReq) IsSetTerminalInfo() bool {
	return p.TerminalInfo != nil
}

func (p *SendUserMsgReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 101:
			if err := p.ReadField101(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendUserMsgReq) ReadField1(iprot thrift.TProtocol) error {
	p.Msg = &MsgNode{}
	if err := p.Msg.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Msg, err)
	}
	return nil
}

func (p *SendUserMsgReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TempMsgid = &v
	}
	return nil
}

func (p *SendUserMsgReq) ReadField101(iprot thrift.TProtocol) error {
	p.TerminalInfo = &TerminalInfo{}
	if err := p.TerminalInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TerminalInfo, err)
	}
	return nil
}

func (p *SendUserMsgReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SendUserMsgReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField101(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendUserMsgReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msg: %s", p, err)
	}
	if err := p.Msg.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Msg, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msg: %s", p, err)
	}
	return err
}

func (p *SendUserMsgReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTempMsgid() {
		if err := oprot.WriteFieldBegin("temp_msgid", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:temp_msgid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TempMsgid)); err != nil {
			return fmt.Errorf("%T.temp_msgid (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:temp_msgid: %s", p, err)
		}
	}
	return err
}

func (p *SendUserMsgReq) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetTerminalInfo() {
		if err := oprot.WriteFieldBegin("terminal_info", thrift.STRUCT, 101); err != nil {
			return fmt.Errorf("%T write field begin error 101:terminal_info: %s", p, err)
		}
		if err := p.TerminalInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TerminalInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 101:terminal_info: %s", p, err)
		}
	}
	return err
}

func (p *SendUserMsgReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendUserMsgReq(%+v)", *p)
}

type SendUserMsgReturn struct {
	ErrInfo   *ErrInfo `thrift:"err_info,1,required" json:"err_info"`
	Msgid     *int64   `thrift:"msgid,2" json:"msgid"`
	Desc      *string  `thrift:"desc,3" json:"desc"`
	TempMsgid *int64   `thrift:"temp_msgid,4" json:"temp_msgid"`
}

func NewSendUserMsgReturn() *SendUserMsgReturn {
	return &SendUserMsgReturn{}
}

var SendUserMsgReturn_ErrInfo_DEFAULT *ErrInfo

func (p *SendUserMsgReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return SendUserMsgReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var SendUserMsgReturn_Msgid_DEFAULT int64

func (p *SendUserMsgReturn) GetMsgid() int64 {
	if !p.IsSetMsgid() {
		return SendUserMsgReturn_Msgid_DEFAULT
	}
	return *p.Msgid
}

var SendUserMsgReturn_Desc_DEFAULT string

func (p *SendUserMsgReturn) GetDesc() string {
	if !p.IsSetDesc() {
		return SendUserMsgReturn_Desc_DEFAULT
	}
	return *p.Desc
}

var SendUserMsgReturn_TempMsgid_DEFAULT int64

func (p *SendUserMsgReturn) GetTempMsgid() int64 {
	if !p.IsSetTempMsgid() {
		return SendUserMsgReturn_TempMsgid_DEFAULT
	}
	return *p.TempMsgid
}
func (p *SendUserMsgReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *SendUserMsgReturn) IsSetMsgid() bool {
	return p.Msgid != nil
}

func (p *SendUserMsgReturn) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *SendUserMsgReturn) IsSetTempMsgid() bool {
	return p.TempMsgid != nil
}

func (p *SendUserMsgReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendUserMsgReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *SendUserMsgReturn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Msgid = &v
	}
	return nil
}

func (p *SendUserMsgReturn) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *SendUserMsgReturn) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.TempMsgid = &v
	}
	return nil
}

func (p *SendUserMsgReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SendUserMsgReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendUserMsgReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *SendUserMsgReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgid() {
		if err := oprot.WriteFieldBegin("msgid", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:msgid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Msgid)); err != nil {
			return fmt.Errorf("%T.msgid (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:msgid: %s", p, err)
		}
	}
	return err
}

func (p *SendUserMsgReturn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:desc: %s", p, err)
		}
	}
	return err
}

func (p *SendUserMsgReturn) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTempMsgid() {
		if err := oprot.WriteFieldBegin("temp_msgid", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:temp_msgid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TempMsgid)); err != nil {
			return fmt.Errorf("%T.temp_msgid (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:temp_msgid: %s", p, err)
		}
	}
	return err
}

func (p *SendUserMsgReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendUserMsgReturn(%+v)", *p)
}

type PushBody struct {
	Brief     *string `thrift:"brief,1" json:"brief"`
	Title     *string `thrift:"title,2" json:"title"`
	Content   *string `thrift:"content,3" json:"content"`
	ExtraData *string `thrift:"extra_data,4" json:"extra_data"`
	Lang      string  `thrift:"lang,5" json:"lang"`
}

func NewPushBody() *PushBody {
	return &PushBody{
		Lang: "zh",
	}
}

var PushBody_Brief_DEFAULT string

func (p *PushBody) GetBrief() string {
	if !p.IsSetBrief() {
		return PushBody_Brief_DEFAULT
	}
	return *p.Brief
}

var PushBody_Title_DEFAULT string

func (p *PushBody) GetTitle() string {
	if !p.IsSetTitle() {
		return PushBody_Title_DEFAULT
	}
	return *p.Title
}

var PushBody_Content_DEFAULT string

func (p *PushBody) GetContent() string {
	if !p.IsSetContent() {
		return PushBody_Content_DEFAULT
	}
	return *p.Content
}

var PushBody_ExtraData_DEFAULT string

func (p *PushBody) GetExtraData() string {
	if !p.IsSetExtraData() {
		return PushBody_ExtraData_DEFAULT
	}
	return *p.ExtraData
}

var PushBody_Lang_DEFAULT string = "zh"

func (p *PushBody) GetLang() string {
	return p.Lang
}
func (p *PushBody) IsSetBrief() bool {
	return p.Brief != nil
}

func (p *PushBody) IsSetTitle() bool {
	return p.Title != nil
}

func (p *PushBody) IsSetContent() bool {
	return p.Content != nil
}

func (p *PushBody) IsSetExtraData() bool {
	return p.ExtraData != nil
}

func (p *PushBody) IsSetLang() bool {
	return p.Lang != PushBody_Lang_DEFAULT
}

func (p *PushBody) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PushBody) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Brief = &v
	}
	return nil
}

func (p *PushBody) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *PushBody) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Content = &v
	}
	return nil
}

func (p *PushBody) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ExtraData = &v
	}
	return nil
}

func (p *PushBody) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Lang = v
	}
	return nil
}

func (p *PushBody) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PushBody"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PushBody) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrief() {
		if err := oprot.WriteFieldBegin("brief", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:brief: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Brief)); err != nil {
			return fmt.Errorf("%T.brief (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:brief: %s", p, err)
		}
	}
	return err
}

func (p *PushBody) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:title: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return fmt.Errorf("%T.title (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:title: %s", p, err)
		}
	}
	return err
}

func (p *PushBody) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err := oprot.WriteFieldBegin("content", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:content: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Content)); err != nil {
			return fmt.Errorf("%T.content (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:content: %s", p, err)
		}
	}
	return err
}

func (p *PushBody) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraData() {
		if err := oprot.WriteFieldBegin("extra_data", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:extra_data: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ExtraData)); err != nil {
			return fmt.Errorf("%T.extra_data (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:extra_data: %s", p, err)
		}
	}
	return err
}

func (p *PushBody) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLang() {
		if err := oprot.WriteFieldBegin("lang", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:lang: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Lang)); err != nil {
			return fmt.Errorf("%T.lang (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:lang: %s", p, err)
		}
	}
	return err
}

func (p *PushBody) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushBody(%+v)", *p)
}

type PushUserNoticeMsgReq struct {
	UidList     []int64         `thrift:"uid_list,1,required" json:"uid_list"`
	TypeA1      int64           `thrift:"type,2,required" json:"type"`
	MsgKey      *string         `thrift:"msg_key,3" json:"msg_key"`
	BussType    int32           `thrift:"buss_type,4" json:"buss_type"`
	MsgZh       *PublishMsgNode `thrift:"msg_zh,5" json:"msg_zh"`
	MsgHk       *PublishMsgNode `thrift:"msg_hk,6" json:"msg_hk"`
	MsgEn       *PublishMsgNode `thrift:"msg_en,7" json:"msg_en"`
	MsgVersion  int32           `thrift:"msg_version,8" json:"msg_version"`
	MsgLevel    int32           `thrift:"msg_level,9" json:"msg_level"`
	CreateTime  *int64          `thrift:"create_time,10" json:"create_time"`
	PushBody    *PushBody       `thrift:"push_body,11" json:"push_body"`
	PushBodyEn  *PushBody       `thrift:"push_body_en,12" json:"push_body_en"`
	PushBodyHk  *PushBody       `thrift:"push_body_hk,13" json:"push_body_hk"`
	BussMark    string          `thrift:"buss_mark,14" json:"buss_mark"`
	MsgSrc      *int64          `thrift:"msg_src,15" json:"msg_src"`
	PushMsgType *int64          `thrift:"push_msg_type,16" json:"push_msg_type"`
	PushMsgSrc  *string         `thrift:"push_msg_src,17" json:"push_msg_src"`
	// unused fields # 18 to 100
	SyncOldMsg bool `thrift:"sync_old_msg,101" json:"sync_old_msg"`
}

func NewPushUserNoticeMsgReq() *PushUserNoticeMsgReq {
	return &PushUserNoticeMsgReq{
		BussType: 1,

		MsgVersion: -1,

		BussMark: "PLATFORM",
	}
}

func (p *PushUserNoticeMsgReq) GetUidList() []int64 {
	return p.UidList
}

func (p *PushUserNoticeMsgReq) GetTypeA1() int64 {
	return p.TypeA1
}

var PushUserNoticeMsgReq_MsgKey_DEFAULT string

func (p *PushUserNoticeMsgReq) GetMsgKey() string {
	if !p.IsSetMsgKey() {
		return PushUserNoticeMsgReq_MsgKey_DEFAULT
	}
	return *p.MsgKey
}

var PushUserNoticeMsgReq_BussType_DEFAULT int32 = 1

func (p *PushUserNoticeMsgReq) GetBussType() int32 {
	return p.BussType
}

var PushUserNoticeMsgReq_MsgZh_DEFAULT *PublishMsgNode

func (p *PushUserNoticeMsgReq) GetMsgZh() *PublishMsgNode {
	if !p.IsSetMsgZh() {
		return PushUserNoticeMsgReq_MsgZh_DEFAULT
	}
	return p.MsgZh
}

var PushUserNoticeMsgReq_MsgHk_DEFAULT *PublishMsgNode

func (p *PushUserNoticeMsgReq) GetMsgHk() *PublishMsgNode {
	if !p.IsSetMsgHk() {
		return PushUserNoticeMsgReq_MsgHk_DEFAULT
	}
	return p.MsgHk
}

var PushUserNoticeMsgReq_MsgEn_DEFAULT *PublishMsgNode

func (p *PushUserNoticeMsgReq) GetMsgEn() *PublishMsgNode {
	if !p.IsSetMsgEn() {
		return PushUserNoticeMsgReq_MsgEn_DEFAULT
	}
	return p.MsgEn
}

var PushUserNoticeMsgReq_MsgVersion_DEFAULT int32 = -1

func (p *PushUserNoticeMsgReq) GetMsgVersion() int32 {
	return p.MsgVersion
}

var PushUserNoticeMsgReq_MsgLevel_DEFAULT int32 = 0

func (p *PushUserNoticeMsgReq) GetMsgLevel() int32 {
	return p.MsgLevel
}

var PushUserNoticeMsgReq_CreateTime_DEFAULT int64

func (p *PushUserNoticeMsgReq) GetCreateTime() int64 {
	if !p.IsSetCreateTime() {
		return PushUserNoticeMsgReq_CreateTime_DEFAULT
	}
	return *p.CreateTime
}

var PushUserNoticeMsgReq_PushBody_DEFAULT *PushBody

func (p *PushUserNoticeMsgReq) GetPushBody() *PushBody {
	if !p.IsSetPushBody() {
		return PushUserNoticeMsgReq_PushBody_DEFAULT
	}
	return p.PushBody
}

var PushUserNoticeMsgReq_PushBodyEn_DEFAULT *PushBody

func (p *PushUserNoticeMsgReq) GetPushBodyEn() *PushBody {
	if !p.IsSetPushBodyEn() {
		return PushUserNoticeMsgReq_PushBodyEn_DEFAULT
	}
	return p.PushBodyEn
}

var PushUserNoticeMsgReq_PushBodyHk_DEFAULT *PushBody

func (p *PushUserNoticeMsgReq) GetPushBodyHk() *PushBody {
	if !p.IsSetPushBodyHk() {
		return PushUserNoticeMsgReq_PushBodyHk_DEFAULT
	}
	return p.PushBodyHk
}

var PushUserNoticeMsgReq_BussMark_DEFAULT string = "PLATFORM"

func (p *PushUserNoticeMsgReq) GetBussMark() string {
	return p.BussMark
}

var PushUserNoticeMsgReq_MsgSrc_DEFAULT int64

func (p *PushUserNoticeMsgReq) GetMsgSrc() int64 {
	if !p.IsSetMsgSrc() {
		return PushUserNoticeMsgReq_MsgSrc_DEFAULT
	}
	return *p.MsgSrc
}

var PushUserNoticeMsgReq_PushMsgType_DEFAULT int64

func (p *PushUserNoticeMsgReq) GetPushMsgType() int64 {
	if !p.IsSetPushMsgType() {
		return PushUserNoticeMsgReq_PushMsgType_DEFAULT
	}
	return *p.PushMsgType
}

var PushUserNoticeMsgReq_PushMsgSrc_DEFAULT string

func (p *PushUserNoticeMsgReq) GetPushMsgSrc() string {
	if !p.IsSetPushMsgSrc() {
		return PushUserNoticeMsgReq_PushMsgSrc_DEFAULT
	}
	return *p.PushMsgSrc
}

var PushUserNoticeMsgReq_SyncOldMsg_DEFAULT bool = false

func (p *PushUserNoticeMsgReq) GetSyncOldMsg() bool {
	return p.SyncOldMsg
}
func (p *PushUserNoticeMsgReq) IsSetMsgKey() bool {
	return p.MsgKey != nil
}

func (p *PushUserNoticeMsgReq) IsSetBussType() bool {
	return p.BussType != PushUserNoticeMsgReq_BussType_DEFAULT
}

func (p *PushUserNoticeMsgReq) IsSetMsgZh() bool {
	return p.MsgZh != nil
}

func (p *PushUserNoticeMsgReq) IsSetMsgHk() bool {
	return p.MsgHk != nil
}

func (p *PushUserNoticeMsgReq) IsSetMsgEn() bool {
	return p.MsgEn != nil
}

func (p *PushUserNoticeMsgReq) IsSetMsgVersion() bool {
	return p.MsgVersion != PushUserNoticeMsgReq_MsgVersion_DEFAULT
}

func (p *PushUserNoticeMsgReq) IsSetMsgLevel() bool {
	return p.MsgLevel != PushUserNoticeMsgReq_MsgLevel_DEFAULT
}

func (p *PushUserNoticeMsgReq) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *PushUserNoticeMsgReq) IsSetPushBody() bool {
	return p.PushBody != nil
}

func (p *PushUserNoticeMsgReq) IsSetPushBodyEn() bool {
	return p.PushBodyEn != nil
}

func (p *PushUserNoticeMsgReq) IsSetPushBodyHk() bool {
	return p.PushBodyHk != nil
}

func (p *PushUserNoticeMsgReq) IsSetBussMark() bool {
	return p.BussMark != PushUserNoticeMsgReq_BussMark_DEFAULT
}

func (p *PushUserNoticeMsgReq) IsSetMsgSrc() bool {
	return p.MsgSrc != nil
}

func (p *PushUserNoticeMsgReq) IsSetPushMsgType() bool {
	return p.PushMsgType != nil
}

func (p *PushUserNoticeMsgReq) IsSetPushMsgSrc() bool {
	return p.PushMsgSrc != nil
}

func (p *PushUserNoticeMsgReq) IsSetSyncOldMsg() bool {
	return p.SyncOldMsg != PushUserNoticeMsgReq_SyncOldMsg_DEFAULT
}

func (p *PushUserNoticeMsgReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 101:
			if err := p.ReadField101(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.UidList = tSlice
	for i := 0; i < size; i++ {
		var _elem4 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem4 = v
		}
		p.UidList = append(p.UidList, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MsgKey = &v
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.BussType = v
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField5(iprot thrift.TProtocol) error {
	p.MsgZh = &PublishMsgNode{}
	if err := p.MsgZh.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MsgZh, err)
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField6(iprot thrift.TProtocol) error {
	p.MsgHk = &PublishMsgNode{}
	if err := p.MsgHk.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MsgHk, err)
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField7(iprot thrift.TProtocol) error {
	p.MsgEn = &PublishMsgNode{}
	if err := p.MsgEn.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MsgEn, err)
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.MsgVersion = v
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.MsgLevel = v
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.CreateTime = &v
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField11(iprot thrift.TProtocol) error {
	p.PushBody = &PushBody{
		Lang: "zh",
	}
	if err := p.PushBody.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PushBody, err)
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField12(iprot thrift.TProtocol) error {
	p.PushBodyEn = &PushBody{
		Lang: "zh",
	}
	if err := p.PushBodyEn.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PushBodyEn, err)
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField13(iprot thrift.TProtocol) error {
	p.PushBodyHk = &PushBody{
		Lang: "zh",
	}
	if err := p.PushBodyHk.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PushBodyHk, err)
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.BussMark = v
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.MsgSrc = &v
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 16: %s", err)
	} else {
		p.PushMsgType = &v
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		p.PushMsgSrc = &v
	}
	return nil
}

func (p *PushUserNoticeMsgReq) ReadField101(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 101: %s", err)
	} else {
		p.SyncOldMsg = v
	}
	return nil
}

func (p *PushUserNoticeMsgReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PushUserNoticeMsgReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField101(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PushUserNoticeMsgReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid_list", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid_list: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.UidList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.UidList {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid_list: %s", p, err)
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:type: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:type: %s", p, err)
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgKey() {
		if err := oprot.WriteFieldBegin("msg_key", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:msg_key: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.MsgKey)); err != nil {
			return fmt.Errorf("%T.msg_key (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:msg_key: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBussType() {
		if err := oprot.WriteFieldBegin("buss_type", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:buss_type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.BussType)); err != nil {
			return fmt.Errorf("%T.buss_type (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:buss_type: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgZh() {
		if err := oprot.WriteFieldBegin("msg_zh", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:msg_zh: %s", p, err)
		}
		if err := p.MsgZh.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MsgZh, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:msg_zh: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgHk() {
		if err := oprot.WriteFieldBegin("msg_hk", thrift.STRUCT, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:msg_hk: %s", p, err)
		}
		if err := p.MsgHk.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MsgHk, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:msg_hk: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgEn() {
		if err := oprot.WriteFieldBegin("msg_en", thrift.STRUCT, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:msg_en: %s", p, err)
		}
		if err := p.MsgEn.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MsgEn, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:msg_en: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgVersion() {
		if err := oprot.WriteFieldBegin("msg_version", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:msg_version: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MsgVersion)); err != nil {
			return fmt.Errorf("%T.msg_version (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:msg_version: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgLevel() {
		if err := oprot.WriteFieldBegin("msg_level", thrift.I32, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:msg_level: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MsgLevel)); err != nil {
			return fmt.Errorf("%T.msg_level (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:msg_level: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err := oprot.WriteFieldBegin("create_time", thrift.I64, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:create_time: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
			return fmt.Errorf("%T.create_time (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:create_time: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPushBody() {
		if err := oprot.WriteFieldBegin("push_body", thrift.STRUCT, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:push_body: %s", p, err)
		}
		if err := p.PushBody.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.PushBody, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:push_body: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetPushBodyEn() {
		if err := oprot.WriteFieldBegin("push_body_en", thrift.STRUCT, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:push_body_en: %s", p, err)
		}
		if err := p.PushBodyEn.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.PushBodyEn, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:push_body_en: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPushBodyHk() {
		if err := oprot.WriteFieldBegin("push_body_hk", thrift.STRUCT, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:push_body_hk: %s", p, err)
		}
		if err := p.PushBodyHk.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.PushBodyHk, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:push_body_hk: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetBussMark() {
		if err := oprot.WriteFieldBegin("buss_mark", thrift.STRING, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:buss_mark: %s", p, err)
		}
		if err := oprot.WriteString(string(p.BussMark)); err != nil {
			return fmt.Errorf("%T.buss_mark (14) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:buss_mark: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgSrc() {
		if err := oprot.WriteFieldBegin("msg_src", thrift.I64, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:msg_src: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.MsgSrc)); err != nil {
			return fmt.Errorf("%T.msg_src (15) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:msg_src: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetPushMsgType() {
		if err := oprot.WriteFieldBegin("push_msg_type", thrift.I64, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:push_msg_type: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.PushMsgType)); err != nil {
			return fmt.Errorf("%T.push_msg_type (16) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:push_msg_type: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetPushMsgSrc() {
		if err := oprot.WriteFieldBegin("push_msg_src", thrift.STRING, 17); err != nil {
			return fmt.Errorf("%T write field begin error 17:push_msg_src: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.PushMsgSrc)); err != nil {
			return fmt.Errorf("%T.push_msg_src (17) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 17:push_msg_src: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetSyncOldMsg() {
		if err := oprot.WriteFieldBegin("sync_old_msg", thrift.BOOL, 101); err != nil {
			return fmt.Errorf("%T write field begin error 101:sync_old_msg: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.SyncOldMsg)); err != nil {
			return fmt.Errorf("%T.sync_old_msg (101) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 101:sync_old_msg: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushUserNoticeMsgReq(%+v)", *p)
}

type PushUserNoticeMsgReturn struct {
	ErrInfo *ErrInfo `thrift:"err_info,1,required" json:"err_info"`
}

func NewPushUserNoticeMsgReturn() *PushUserNoticeMsgReturn {
	return &PushUserNoticeMsgReturn{}
}

var PushUserNoticeMsgReturn_ErrInfo_DEFAULT *ErrInfo

func (p *PushUserNoticeMsgReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return PushUserNoticeMsgReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}
func (p *PushUserNoticeMsgReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *PushUserNoticeMsgReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PushUserNoticeMsgReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *PushUserNoticeMsgReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PushUserNoticeMsgReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PushUserNoticeMsgReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *PushUserNoticeMsgReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushUserNoticeMsgReturn(%+v)", *p)
}

type RefreshMsgListReq struct {
	UidList []int64 `thrift:"uid_list,1,required" json:"uid_list"`
}

func NewRefreshMsgListReq() *RefreshMsgListReq {
	return &RefreshMsgListReq{}
}

func (p *RefreshMsgListReq) GetUidList() []int64 {
	return p.UidList
}
func (p *RefreshMsgListReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RefreshMsgListReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.UidList = tSlice
	for i := 0; i < size; i++ {
		var _elem5 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem5 = v
		}
		p.UidList = append(p.UidList, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *RefreshMsgListReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RefreshMsgListReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RefreshMsgListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid_list", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid_list: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.UidList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.UidList {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid_list: %s", p, err)
	}
	return err
}

func (p *RefreshMsgListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshMsgListReq(%+v)", *p)
}

type RefreshMsgListReturn struct {
	ErrInfo *ErrInfo `thrift:"err_info,1,required" json:"err_info"`
}

func NewRefreshMsgListReturn() *RefreshMsgListReturn {
	return &RefreshMsgListReturn{}
}

var RefreshMsgListReturn_ErrInfo_DEFAULT *ErrInfo

func (p *RefreshMsgListReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return RefreshMsgListReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}
func (p *RefreshMsgListReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *RefreshMsgListReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RefreshMsgListReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *RefreshMsgListReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RefreshMsgListReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RefreshMsgListReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *RefreshMsgListReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshMsgListReturn(%+v)", *p)
}

type Blacklist struct {
	Uid        int64 `thrift:"uid,1,required" json:"uid"`
	BanEndTime int64 `thrift:"ban_end_time,2,required" json:"ban_end_time"`
	Level      int32 `thrift:"level,3" json:"level"`
}

func NewBlacklist() *Blacklist {
	return &Blacklist{
		Level: 1,
	}
}

func (p *Blacklist) GetUid() int64 {
	return p.Uid
}

func (p *Blacklist) GetBanEndTime() int64 {
	return p.BanEndTime
}

var Blacklist_Level_DEFAULT int32 = 1

func (p *Blacklist) GetLevel() int32 {
	return p.Level
}
func (p *Blacklist) IsSetLevel() bool {
	return p.Level != Blacklist_Level_DEFAULT
}

func (p *Blacklist) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Blacklist) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *Blacklist) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.BanEndTime = v
	}
	return nil
}

func (p *Blacklist) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Level = v
	}
	return nil
}

func (p *Blacklist) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Blacklist"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Blacklist) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *Blacklist) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ban_end_time", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:ban_end_time: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.BanEndTime)); err != nil {
		return fmt.Errorf("%T.ban_end_time (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:ban_end_time: %s", p, err)
	}
	return err
}

func (p *Blacklist) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLevel() {
		if err := oprot.WriteFieldBegin("level", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:level: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Level)); err != nil {
			return fmt.Errorf("%T.level (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:level: %s", p, err)
		}
	}
	return err
}

func (p *Blacklist) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Blacklist(%+v)", *p)
}

type UserBlacklist struct {
	BlacklistMap map[int64]*Blacklist `thrift:"blacklist_map,1,required" json:"blacklist_map"`
}

func NewUserBlacklist() *UserBlacklist {
	return &UserBlacklist{}
}

func (p *UserBlacklist) GetBlacklistMap() map[int64]*Blacklist {
	return p.BlacklistMap
}
func (p *UserBlacklist) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UserBlacklist) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[int64]*Blacklist, size)
	p.BlacklistMap = tMap
	for i := 0; i < size; i++ {
		var _key6 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key6 = v
		}
		_val7 := &Blacklist{
			Level: 1,
		}
		if err := _val7.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val7, err)
		}
		p.BlacklistMap[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *UserBlacklist) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserBlacklist"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UserBlacklist) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blacklist_map", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:blacklist_map: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.BlacklistMap)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.BlacklistMap {
		if err := oprot.WriteI64(int64(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:blacklist_map: %s", p, err)
	}
	return err
}

func (p *UserBlacklist) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserBlacklist(%+v)", *p)
}

type OptBlackListReq struct {
	Uid     int64 `thrift:"uid,1,required" json:"uid"`
	DesUid  int64 `thrift:"des_uid,2,required" json:"des_uid"`
	OptType int32 `thrift:"opt_type,3,required" json:"opt_type"`
	// unused fields # 4 to 100
	TerminalInfo *TerminalInfo `thrift:"terminal_info,101" json:"terminal_info"`
}

func NewOptBlackListReq() *OptBlackListReq {
	return &OptBlackListReq{}
}

func (p *OptBlackListReq) GetUid() int64 {
	return p.Uid
}

func (p *OptBlackListReq) GetDesUid() int64 {
	return p.DesUid
}

func (p *OptBlackListReq) GetOptType() int32 {
	return p.OptType
}

var OptBlackListReq_TerminalInfo_DEFAULT *TerminalInfo

func (p *OptBlackListReq) GetTerminalInfo() *TerminalInfo {
	if !p.IsSetTerminalInfo() {
		return OptBlackListReq_TerminalInfo_DEFAULT
	}
	return p.TerminalInfo
}
func (p *OptBlackListReq) IsSetTerminalInfo() bool {
	return p.TerminalInfo != nil
}

func (p *OptBlackListReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 101:
			if err := p.ReadField101(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OptBlackListReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *OptBlackListReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DesUid = v
	}
	return nil
}

func (p *OptBlackListReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.OptType = v
	}
	return nil
}

func (p *OptBlackListReq) ReadField101(iprot thrift.TProtocol) error {
	p.TerminalInfo = &TerminalInfo{}
	if err := p.TerminalInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TerminalInfo, err)
	}
	return nil
}

func (p *OptBlackListReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OptBlackListReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField101(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OptBlackListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *OptBlackListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("des_uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:des_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.DesUid)); err != nil {
		return fmt.Errorf("%T.des_uid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:des_uid: %s", p, err)
	}
	return err
}

func (p *OptBlackListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("opt_type", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:opt_type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OptType)); err != nil {
		return fmt.Errorf("%T.opt_type (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:opt_type: %s", p, err)
	}
	return err
}

func (p *OptBlackListReq) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetTerminalInfo() {
		if err := oprot.WriteFieldBegin("terminal_info", thrift.STRUCT, 101); err != nil {
			return fmt.Errorf("%T write field begin error 101:terminal_info: %s", p, err)
		}
		if err := p.TerminalInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TerminalInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 101:terminal_info: %s", p, err)
		}
	}
	return err
}

func (p *OptBlackListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OptBlackListReq(%+v)", *p)
}

type OptBlackListReturn struct {
	ErrInfo *ErrInfo `thrift:"err_info,1,required" json:"err_info"`
}

func NewOptBlackListReturn() *OptBlackListReturn {
	return &OptBlackListReturn{}
}

var OptBlackListReturn_ErrInfo_DEFAULT *ErrInfo

func (p *OptBlackListReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return OptBlackListReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}
func (p *OptBlackListReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *OptBlackListReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OptBlackListReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *OptBlackListReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OptBlackListReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OptBlackListReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *OptBlackListReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OptBlackListReturn(%+v)", *p)
}

type QueryBlackListReq struct {
	Uid int64 `thrift:"uid,1,required" json:"uid"`
	// unused fields # 2 to 100
	TerminalInfo *TerminalInfo `thrift:"terminal_info,101" json:"terminal_info"`
}

func NewQueryBlackListReq() *QueryBlackListReq {
	return &QueryBlackListReq{}
}

func (p *QueryBlackListReq) GetUid() int64 {
	return p.Uid
}

var QueryBlackListReq_TerminalInfo_DEFAULT *TerminalInfo

func (p *QueryBlackListReq) GetTerminalInfo() *TerminalInfo {
	if !p.IsSetTerminalInfo() {
		return QueryBlackListReq_TerminalInfo_DEFAULT
	}
	return p.TerminalInfo
}
func (p *QueryBlackListReq) IsSetTerminalInfo() bool {
	return p.TerminalInfo != nil
}

func (p *QueryBlackListReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 101:
			if err := p.ReadField101(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryBlackListReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *QueryBlackListReq) ReadField101(iprot thrift.TProtocol) error {
	p.TerminalInfo = &TerminalInfo{}
	if err := p.TerminalInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TerminalInfo, err)
	}
	return nil
}

func (p *QueryBlackListReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryBlackListReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField101(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryBlackListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *QueryBlackListReq) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetTerminalInfo() {
		if err := oprot.WriteFieldBegin("terminal_info", thrift.STRUCT, 101); err != nil {
			return fmt.Errorf("%T write field begin error 101:terminal_info: %s", p, err)
		}
		if err := p.TerminalInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TerminalInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 101:terminal_info: %s", p, err)
		}
	}
	return err
}

func (p *QueryBlackListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryBlackListReq(%+v)", *p)
}

type QueryBlackListReturn struct {
	ErrInfo   *ErrInfo        `thrift:"err_info,1,required" json:"err_info"`
	BlackList []*UserBaseInfo `thrift:"black_list,2" json:"black_list"`
}

func NewQueryBlackListReturn() *QueryBlackListReturn {
	return &QueryBlackListReturn{}
}

var QueryBlackListReturn_ErrInfo_DEFAULT *ErrInfo

func (p *QueryBlackListReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return QueryBlackListReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var QueryBlackListReturn_BlackList_DEFAULT []*UserBaseInfo

func (p *QueryBlackListReturn) GetBlackList() []*UserBaseInfo {
	return p.BlackList
}
func (p *QueryBlackListReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *QueryBlackListReturn) IsSetBlackList() bool {
	return p.BlackList != nil
}

func (p *QueryBlackListReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryBlackListReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *QueryBlackListReturn) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*UserBaseInfo, 0, size)
	p.BlackList = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &UserBaseInfo{}
		if err := _elem8.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem8, err)
		}
		p.BlackList = append(p.BlackList, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *QueryBlackListReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryBlackListReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryBlackListReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *QueryBlackListReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetBlackList() {
		if err := oprot.WriteFieldBegin("black_list", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:black_list: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BlackList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.BlackList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:black_list: %s", p, err)
		}
	}
	return err
}

func (p *QueryBlackListReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryBlackListReturn(%+v)", *p)
}

type IsInMyBlackListReq struct {
	MeUid int64 `thrift:"me_uid,1,required" json:"me_uid"`
	Uid2  int64 `thrift:"uid2,2,required" json:"uid2"`
	// unused fields # 3 to 100
	TerminalInfo *TerminalInfo `thrift:"terminal_info,101" json:"terminal_info"`
}

func NewIsInMyBlackListReq() *IsInMyBlackListReq {
	return &IsInMyBlackListReq{}
}

func (p *IsInMyBlackListReq) GetMeUid() int64 {
	return p.MeUid
}

func (p *IsInMyBlackListReq) GetUid2() int64 {
	return p.Uid2
}

var IsInMyBlackListReq_TerminalInfo_DEFAULT *TerminalInfo

func (p *IsInMyBlackListReq) GetTerminalInfo() *TerminalInfo {
	if !p.IsSetTerminalInfo() {
		return IsInMyBlackListReq_TerminalInfo_DEFAULT
	}
	return p.TerminalInfo
}
func (p *IsInMyBlackListReq) IsSetTerminalInfo() bool {
	return p.TerminalInfo != nil
}

func (p *IsInMyBlackListReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 101:
			if err := p.ReadField101(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IsInMyBlackListReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MeUid = v
	}
	return nil
}

func (p *IsInMyBlackListReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Uid2 = v
	}
	return nil
}

func (p *IsInMyBlackListReq) ReadField101(iprot thrift.TProtocol) error {
	p.TerminalInfo = &TerminalInfo{}
	if err := p.TerminalInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TerminalInfo, err)
	}
	return nil
}

func (p *IsInMyBlackListReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IsInMyBlackListReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField101(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IsInMyBlackListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("me_uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:me_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MeUid)); err != nil {
		return fmt.Errorf("%T.me_uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:me_uid: %s", p, err)
	}
	return err
}

func (p *IsInMyBlackListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid2", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uid2: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid2)); err != nil {
		return fmt.Errorf("%T.uid2 (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uid2: %s", p, err)
	}
	return err
}

func (p *IsInMyBlackListReq) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetTerminalInfo() {
		if err := oprot.WriteFieldBegin("terminal_info", thrift.STRUCT, 101); err != nil {
			return fmt.Errorf("%T write field begin error 101:terminal_info: %s", p, err)
		}
		if err := p.TerminalInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TerminalInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 101:terminal_info: %s", p, err)
		}
	}
	return err
}

func (p *IsInMyBlackListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsInMyBlackListReq(%+v)", *p)
}

type ReportUserReq struct {
	Uid          int64   `thrift:"uid,1,required" json:"uid"`
	DesUid       int64   `thrift:"des_uid,2,required" json:"des_uid"`
	ReportReason int32   `thrift:"report_reason,3,required" json:"report_reason"`
	ReportPic    *string `thrift:"report_pic,4" json:"report_pic"`
	// unused fields # 5 to 100
	TerminalInfo *TerminalInfo `thrift:"terminal_info,101" json:"terminal_info"`
}

func NewReportUserReq() *ReportUserReq {
	return &ReportUserReq{}
}

func (p *ReportUserReq) GetUid() int64 {
	return p.Uid
}

func (p *ReportUserReq) GetDesUid() int64 {
	return p.DesUid
}

func (p *ReportUserReq) GetReportReason() int32 {
	return p.ReportReason
}

var ReportUserReq_ReportPic_DEFAULT string

func (p *ReportUserReq) GetReportPic() string {
	if !p.IsSetReportPic() {
		return ReportUserReq_ReportPic_DEFAULT
	}
	return *p.ReportPic
}

var ReportUserReq_TerminalInfo_DEFAULT *TerminalInfo

func (p *ReportUserReq) GetTerminalInfo() *TerminalInfo {
	if !p.IsSetTerminalInfo() {
		return ReportUserReq_TerminalInfo_DEFAULT
	}
	return p.TerminalInfo
}
func (p *ReportUserReq) IsSetReportPic() bool {
	return p.ReportPic != nil
}

func (p *ReportUserReq) IsSetTerminalInfo() bool {
	return p.TerminalInfo != nil
}

func (p *ReportUserReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 101:
			if err := p.ReadField101(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportUserReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *ReportUserReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DesUid = v
	}
	return nil
}

func (p *ReportUserReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ReportReason = v
	}
	return nil
}

func (p *ReportUserReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ReportPic = &v
	}
	return nil
}

func (p *ReportUserReq) ReadField101(iprot thrift.TProtocol) error {
	p.TerminalInfo = &TerminalInfo{}
	if err := p.TerminalInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TerminalInfo, err)
	}
	return nil
}

func (p *ReportUserReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReportUserReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField101(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportUserReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *ReportUserReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("des_uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:des_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.DesUid)); err != nil {
		return fmt.Errorf("%T.des_uid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:des_uid: %s", p, err)
	}
	return err
}

func (p *ReportUserReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("report_reason", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:report_reason: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReportReason)); err != nil {
		return fmt.Errorf("%T.report_reason (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:report_reason: %s", p, err)
	}
	return err
}

func (p *ReportUserReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReportPic() {
		if err := oprot.WriteFieldBegin("report_pic", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:report_pic: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ReportPic)); err != nil {
			return fmt.Errorf("%T.report_pic (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:report_pic: %s", p, err)
		}
	}
	return err
}

func (p *ReportUserReq) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetTerminalInfo() {
		if err := oprot.WriteFieldBegin("terminal_info", thrift.STRUCT, 101); err != nil {
			return fmt.Errorf("%T write field begin error 101:terminal_info: %s", p, err)
		}
		if err := p.TerminalInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TerminalInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 101:terminal_info: %s", p, err)
		}
	}
	return err
}

func (p *ReportUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportUserReq(%+v)", *p)
}

type ReportUserReturn struct {
	ErrInfo *ErrInfo `thrift:"err_info,1,required" json:"err_info"`
	Desc    *string  `thrift:"desc,2" json:"desc"`
}

func NewReportUserReturn() *ReportUserReturn {
	return &ReportUserReturn{}
}

var ReportUserReturn_ErrInfo_DEFAULT *ErrInfo

func (p *ReportUserReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return ReportUserReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var ReportUserReturn_Desc_DEFAULT string

func (p *ReportUserReturn) GetDesc() string {
	if !p.IsSetDesc() {
		return ReportUserReturn_Desc_DEFAULT
	}
	return *p.Desc
}
func (p *ReportUserReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *ReportUserReturn) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *ReportUserReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportUserReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *ReportUserReturn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *ReportUserReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReportUserReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportUserReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *ReportUserReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:desc: %s", p, err)
		}
	}
	return err
}

func (p *ReportUserReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportUserReturn(%+v)", *p)
}

type ReportedMsg struct {
	Msgid          int64   `thrift:"msgid,1,required" json:"msgid"`
	Uid            int64   `thrift:"uid,2,required" json:"uid"`
	Nickname       string  `thrift:"nickname,3,required" json:"nickname"`
	Identity       int32   `thrift:"identity,4,required" json:"identity"`
	ReportReason   int32   `thrift:"report_reason,5,required" json:"report_reason"`
	ReportPic      string  `thrift:"report_pic,6,required" json:"report_pic"`
	ReportUid      int64   `thrift:"report_uid,7,required" json:"report_uid"`
	ReportUser     string  `thrift:"report_user,8,required" json:"report_user"`
	ReportedNum    int32   `thrift:"reported_num,9,required" json:"reported_num"`
	ReportedTime   int64   `thrift:"reported_time,10,required" json:"reported_time"`
	Status         int32   `thrift:"status,11,required" json:"status"`
	ViolationLevel *int32  `thrift:"violation_level,12" json:"violation_level"`
	Comment        *string `thrift:"comment,13" json:"comment"`
	ProcessStatus  *int32  `thrift:"process_status,14" json:"process_status"`
}

func NewReportedMsg() *ReportedMsg {
	return &ReportedMsg{}
}

func (p *ReportedMsg) GetMsgid() int64 {
	return p.Msgid
}

func (p *ReportedMsg) GetUid() int64 {
	return p.Uid
}

func (p *ReportedMsg) GetNickname() string {
	return p.Nickname
}

func (p *ReportedMsg) GetIdentity() int32 {
	return p.Identity
}

func (p *ReportedMsg) GetReportReason() int32 {
	return p.ReportReason
}

func (p *ReportedMsg) GetReportPic() string {
	return p.ReportPic
}

func (p *ReportedMsg) GetReportUid() int64 {
	return p.ReportUid
}

func (p *ReportedMsg) GetReportUser() string {
	return p.ReportUser
}

func (p *ReportedMsg) GetReportedNum() int32 {
	return p.ReportedNum
}

func (p *ReportedMsg) GetReportedTime() int64 {
	return p.ReportedTime
}

func (p *ReportedMsg) GetStatus() int32 {
	return p.Status
}

var ReportedMsg_ViolationLevel_DEFAULT int32

func (p *ReportedMsg) GetViolationLevel() int32 {
	if !p.IsSetViolationLevel() {
		return ReportedMsg_ViolationLevel_DEFAULT
	}
	return *p.ViolationLevel
}

var ReportedMsg_Comment_DEFAULT string

func (p *ReportedMsg) GetComment() string {
	if !p.IsSetComment() {
		return ReportedMsg_Comment_DEFAULT
	}
	return *p.Comment
}

var ReportedMsg_ProcessStatus_DEFAULT int32

func (p *ReportedMsg) GetProcessStatus() int32 {
	if !p.IsSetProcessStatus() {
		return ReportedMsg_ProcessStatus_DEFAULT
	}
	return *p.ProcessStatus
}
func (p *ReportedMsg) IsSetViolationLevel() bool {
	return p.ViolationLevel != nil
}

func (p *ReportedMsg) IsSetComment() bool {
	return p.Comment != nil
}

func (p *ReportedMsg) IsSetProcessStatus() bool {
	return p.ProcessStatus != nil
}

func (p *ReportedMsg) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportedMsg) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msgid = v
	}
	return nil
}

func (p *ReportedMsg) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *ReportedMsg) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Nickname = v
	}
	return nil
}

func (p *ReportedMsg) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Identity = v
	}
	return nil
}

func (p *ReportedMsg) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ReportReason = v
	}
	return nil
}

func (p *ReportedMsg) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.ReportPic = v
	}
	return nil
}

func (p *ReportedMsg) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.ReportUid = v
	}
	return nil
}

func (p *ReportedMsg) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.ReportUser = v
	}
	return nil
}

func (p *ReportedMsg) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.ReportedNum = v
	}
	return nil
}

func (p *ReportedMsg) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.ReportedTime = v
	}
	return nil
}

func (p *ReportedMsg) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *ReportedMsg) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.ViolationLevel = &v
	}
	return nil
}

func (p *ReportedMsg) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.Comment = &v
	}
	return nil
}

func (p *ReportedMsg) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.ProcessStatus = &v
	}
	return nil
}

func (p *ReportedMsg) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReportedMsg"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportedMsg) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msgid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Msgid)); err != nil {
		return fmt.Errorf("%T.msgid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msgid: %s", p, err)
	}
	return err
}

func (p *ReportedMsg) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uid: %s", p, err)
	}
	return err
}

func (p *ReportedMsg) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:nickname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Nickname)); err != nil {
		return fmt.Errorf("%T.nickname (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:nickname: %s", p, err)
	}
	return err
}

func (p *ReportedMsg) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identity", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:identity: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Identity)); err != nil {
		return fmt.Errorf("%T.identity (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:identity: %s", p, err)
	}
	return err
}

func (p *ReportedMsg) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("report_reason", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:report_reason: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReportReason)); err != nil {
		return fmt.Errorf("%T.report_reason (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:report_reason: %s", p, err)
	}
	return err
}

func (p *ReportedMsg) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("report_pic", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:report_pic: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReportPic)); err != nil {
		return fmt.Errorf("%T.report_pic (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:report_pic: %s", p, err)
	}
	return err
}

func (p *ReportedMsg) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("report_uid", thrift.I64, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:report_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ReportUid)); err != nil {
		return fmt.Errorf("%T.report_uid (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:report_uid: %s", p, err)
	}
	return err
}

func (p *ReportedMsg) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("report_user", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:report_user: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReportUser)); err != nil {
		return fmt.Errorf("%T.report_user (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:report_user: %s", p, err)
	}
	return err
}

func (p *ReportedMsg) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reported_num", thrift.I32, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:reported_num: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReportedNum)); err != nil {
		return fmt.Errorf("%T.reported_num (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:reported_num: %s", p, err)
	}
	return err
}

func (p *ReportedMsg) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reported_time", thrift.I64, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:reported_time: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ReportedTime)); err != nil {
		return fmt.Errorf("%T.reported_time (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:reported_time: %s", p, err)
	}
	return err
}

func (p *ReportedMsg) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.status (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:status: %s", p, err)
	}
	return err
}

func (p *ReportedMsg) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetViolationLevel() {
		if err := oprot.WriteFieldBegin("violation_level", thrift.I32, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:violation_level: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ViolationLevel)); err != nil {
			return fmt.Errorf("%T.violation_level (12) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:violation_level: %s", p, err)
		}
	}
	return err
}

func (p *ReportedMsg) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetComment() {
		if err := oprot.WriteFieldBegin("comment", thrift.STRING, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:comment: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Comment)); err != nil {
			return fmt.Errorf("%T.comment (13) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:comment: %s", p, err)
		}
	}
	return err
}

func (p *ReportedMsg) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetProcessStatus() {
		if err := oprot.WriteFieldBegin("process_status", thrift.I32, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:process_status: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ProcessStatus)); err != nil {
			return fmt.Errorf("%T.process_status (14) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:process_status: %s", p, err)
		}
	}
	return err
}

func (p *ReportedMsg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportedMsg(%+v)", *p)
}

type GetReportedMsgReq struct {
	Uid           *int64  `thrift:"uid,1" json:"uid"`
	Nickname      *string `thrift:"nickname,2" json:"nickname"`
	ProcessStatus int32   `thrift:"process_status,3" json:"process_status"`
	Identity      int32   `thrift:"identity,4" json:"identity"`
	ReportReason  int32   `thrift:"report_reason,5" json:"report_reason"`
	Status        int32   `thrift:"status,6" json:"status"`
	StartIndex    int32   `thrift:"start_index,7" json:"start_index"`
	Num           int32   `thrift:"num,8" json:"num"`
}

func NewGetReportedMsgReq() *GetReportedMsgReq {
	return &GetReportedMsgReq{
		ProcessStatus: 1,

		Num: 20,
	}
}

var GetReportedMsgReq_Uid_DEFAULT int64

func (p *GetReportedMsgReq) GetUid() int64 {
	if !p.IsSetUid() {
		return GetReportedMsgReq_Uid_DEFAULT
	}
	return *p.Uid
}

var GetReportedMsgReq_Nickname_DEFAULT string

func (p *GetReportedMsgReq) GetNickname() string {
	if !p.IsSetNickname() {
		return GetReportedMsgReq_Nickname_DEFAULT
	}
	return *p.Nickname
}

var GetReportedMsgReq_ProcessStatus_DEFAULT int32 = 1

func (p *GetReportedMsgReq) GetProcessStatus() int32 {
	return p.ProcessStatus
}

var GetReportedMsgReq_Identity_DEFAULT int32 = 0

func (p *GetReportedMsgReq) GetIdentity() int32 {
	return p.Identity
}

var GetReportedMsgReq_ReportReason_DEFAULT int32 = 0

func (p *GetReportedMsgReq) GetReportReason() int32 {
	return p.ReportReason
}

var GetReportedMsgReq_Status_DEFAULT int32 = 0

func (p *GetReportedMsgReq) GetStatus() int32 {
	return p.Status
}

var GetReportedMsgReq_StartIndex_DEFAULT int32 = 0

func (p *GetReportedMsgReq) GetStartIndex() int32 {
	return p.StartIndex
}

var GetReportedMsgReq_Num_DEFAULT int32 = 20

func (p *GetReportedMsgReq) GetNum() int32 {
	return p.Num
}
func (p *GetReportedMsgReq) IsSetUid() bool {
	return p.Uid != nil
}

func (p *GetReportedMsgReq) IsSetNickname() bool {
	return p.Nickname != nil
}

func (p *GetReportedMsgReq) IsSetProcessStatus() bool {
	return p.ProcessStatus != GetReportedMsgReq_ProcessStatus_DEFAULT
}

func (p *GetReportedMsgReq) IsSetIdentity() bool {
	return p.Identity != GetReportedMsgReq_Identity_DEFAULT
}

func (p *GetReportedMsgReq) IsSetReportReason() bool {
	return p.ReportReason != GetReportedMsgReq_ReportReason_DEFAULT
}

func (p *GetReportedMsgReq) IsSetStatus() bool {
	return p.Status != GetReportedMsgReq_Status_DEFAULT
}

func (p *GetReportedMsgReq) IsSetStartIndex() bool {
	return p.StartIndex != GetReportedMsgReq_StartIndex_DEFAULT
}

func (p *GetReportedMsgReq) IsSetNum() bool {
	return p.Num != GetReportedMsgReq_Num_DEFAULT
}

func (p *GetReportedMsgReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetReportedMsgReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = &v
	}
	return nil
}

func (p *GetReportedMsgReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Nickname = &v
	}
	return nil
}

func (p *GetReportedMsgReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ProcessStatus = v
	}
	return nil
}

func (p *GetReportedMsgReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Identity = v
	}
	return nil
}

func (p *GetReportedMsgReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ReportReason = v
	}
	return nil
}

func (p *GetReportedMsgReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *GetReportedMsgReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *GetReportedMsgReq) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Num = v
	}
	return nil
}

func (p *GetReportedMsgReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetReportedMsgReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetReportedMsgReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUid() {
		if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Uid)); err != nil {
			return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
		}
	}
	return err
}

func (p *GetReportedMsgReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNickname() {
		if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:nickname: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Nickname)); err != nil {
			return fmt.Errorf("%T.nickname (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:nickname: %s", p, err)
		}
	}
	return err
}

func (p *GetReportedMsgReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetProcessStatus() {
		if err := oprot.WriteFieldBegin("process_status", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:process_status: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ProcessStatus)); err != nil {
			return fmt.Errorf("%T.process_status (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:process_status: %s", p, err)
		}
	}
	return err
}

func (p *GetReportedMsgReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdentity() {
		if err := oprot.WriteFieldBegin("identity", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:identity: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Identity)); err != nil {
			return fmt.Errorf("%T.identity (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:identity: %s", p, err)
		}
	}
	return err
}

func (p *GetReportedMsgReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetReportReason() {
		if err := oprot.WriteFieldBegin("report_reason", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:report_reason: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ReportReason)); err != nil {
			return fmt.Errorf("%T.report_reason (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:report_reason: %s", p, err)
		}
	}
	return err
}

func (p *GetReportedMsgReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:status: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Status)); err != nil {
			return fmt.Errorf("%T.status (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:status: %s", p, err)
		}
	}
	return err
}

func (p *GetReportedMsgReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err := oprot.WriteFieldBegin("start_index", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:start_index: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
			return fmt.Errorf("%T.start_index (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:start_index: %s", p, err)
		}
	}
	return err
}

func (p *GetReportedMsgReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetNum() {
		if err := oprot.WriteFieldBegin("num", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:num: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Num)); err != nil {
			return fmt.Errorf("%T.num (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:num: %s", p, err)
		}
	}
	return err
}

func (p *GetReportedMsgReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReportedMsgReq(%+v)", *p)
}

type GetReportedMsgReturn struct {
	ErrInfo    *ErrInfo       `thrift:"err_info,1,required" json:"err_info"`
	TotalCount *int64         `thrift:"total_count,2" json:"total_count"`
	MsgList    []*ReportedMsg `thrift:"msg_list,3" json:"msg_list"`
}

func NewGetReportedMsgReturn() *GetReportedMsgReturn {
	return &GetReportedMsgReturn{}
}

var GetReportedMsgReturn_ErrInfo_DEFAULT *ErrInfo

func (p *GetReportedMsgReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return GetReportedMsgReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var GetReportedMsgReturn_TotalCount_DEFAULT int64

func (p *GetReportedMsgReturn) GetTotalCount() int64 {
	if !p.IsSetTotalCount() {
		return GetReportedMsgReturn_TotalCount_DEFAULT
	}
	return *p.TotalCount
}

var GetReportedMsgReturn_MsgList_DEFAULT []*ReportedMsg

func (p *GetReportedMsgReturn) GetMsgList() []*ReportedMsg {
	return p.MsgList
}
func (p *GetReportedMsgReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *GetReportedMsgReturn) IsSetTotalCount() bool {
	return p.TotalCount != nil
}

func (p *GetReportedMsgReturn) IsSetMsgList() bool {
	return p.MsgList != nil
}

func (p *GetReportedMsgReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetReportedMsgReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *GetReportedMsgReturn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TotalCount = &v
	}
	return nil
}

func (p *GetReportedMsgReturn) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ReportedMsg, 0, size)
	p.MsgList = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &ReportedMsg{}
		if err := _elem9.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem9, err)
		}
		p.MsgList = append(p.MsgList, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetReportedMsgReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetReportedMsgReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetReportedMsgReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *GetReportedMsgReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalCount() {
		if err := oprot.WriteFieldBegin("total_count", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:total_count: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TotalCount)); err != nil {
			return fmt.Errorf("%T.total_count (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:total_count: %s", p, err)
		}
	}
	return err
}

func (p *GetReportedMsgReturn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgList() {
		if err := oprot.WriteFieldBegin("msg_list", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:msg_list: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MsgList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.MsgList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:msg_list: %s", p, err)
		}
	}
	return err
}

func (p *GetReportedMsgReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReportedMsgReturn(%+v)", *p)
}

type ProcessReportedMsgReq struct {
	Msgid          int64   `thrift:"msgid,1,required" json:"msgid"`
	Uid            int64   `thrift:"uid,2,required" json:"uid"`
	ReportUid      int64   `thrift:"report_uid,3,required" json:"report_uid"`
	ViolationLevel int32   `thrift:"violation_level,4,required" json:"violation_level"`
	Optor          string  `thrift:"optor,5,required" json:"optor"`
	Comment        *string `thrift:"comment,6" json:"comment"`
}

func NewProcessReportedMsgReq() *ProcessReportedMsgReq {
	return &ProcessReportedMsgReq{}
}

func (p *ProcessReportedMsgReq) GetMsgid() int64 {
	return p.Msgid
}

func (p *ProcessReportedMsgReq) GetUid() int64 {
	return p.Uid
}

func (p *ProcessReportedMsgReq) GetReportUid() int64 {
	return p.ReportUid
}

func (p *ProcessReportedMsgReq) GetViolationLevel() int32 {
	return p.ViolationLevel
}

func (p *ProcessReportedMsgReq) GetOptor() string {
	return p.Optor
}

var ProcessReportedMsgReq_Comment_DEFAULT string

func (p *ProcessReportedMsgReq) GetComment() string {
	if !p.IsSetComment() {
		return ProcessReportedMsgReq_Comment_DEFAULT
	}
	return *p.Comment
}
func (p *ProcessReportedMsgReq) IsSetComment() bool {
	return p.Comment != nil
}

func (p *ProcessReportedMsgReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ProcessReportedMsgReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msgid = v
	}
	return nil
}

func (p *ProcessReportedMsgReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *ProcessReportedMsgReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ReportUid = v
	}
	return nil
}

func (p *ProcessReportedMsgReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ViolationLevel = v
	}
	return nil
}

func (p *ProcessReportedMsgReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Optor = v
	}
	return nil
}

func (p *ProcessReportedMsgReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Comment = &v
	}
	return nil
}

func (p *ProcessReportedMsgReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProcessReportedMsgReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ProcessReportedMsgReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msgid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Msgid)); err != nil {
		return fmt.Errorf("%T.msgid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msgid: %s", p, err)
	}
	return err
}

func (p *ProcessReportedMsgReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uid: %s", p, err)
	}
	return err
}

func (p *ProcessReportedMsgReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("report_uid", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:report_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ReportUid)); err != nil {
		return fmt.Errorf("%T.report_uid (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:report_uid: %s", p, err)
	}
	return err
}

func (p *ProcessReportedMsgReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("violation_level", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:violation_level: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ViolationLevel)); err != nil {
		return fmt.Errorf("%T.violation_level (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:violation_level: %s", p, err)
	}
	return err
}

func (p *ProcessReportedMsgReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("optor", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:optor: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Optor)); err != nil {
		return fmt.Errorf("%T.optor (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:optor: %s", p, err)
	}
	return err
}

func (p *ProcessReportedMsgReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetComment() {
		if err := oprot.WriteFieldBegin("comment", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:comment: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Comment)); err != nil {
			return fmt.Errorf("%T.comment (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:comment: %s", p, err)
		}
	}
	return err
}

func (p *ProcessReportedMsgReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProcessReportedMsgReq(%+v)", *p)
}

type ProcessReportedMsgReturn struct {
	ErrInfo *ErrInfo `thrift:"err_info,1,required" json:"err_info"`
	Desc    *string  `thrift:"desc,2" json:"desc"`
}

func NewProcessReportedMsgReturn() *ProcessReportedMsgReturn {
	return &ProcessReportedMsgReturn{}
}

var ProcessReportedMsgReturn_ErrInfo_DEFAULT *ErrInfo

func (p *ProcessReportedMsgReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return ProcessReportedMsgReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var ProcessReportedMsgReturn_Desc_DEFAULT string

func (p *ProcessReportedMsgReturn) GetDesc() string {
	if !p.IsSetDesc() {
		return ProcessReportedMsgReturn_Desc_DEFAULT
	}
	return *p.Desc
}
func (p *ProcessReportedMsgReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *ProcessReportedMsgReturn) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *ProcessReportedMsgReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ProcessReportedMsgReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *ProcessReportedMsgReturn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *ProcessReportedMsgReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProcessReportedMsgReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ProcessReportedMsgReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *ProcessReportedMsgReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:desc: %s", p, err)
		}
	}
	return err
}

func (p *ProcessReportedMsgReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProcessReportedMsgReturn(%+v)", *p)
}

type ReportRecord struct {
	Uid            int64   `thrift:"uid,1,required" json:"uid"`
	Nickname       string  `thrift:"nickname,2,required" json:"nickname"`
	ViolationLevel int32   `thrift:"violation_level,3,required" json:"violation_level"`
	ProcessTime    int64   `thrift:"process_time,4,required" json:"process_time"`
	Optor          string  `thrift:"optor,5,required" json:"optor"`
	Comment        *string `thrift:"comment,6" json:"comment"`
}

func NewReportRecord() *ReportRecord {
	return &ReportRecord{}
}

func (p *ReportRecord) GetUid() int64 {
	return p.Uid
}

func (p *ReportRecord) GetNickname() string {
	return p.Nickname
}

func (p *ReportRecord) GetViolationLevel() int32 {
	return p.ViolationLevel
}

func (p *ReportRecord) GetProcessTime() int64 {
	return p.ProcessTime
}

func (p *ReportRecord) GetOptor() string {
	return p.Optor
}

var ReportRecord_Comment_DEFAULT string

func (p *ReportRecord) GetComment() string {
	if !p.IsSetComment() {
		return ReportRecord_Comment_DEFAULT
	}
	return *p.Comment
}
func (p *ReportRecord) IsSetComment() bool {
	return p.Comment != nil
}

func (p *ReportRecord) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportRecord) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *ReportRecord) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Nickname = v
	}
	return nil
}

func (p *ReportRecord) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ViolationLevel = v
	}
	return nil
}

func (p *ReportRecord) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ProcessTime = v
	}
	return nil
}

func (p *ReportRecord) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Optor = v
	}
	return nil
}

func (p *ReportRecord) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Comment = &v
	}
	return nil
}

func (p *ReportRecord) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReportRecord"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *ReportRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:nickname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Nickname)); err != nil {
		return fmt.Errorf("%T.nickname (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:nickname: %s", p, err)
	}
	return err
}

func (p *ReportRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("violation_level", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:violation_level: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ViolationLevel)); err != nil {
		return fmt.Errorf("%T.violation_level (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:violation_level: %s", p, err)
	}
	return err
}

func (p *ReportRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("process_time", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:process_time: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ProcessTime)); err != nil {
		return fmt.Errorf("%T.process_time (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:process_time: %s", p, err)
	}
	return err
}

func (p *ReportRecord) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("optor", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:optor: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Optor)); err != nil {
		return fmt.Errorf("%T.optor (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:optor: %s", p, err)
	}
	return err
}

func (p *ReportRecord) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetComment() {
		if err := oprot.WriteFieldBegin("comment", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:comment: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Comment)); err != nil {
			return fmt.Errorf("%T.comment (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:comment: %s", p, err)
		}
	}
	return err
}

func (p *ReportRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportRecord(%+v)", *p)
}

type GetReportRecordReq struct {
	Uid        *int64  `thrift:"uid,1" json:"uid"`
	Nickname   *string `thrift:"nickname,2" json:"nickname"`
	Optor      *string `thrift:"optor,3" json:"optor"`
	StartIndex int32   `thrift:"start_index,4" json:"start_index"`
	Num        int32   `thrift:"num,5" json:"num"`
}

func NewGetReportRecordReq() *GetReportRecordReq {
	return &GetReportRecordReq{
		Num: 20,
	}
}

var GetReportRecordReq_Uid_DEFAULT int64

func (p *GetReportRecordReq) GetUid() int64 {
	if !p.IsSetUid() {
		return GetReportRecordReq_Uid_DEFAULT
	}
	return *p.Uid
}

var GetReportRecordReq_Nickname_DEFAULT string

func (p *GetReportRecordReq) GetNickname() string {
	if !p.IsSetNickname() {
		return GetReportRecordReq_Nickname_DEFAULT
	}
	return *p.Nickname
}

var GetReportRecordReq_Optor_DEFAULT string

func (p *GetReportRecordReq) GetOptor() string {
	if !p.IsSetOptor() {
		return GetReportRecordReq_Optor_DEFAULT
	}
	return *p.Optor
}

var GetReportRecordReq_StartIndex_DEFAULT int32 = 0

func (p *GetReportRecordReq) GetStartIndex() int32 {
	return p.StartIndex
}

var GetReportRecordReq_Num_DEFAULT int32 = 20

func (p *GetReportRecordReq) GetNum() int32 {
	return p.Num
}
func (p *GetReportRecordReq) IsSetUid() bool {
	return p.Uid != nil
}

func (p *GetReportRecordReq) IsSetNickname() bool {
	return p.Nickname != nil
}

func (p *GetReportRecordReq) IsSetOptor() bool {
	return p.Optor != nil
}

func (p *GetReportRecordReq) IsSetStartIndex() bool {
	return p.StartIndex != GetReportRecordReq_StartIndex_DEFAULT
}

func (p *GetReportRecordReq) IsSetNum() bool {
	return p.Num != GetReportRecordReq_Num_DEFAULT
}

func (p *GetReportRecordReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetReportRecordReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = &v
	}
	return nil
}

func (p *GetReportRecordReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Nickname = &v
	}
	return nil
}

func (p *GetReportRecordReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Optor = &v
	}
	return nil
}

func (p *GetReportRecordReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *GetReportRecordReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Num = v
	}
	return nil
}

func (p *GetReportRecordReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetReportRecordReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetReportRecordReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUid() {
		if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Uid)); err != nil {
			return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
		}
	}
	return err
}

func (p *GetReportRecordReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNickname() {
		if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:nickname: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Nickname)); err != nil {
			return fmt.Errorf("%T.nickname (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:nickname: %s", p, err)
		}
	}
	return err
}

func (p *GetReportRecordReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOptor() {
		if err := oprot.WriteFieldBegin("optor", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:optor: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Optor)); err != nil {
			return fmt.Errorf("%T.optor (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:optor: %s", p, err)
		}
	}
	return err
}

func (p *GetReportRecordReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err := oprot.WriteFieldBegin("start_index", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:start_index: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
			return fmt.Errorf("%T.start_index (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:start_index: %s", p, err)
		}
	}
	return err
}

func (p *GetReportRecordReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNum() {
		if err := oprot.WriteFieldBegin("num", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:num: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Num)); err != nil {
			return fmt.Errorf("%T.num (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:num: %s", p, err)
		}
	}
	return err
}

func (p *GetReportRecordReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReportRecordReq(%+v)", *p)
}

type GetReportRecordReturn struct {
	ErrInfo    *ErrInfo        `thrift:"err_info,1,required" json:"err_info"`
	TotalCount *int64          `thrift:"total_count,2" json:"total_count"`
	RecordList []*ReportRecord `thrift:"record_list,3" json:"record_list"`
}

func NewGetReportRecordReturn() *GetReportRecordReturn {
	return &GetReportRecordReturn{}
}

var GetReportRecordReturn_ErrInfo_DEFAULT *ErrInfo

func (p *GetReportRecordReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return GetReportRecordReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var GetReportRecordReturn_TotalCount_DEFAULT int64

func (p *GetReportRecordReturn) GetTotalCount() int64 {
	if !p.IsSetTotalCount() {
		return GetReportRecordReturn_TotalCount_DEFAULT
	}
	return *p.TotalCount
}

var GetReportRecordReturn_RecordList_DEFAULT []*ReportRecord

func (p *GetReportRecordReturn) GetRecordList() []*ReportRecord {
	return p.RecordList
}
func (p *GetReportRecordReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *GetReportRecordReturn) IsSetTotalCount() bool {
	return p.TotalCount != nil
}

func (p *GetReportRecordReturn) IsSetRecordList() bool {
	return p.RecordList != nil
}

func (p *GetReportRecordReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetReportRecordReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *GetReportRecordReturn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TotalCount = &v
	}
	return nil
}

func (p *GetReportRecordReturn) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ReportRecord, 0, size)
	p.RecordList = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &ReportRecord{}
		if err := _elem10.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem10, err)
		}
		p.RecordList = append(p.RecordList, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetReportRecordReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetReportRecordReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetReportRecordReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *GetReportRecordReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalCount() {
		if err := oprot.WriteFieldBegin("total_count", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:total_count: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TotalCount)); err != nil {
			return fmt.Errorf("%T.total_count (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:total_count: %s", p, err)
		}
	}
	return err
}

func (p *GetReportRecordReturn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecordList() {
		if err := oprot.WriteFieldBegin("record_list", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:record_list: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RecordList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.RecordList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:record_list: %s", p, err)
		}
	}
	return err
}

func (p *GetReportRecordReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReportRecordReturn(%+v)", *p)
}

type GetWatchingRuleReq struct {
}

func NewGetWatchingRuleReq() *GetWatchingRuleReq {
	return &GetWatchingRuleReq{}
}

func (p *GetWatchingRuleReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetWatchingRuleReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetWatchingRuleReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetWatchingRuleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWatchingRuleReq(%+v)", *p)
}

type GetWatchingRuleReturn struct {
	ErrInfo *ErrInfo `thrift:"err_info,1,required" json:"err_info"`
	Period  int32    `thrift:"period,2" json:"period"`
	Times   int32    `thrift:"times,3" json:"times"`
	Status  int32    `thrift:"status,4" json:"status"`
}

func NewGetWatchingRuleReturn() *GetWatchingRuleReturn {
	return &GetWatchingRuleReturn{
		Period: 10,

		Times: 3,

		Status: 3,
	}
}

var GetWatchingRuleReturn_ErrInfo_DEFAULT *ErrInfo

func (p *GetWatchingRuleReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return GetWatchingRuleReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var GetWatchingRuleReturn_Period_DEFAULT int32 = 10

func (p *GetWatchingRuleReturn) GetPeriod() int32 {
	return p.Period
}

var GetWatchingRuleReturn_Times_DEFAULT int32 = 3

func (p *GetWatchingRuleReturn) GetTimes() int32 {
	return p.Times
}

var GetWatchingRuleReturn_Status_DEFAULT int32 = 3

func (p *GetWatchingRuleReturn) GetStatus() int32 {
	return p.Status
}
func (p *GetWatchingRuleReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *GetWatchingRuleReturn) IsSetPeriod() bool {
	return p.Period != GetWatchingRuleReturn_Period_DEFAULT
}

func (p *GetWatchingRuleReturn) IsSetTimes() bool {
	return p.Times != GetWatchingRuleReturn_Times_DEFAULT
}

func (p *GetWatchingRuleReturn) IsSetStatus() bool {
	return p.Status != GetWatchingRuleReturn_Status_DEFAULT
}

func (p *GetWatchingRuleReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetWatchingRuleReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *GetWatchingRuleReturn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Period = v
	}
	return nil
}

func (p *GetWatchingRuleReturn) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Times = v
	}
	return nil
}

func (p *GetWatchingRuleReturn) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *GetWatchingRuleReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetWatchingRuleReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetWatchingRuleReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *GetWatchingRuleReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPeriod() {
		if err := oprot.WriteFieldBegin("period", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:period: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Period)); err != nil {
			return fmt.Errorf("%T.period (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:period: %s", p, err)
		}
	}
	return err
}

func (p *GetWatchingRuleReturn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimes() {
		if err := oprot.WriteFieldBegin("times", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:times: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Times)); err != nil {
			return fmt.Errorf("%T.times (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:times: %s", p, err)
		}
	}
	return err
}

func (p *GetWatchingRuleReturn) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:status: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Status)); err != nil {
			return fmt.Errorf("%T.status (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:status: %s", p, err)
		}
	}
	return err
}

func (p *GetWatchingRuleReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWatchingRuleReturn(%+v)", *p)
}

type SetWatchingRuleReq struct {
	Period int32 `thrift:"period,1" json:"period"`
	Times  int32 `thrift:"times,2" json:"times"`
	Status int32 `thrift:"status,3" json:"status"`
}

func NewSetWatchingRuleReq() *SetWatchingRuleReq {
	return &SetWatchingRuleReq{
		Period: 10,

		Times: 3,

		Status: 3,
	}
}

var SetWatchingRuleReq_Period_DEFAULT int32 = 10

func (p *SetWatchingRuleReq) GetPeriod() int32 {
	return p.Period
}

var SetWatchingRuleReq_Times_DEFAULT int32 = 3

func (p *SetWatchingRuleReq) GetTimes() int32 {
	return p.Times
}

var SetWatchingRuleReq_Status_DEFAULT int32 = 3

func (p *SetWatchingRuleReq) GetStatus() int32 {
	return p.Status
}
func (p *SetWatchingRuleReq) IsSetPeriod() bool {
	return p.Period != SetWatchingRuleReq_Period_DEFAULT
}

func (p *SetWatchingRuleReq) IsSetTimes() bool {
	return p.Times != SetWatchingRuleReq_Times_DEFAULT
}

func (p *SetWatchingRuleReq) IsSetStatus() bool {
	return p.Status != SetWatchingRuleReq_Status_DEFAULT
}

func (p *SetWatchingRuleReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetWatchingRuleReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Period = v
	}
	return nil
}

func (p *SetWatchingRuleReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Times = v
	}
	return nil
}

func (p *SetWatchingRuleReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *SetWatchingRuleReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetWatchingRuleReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetWatchingRuleReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPeriod() {
		if err := oprot.WriteFieldBegin("period", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:period: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Period)); err != nil {
			return fmt.Errorf("%T.period (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:period: %s", p, err)
		}
	}
	return err
}

func (p *SetWatchingRuleReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimes() {
		if err := oprot.WriteFieldBegin("times", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:times: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Times)); err != nil {
			return fmt.Errorf("%T.times (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:times: %s", p, err)
		}
	}
	return err
}

func (p *SetWatchingRuleReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:status: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Status)); err != nil {
			return fmt.Errorf("%T.status (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:status: %s", p, err)
		}
	}
	return err
}

func (p *SetWatchingRuleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetWatchingRuleReq(%+v)", *p)
}

type SetWatchingRuleReturn struct {
	ErrInfo *ErrInfo `thrift:"err_info,1,required" json:"err_info"`
}

func NewSetWatchingRuleReturn() *SetWatchingRuleReturn {
	return &SetWatchingRuleReturn{}
}

var SetWatchingRuleReturn_ErrInfo_DEFAULT *ErrInfo

func (p *SetWatchingRuleReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return SetWatchingRuleReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}
func (p *SetWatchingRuleReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *SetWatchingRuleReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetWatchingRuleReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *SetWatchingRuleReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetWatchingRuleReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetWatchingRuleReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *SetWatchingRuleReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetWatchingRuleReturn(%+v)", *p)
}

type WatchedMsg struct {
	Msgid     int64  `thrift:"msgid,1,required" json:"msgid"`
	Uid       int64  `thrift:"uid,2,required" json:"uid"`
	Nickname  string `thrift:"nickname,3,required" json:"nickname"`
	Identity  int32  `thrift:"identity,4,required" json:"identity"`
	Status    int32  `thrift:"status,5,required" json:"status"`
	Content   string `thrift:"content,6,required" json:"content"`
	PeerUid   int64  `thrift:"peer_uid,7,required" json:"peer_uid"`
	PeerUser  string `thrift:"peer_user,8,required" json:"peer_user"`
	AddTime   int64  `thrift:"add_time,9,required" json:"add_time"`
	StartTime *int64 `thrift:"start_time,10" json:"start_time"`
	EndTime   *int64 `thrift:"end_time,11" json:"end_time"`
}

func NewWatchedMsg() *WatchedMsg {
	return &WatchedMsg{}
}

func (p *WatchedMsg) GetMsgid() int64 {
	return p.Msgid
}

func (p *WatchedMsg) GetUid() int64 {
	return p.Uid
}

func (p *WatchedMsg) GetNickname() string {
	return p.Nickname
}

func (p *WatchedMsg) GetIdentity() int32 {
	return p.Identity
}

func (p *WatchedMsg) GetStatus() int32 {
	return p.Status
}

func (p *WatchedMsg) GetContent() string {
	return p.Content
}

func (p *WatchedMsg) GetPeerUid() int64 {
	return p.PeerUid
}

func (p *WatchedMsg) GetPeerUser() string {
	return p.PeerUser
}

func (p *WatchedMsg) GetAddTime() int64 {
	return p.AddTime
}

var WatchedMsg_StartTime_DEFAULT int64

func (p *WatchedMsg) GetStartTime() int64 {
	if !p.IsSetStartTime() {
		return WatchedMsg_StartTime_DEFAULT
	}
	return *p.StartTime
}

var WatchedMsg_EndTime_DEFAULT int64

func (p *WatchedMsg) GetEndTime() int64 {
	if !p.IsSetEndTime() {
		return WatchedMsg_EndTime_DEFAULT
	}
	return *p.EndTime
}
func (p *WatchedMsg) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *WatchedMsg) IsSetEndTime() bool {
	return p.EndTime != nil
}

func (p *WatchedMsg) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *WatchedMsg) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msgid = v
	}
	return nil
}

func (p *WatchedMsg) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *WatchedMsg) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Nickname = v
	}
	return nil
}

func (p *WatchedMsg) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Identity = v
	}
	return nil
}

func (p *WatchedMsg) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *WatchedMsg) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *WatchedMsg) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.PeerUid = v
	}
	return nil
}

func (p *WatchedMsg) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.PeerUser = v
	}
	return nil
}

func (p *WatchedMsg) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.AddTime = v
	}
	return nil
}

func (p *WatchedMsg) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *WatchedMsg) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.EndTime = &v
	}
	return nil
}

func (p *WatchedMsg) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WatchedMsg"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *WatchedMsg) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msgid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Msgid)); err != nil {
		return fmt.Errorf("%T.msgid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msgid: %s", p, err)
	}
	return err
}

func (p *WatchedMsg) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uid: %s", p, err)
	}
	return err
}

func (p *WatchedMsg) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:nickname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Nickname)); err != nil {
		return fmt.Errorf("%T.nickname (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:nickname: %s", p, err)
	}
	return err
}

func (p *WatchedMsg) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identity", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:identity: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Identity)); err != nil {
		return fmt.Errorf("%T.identity (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:identity: %s", p, err)
	}
	return err
}

func (p *WatchedMsg) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.status (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:status: %s", p, err)
	}
	return err
}

func (p *WatchedMsg) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:content: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return fmt.Errorf("%T.content (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:content: %s", p, err)
	}
	return err
}

func (p *WatchedMsg) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("peer_uid", thrift.I64, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:peer_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PeerUid)); err != nil {
		return fmt.Errorf("%T.peer_uid (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:peer_uid: %s", p, err)
	}
	return err
}

func (p *WatchedMsg) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("peer_user", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:peer_user: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PeerUser)); err != nil {
		return fmt.Errorf("%T.peer_user (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:peer_user: %s", p, err)
	}
	return err
}

func (p *WatchedMsg) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("add_time", thrift.I64, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:add_time: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.AddTime)); err != nil {
		return fmt.Errorf("%T.add_time (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:add_time: %s", p, err)
	}
	return err
}

func (p *WatchedMsg) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err := oprot.WriteFieldBegin("start_time", thrift.I64, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:start_time: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.StartTime)); err != nil {
			return fmt.Errorf("%T.start_time (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:start_time: %s", p, err)
		}
	}
	return err
}

func (p *WatchedMsg) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTime() {
		if err := oprot.WriteFieldBegin("end_time", thrift.I64, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:end_time: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EndTime)); err != nil {
			return fmt.Errorf("%T.end_time (11) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:end_time: %s", p, err)
		}
	}
	return err
}

func (p *WatchedMsg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WatchedMsg(%+v)", *p)
}

type GetWatchedMsgReq struct {
	Uid        *int64  `thrift:"uid,1" json:"uid"`
	Nickname   *string `thrift:"nickname,2" json:"nickname"`
	Identity   int32   `thrift:"identity,3" json:"identity"`
	StartIndex int32   `thrift:"start_index,4" json:"start_index"`
	Num        int32   `thrift:"num,5" json:"num"`
}

func NewGetWatchedMsgReq() *GetWatchedMsgReq {
	return &GetWatchedMsgReq{
		Num: 20,
	}
}

var GetWatchedMsgReq_Uid_DEFAULT int64

func (p *GetWatchedMsgReq) GetUid() int64 {
	if !p.IsSetUid() {
		return GetWatchedMsgReq_Uid_DEFAULT
	}
	return *p.Uid
}

var GetWatchedMsgReq_Nickname_DEFAULT string

func (p *GetWatchedMsgReq) GetNickname() string {
	if !p.IsSetNickname() {
		return GetWatchedMsgReq_Nickname_DEFAULT
	}
	return *p.Nickname
}

var GetWatchedMsgReq_Identity_DEFAULT int32 = 0

func (p *GetWatchedMsgReq) GetIdentity() int32 {
	return p.Identity
}

var GetWatchedMsgReq_StartIndex_DEFAULT int32 = 0

func (p *GetWatchedMsgReq) GetStartIndex() int32 {
	return p.StartIndex
}

var GetWatchedMsgReq_Num_DEFAULT int32 = 20

func (p *GetWatchedMsgReq) GetNum() int32 {
	return p.Num
}
func (p *GetWatchedMsgReq) IsSetUid() bool {
	return p.Uid != nil
}

func (p *GetWatchedMsgReq) IsSetNickname() bool {
	return p.Nickname != nil
}

func (p *GetWatchedMsgReq) IsSetIdentity() bool {
	return p.Identity != GetWatchedMsgReq_Identity_DEFAULT
}

func (p *GetWatchedMsgReq) IsSetStartIndex() bool {
	return p.StartIndex != GetWatchedMsgReq_StartIndex_DEFAULT
}

func (p *GetWatchedMsgReq) IsSetNum() bool {
	return p.Num != GetWatchedMsgReq_Num_DEFAULT
}

func (p *GetWatchedMsgReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetWatchedMsgReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = &v
	}
	return nil
}

func (p *GetWatchedMsgReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Nickname = &v
	}
	return nil
}

func (p *GetWatchedMsgReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Identity = v
	}
	return nil
}

func (p *GetWatchedMsgReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *GetWatchedMsgReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Num = v
	}
	return nil
}

func (p *GetWatchedMsgReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetWatchedMsgReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetWatchedMsgReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUid() {
		if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Uid)); err != nil {
			return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
		}
	}
	return err
}

func (p *GetWatchedMsgReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNickname() {
		if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:nickname: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Nickname)); err != nil {
			return fmt.Errorf("%T.nickname (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:nickname: %s", p, err)
		}
	}
	return err
}

func (p *GetWatchedMsgReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdentity() {
		if err := oprot.WriteFieldBegin("identity", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:identity: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Identity)); err != nil {
			return fmt.Errorf("%T.identity (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:identity: %s", p, err)
		}
	}
	return err
}

func (p *GetWatchedMsgReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err := oprot.WriteFieldBegin("start_index", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:start_index: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
			return fmt.Errorf("%T.start_index (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:start_index: %s", p, err)
		}
	}
	return err
}

func (p *GetWatchedMsgReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNum() {
		if err := oprot.WriteFieldBegin("num", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:num: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Num)); err != nil {
			return fmt.Errorf("%T.num (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:num: %s", p, err)
		}
	}
	return err
}

func (p *GetWatchedMsgReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWatchedMsgReq(%+v)", *p)
}

type GetWatchedMsgReturn struct {
	ErrInfo    *ErrInfo      `thrift:"err_info,1,required" json:"err_info"`
	TotalCount *int64        `thrift:"total_count,2" json:"total_count"`
	MsgList    []*WatchedMsg `thrift:"msg_list,3" json:"msg_list"`
}

func NewGetWatchedMsgReturn() *GetWatchedMsgReturn {
	return &GetWatchedMsgReturn{}
}

var GetWatchedMsgReturn_ErrInfo_DEFAULT *ErrInfo

func (p *GetWatchedMsgReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return GetWatchedMsgReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var GetWatchedMsgReturn_TotalCount_DEFAULT int64

func (p *GetWatchedMsgReturn) GetTotalCount() int64 {
	if !p.IsSetTotalCount() {
		return GetWatchedMsgReturn_TotalCount_DEFAULT
	}
	return *p.TotalCount
}

var GetWatchedMsgReturn_MsgList_DEFAULT []*WatchedMsg

func (p *GetWatchedMsgReturn) GetMsgList() []*WatchedMsg {
	return p.MsgList
}
func (p *GetWatchedMsgReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *GetWatchedMsgReturn) IsSetTotalCount() bool {
	return p.TotalCount != nil
}

func (p *GetWatchedMsgReturn) IsSetMsgList() bool {
	return p.MsgList != nil
}

func (p *GetWatchedMsgReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetWatchedMsgReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *GetWatchedMsgReturn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TotalCount = &v
	}
	return nil
}

func (p *GetWatchedMsgReturn) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*WatchedMsg, 0, size)
	p.MsgList = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &WatchedMsg{}
		if err := _elem11.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem11, err)
		}
		p.MsgList = append(p.MsgList, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetWatchedMsgReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetWatchedMsgReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetWatchedMsgReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *GetWatchedMsgReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalCount() {
		if err := oprot.WriteFieldBegin("total_count", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:total_count: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TotalCount)); err != nil {
			return fmt.Errorf("%T.total_count (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:total_count: %s", p, err)
		}
	}
	return err
}

func (p *GetWatchedMsgReturn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgList() {
		if err := oprot.WriteFieldBegin("msg_list", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:msg_list: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MsgList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.MsgList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:msg_list: %s", p, err)
		}
	}
	return err
}

func (p *GetWatchedMsgReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWatchedMsgReturn(%+v)", *p)
}

type SilencedUser struct {
	Uid       int64  `thrift:"uid,1,required" json:"uid"`
	Nickname  string `thrift:"nickname,2,required" json:"nickname"`
	Identity  int32  `thrift:"identity,3,required" json:"identity"`
	Status    int32  `thrift:"status,4,required" json:"status"`
	Source    int32  `thrift:"source,5,required" json:"source"`
	StartTime *int64 `thrift:"start_time,6" json:"start_time"`
	EndTime   *int64 `thrift:"end_time,7" json:"end_time"`
}

func NewSilencedUser() *SilencedUser {
	return &SilencedUser{}
}

func (p *SilencedUser) GetUid() int64 {
	return p.Uid
}

func (p *SilencedUser) GetNickname() string {
	return p.Nickname
}

func (p *SilencedUser) GetIdentity() int32 {
	return p.Identity
}

func (p *SilencedUser) GetStatus() int32 {
	return p.Status
}

func (p *SilencedUser) GetSource() int32 {
	return p.Source
}

var SilencedUser_StartTime_DEFAULT int64

func (p *SilencedUser) GetStartTime() int64 {
	if !p.IsSetStartTime() {
		return SilencedUser_StartTime_DEFAULT
	}
	return *p.StartTime
}

var SilencedUser_EndTime_DEFAULT int64

func (p *SilencedUser) GetEndTime() int64 {
	if !p.IsSetEndTime() {
		return SilencedUser_EndTime_DEFAULT
	}
	return *p.EndTime
}
func (p *SilencedUser) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *SilencedUser) IsSetEndTime() bool {
	return p.EndTime != nil
}

func (p *SilencedUser) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SilencedUser) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *SilencedUser) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Nickname = v
	}
	return nil
}

func (p *SilencedUser) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Identity = v
	}
	return nil
}

func (p *SilencedUser) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *SilencedUser) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Source = v
	}
	return nil
}

func (p *SilencedUser) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *SilencedUser) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.EndTime = &v
	}
	return nil
}

func (p *SilencedUser) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SilencedUser"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SilencedUser) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *SilencedUser) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:nickname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Nickname)); err != nil {
		return fmt.Errorf("%T.nickname (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:nickname: %s", p, err)
	}
	return err
}

func (p *SilencedUser) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identity", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:identity: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Identity)); err != nil {
		return fmt.Errorf("%T.identity (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:identity: %s", p, err)
	}
	return err
}

func (p *SilencedUser) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.status (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:status: %s", p, err)
	}
	return err
}

func (p *SilencedUser) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:source: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Source)); err != nil {
		return fmt.Errorf("%T.source (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:source: %s", p, err)
	}
	return err
}

func (p *SilencedUser) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err := oprot.WriteFieldBegin("start_time", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:start_time: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.StartTime)); err != nil {
			return fmt.Errorf("%T.start_time (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:start_time: %s", p, err)
		}
	}
	return err
}

func (p *SilencedUser) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTime() {
		if err := oprot.WriteFieldBegin("end_time", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:end_time: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EndTime)); err != nil {
			return fmt.Errorf("%T.end_time (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:end_time: %s", p, err)
		}
	}
	return err
}

func (p *SilencedUser) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SilencedUser(%+v)", *p)
}

type GetSilencedUserReq struct {
	Uid        *int64  `thrift:"uid,1" json:"uid"`
	Nickname   *string `thrift:"nickname,2" json:"nickname"`
	Identity   int32   `thrift:"identity,3" json:"identity"`
	Status     int32   `thrift:"status,4" json:"status"`
	StartIndex int32   `thrift:"start_index,5" json:"start_index"`
	Num        int32   `thrift:"num,6" json:"num"`
}

func NewGetSilencedUserReq() *GetSilencedUserReq {
	return &GetSilencedUserReq{
		Num: 20,
	}
}

var GetSilencedUserReq_Uid_DEFAULT int64

func (p *GetSilencedUserReq) GetUid() int64 {
	if !p.IsSetUid() {
		return GetSilencedUserReq_Uid_DEFAULT
	}
	return *p.Uid
}

var GetSilencedUserReq_Nickname_DEFAULT string

func (p *GetSilencedUserReq) GetNickname() string {
	if !p.IsSetNickname() {
		return GetSilencedUserReq_Nickname_DEFAULT
	}
	return *p.Nickname
}

var GetSilencedUserReq_Identity_DEFAULT int32 = 0

func (p *GetSilencedUserReq) GetIdentity() int32 {
	return p.Identity
}

var GetSilencedUserReq_Status_DEFAULT int32 = 0

func (p *GetSilencedUserReq) GetStatus() int32 {
	return p.Status
}

var GetSilencedUserReq_StartIndex_DEFAULT int32 = 0

func (p *GetSilencedUserReq) GetStartIndex() int32 {
	return p.StartIndex
}

var GetSilencedUserReq_Num_DEFAULT int32 = 20

func (p *GetSilencedUserReq) GetNum() int32 {
	return p.Num
}
func (p *GetSilencedUserReq) IsSetUid() bool {
	return p.Uid != nil
}

func (p *GetSilencedUserReq) IsSetNickname() bool {
	return p.Nickname != nil
}

func (p *GetSilencedUserReq) IsSetIdentity() bool {
	return p.Identity != GetSilencedUserReq_Identity_DEFAULT
}

func (p *GetSilencedUserReq) IsSetStatus() bool {
	return p.Status != GetSilencedUserReq_Status_DEFAULT
}

func (p *GetSilencedUserReq) IsSetStartIndex() bool {
	return p.StartIndex != GetSilencedUserReq_StartIndex_DEFAULT
}

func (p *GetSilencedUserReq) IsSetNum() bool {
	return p.Num != GetSilencedUserReq_Num_DEFAULT
}

func (p *GetSilencedUserReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSilencedUserReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = &v
	}
	return nil
}

func (p *GetSilencedUserReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Nickname = &v
	}
	return nil
}

func (p *GetSilencedUserReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Identity = v
	}
	return nil
}

func (p *GetSilencedUserReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *GetSilencedUserReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *GetSilencedUserReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Num = v
	}
	return nil
}

func (p *GetSilencedUserReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSilencedUserReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSilencedUserReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUid() {
		if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Uid)); err != nil {
			return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
		}
	}
	return err
}

func (p *GetSilencedUserReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNickname() {
		if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:nickname: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Nickname)); err != nil {
			return fmt.Errorf("%T.nickname (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:nickname: %s", p, err)
		}
	}
	return err
}

func (p *GetSilencedUserReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdentity() {
		if err := oprot.WriteFieldBegin("identity", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:identity: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Identity)); err != nil {
			return fmt.Errorf("%T.identity (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:identity: %s", p, err)
		}
	}
	return err
}

func (p *GetSilencedUserReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:status: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Status)); err != nil {
			return fmt.Errorf("%T.status (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:status: %s", p, err)
		}
	}
	return err
}

func (p *GetSilencedUserReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err := oprot.WriteFieldBegin("start_index", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:start_index: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
			return fmt.Errorf("%T.start_index (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:start_index: %s", p, err)
		}
	}
	return err
}

func (p *GetSilencedUserReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNum() {
		if err := oprot.WriteFieldBegin("num", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:num: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Num)); err != nil {
			return fmt.Errorf("%T.num (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:num: %s", p, err)
		}
	}
	return err
}

func (p *GetSilencedUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSilencedUserReq(%+v)", *p)
}

type GetSilencedUserReturn struct {
	ErrInfo    *ErrInfo        `thrift:"err_info,1,required" json:"err_info"`
	TotalCount *int64          `thrift:"total_count,2" json:"total_count"`
	UserList   []*SilencedUser `thrift:"user_list,3" json:"user_list"`
}

func NewGetSilencedUserReturn() *GetSilencedUserReturn {
	return &GetSilencedUserReturn{}
}

var GetSilencedUserReturn_ErrInfo_DEFAULT *ErrInfo

func (p *GetSilencedUserReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return GetSilencedUserReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var GetSilencedUserReturn_TotalCount_DEFAULT int64

func (p *GetSilencedUserReturn) GetTotalCount() int64 {
	if !p.IsSetTotalCount() {
		return GetSilencedUserReturn_TotalCount_DEFAULT
	}
	return *p.TotalCount
}

var GetSilencedUserReturn_UserList_DEFAULT []*SilencedUser

func (p *GetSilencedUserReturn) GetUserList() []*SilencedUser {
	return p.UserList
}
func (p *GetSilencedUserReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *GetSilencedUserReturn) IsSetTotalCount() bool {
	return p.TotalCount != nil
}

func (p *GetSilencedUserReturn) IsSetUserList() bool {
	return p.UserList != nil
}

func (p *GetSilencedUserReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSilencedUserReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *GetSilencedUserReturn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TotalCount = &v
	}
	return nil
}

func (p *GetSilencedUserReturn) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*SilencedUser, 0, size)
	p.UserList = tSlice
	for i := 0; i < size; i++ {
		_elem12 := &SilencedUser{}
		if err := _elem12.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem12, err)
		}
		p.UserList = append(p.UserList, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetSilencedUserReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSilencedUserReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSilencedUserReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *GetSilencedUserReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalCount() {
		if err := oprot.WriteFieldBegin("total_count", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:total_count: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TotalCount)); err != nil {
			return fmt.Errorf("%T.total_count (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:total_count: %s", p, err)
		}
	}
	return err
}

func (p *GetSilencedUserReturn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserList() {
		if err := oprot.WriteFieldBegin("user_list", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:user_list: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UserList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.UserList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:user_list: %s", p, err)
		}
	}
	return err
}

func (p *GetSilencedUserReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSilencedUserReturn(%+v)", *p)
}

type OutSilencedUserReq struct {
	Uid     int64   `thrift:"uid,1,required" json:"uid"`
	Optor   string  `thrift:"optor,2,required" json:"optor"`
	Comment *string `thrift:"comment,3" json:"comment"`
}

func NewOutSilencedUserReq() *OutSilencedUserReq {
	return &OutSilencedUserReq{}
}

func (p *OutSilencedUserReq) GetUid() int64 {
	return p.Uid
}

func (p *OutSilencedUserReq) GetOptor() string {
	return p.Optor
}

var OutSilencedUserReq_Comment_DEFAULT string

func (p *OutSilencedUserReq) GetComment() string {
	if !p.IsSetComment() {
		return OutSilencedUserReq_Comment_DEFAULT
	}
	return *p.Comment
}
func (p *OutSilencedUserReq) IsSetComment() bool {
	return p.Comment != nil
}

func (p *OutSilencedUserReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OutSilencedUserReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *OutSilencedUserReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Optor = v
	}
	return nil
}

func (p *OutSilencedUserReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Comment = &v
	}
	return nil
}

func (p *OutSilencedUserReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OutSilencedUserReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OutSilencedUserReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *OutSilencedUserReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("optor", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:optor: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Optor)); err != nil {
		return fmt.Errorf("%T.optor (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:optor: %s", p, err)
	}
	return err
}

func (p *OutSilencedUserReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetComment() {
		if err := oprot.WriteFieldBegin("comment", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:comment: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Comment)); err != nil {
			return fmt.Errorf("%T.comment (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:comment: %s", p, err)
		}
	}
	return err
}

func (p *OutSilencedUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OutSilencedUserReq(%+v)", *p)
}

type OutSilencedUserReturn struct {
	ErrInfo *ErrInfo `thrift:"err_info,1,required" json:"err_info"`
}

func NewOutSilencedUserReturn() *OutSilencedUserReturn {
	return &OutSilencedUserReturn{}
}

var OutSilencedUserReturn_ErrInfo_DEFAULT *ErrInfo

func (p *OutSilencedUserReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return OutSilencedUserReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}
func (p *OutSilencedUserReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *OutSilencedUserReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OutSilencedUserReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *OutSilencedUserReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OutSilencedUserReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OutSilencedUserReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *OutSilencedUserReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OutSilencedUserReturn(%+v)", *p)
}

type SilenceRecord struct {
	Uid       int64   `thrift:"uid,1,required" json:"uid"`
	Nickname  string  `thrift:"nickname,2,required" json:"nickname"`
	Identity  int32   `thrift:"identity,3,required" json:"identity"`
	Status    int32   `thrift:"status,4,required" json:"status"`
	Source    int32   `thrift:"source,5,required" json:"source"`
	AddTime   int64   `thrift:"add_time,6,required" json:"add_time"`
	Optor     string  `thrift:"optor,7,required" json:"optor"`
	StartTime *int64  `thrift:"start_time,8" json:"start_time"`
	EndTime   *int64  `thrift:"end_time,9" json:"end_time"`
	Comment   *string `thrift:"comment,10" json:"comment"`
}

func NewSilenceRecord() *SilenceRecord {
	return &SilenceRecord{}
}

func (p *SilenceRecord) GetUid() int64 {
	return p.Uid
}

func (p *SilenceRecord) GetNickname() string {
	return p.Nickname
}

func (p *SilenceRecord) GetIdentity() int32 {
	return p.Identity
}

func (p *SilenceRecord) GetStatus() int32 {
	return p.Status
}

func (p *SilenceRecord) GetSource() int32 {
	return p.Source
}

func (p *SilenceRecord) GetAddTime() int64 {
	return p.AddTime
}

func (p *SilenceRecord) GetOptor() string {
	return p.Optor
}

var SilenceRecord_StartTime_DEFAULT int64

func (p *SilenceRecord) GetStartTime() int64 {
	if !p.IsSetStartTime() {
		return SilenceRecord_StartTime_DEFAULT
	}
	return *p.StartTime
}

var SilenceRecord_EndTime_DEFAULT int64

func (p *SilenceRecord) GetEndTime() int64 {
	if !p.IsSetEndTime() {
		return SilenceRecord_EndTime_DEFAULT
	}
	return *p.EndTime
}

var SilenceRecord_Comment_DEFAULT string

func (p *SilenceRecord) GetComment() string {
	if !p.IsSetComment() {
		return SilenceRecord_Comment_DEFAULT
	}
	return *p.Comment
}
func (p *SilenceRecord) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *SilenceRecord) IsSetEndTime() bool {
	return p.EndTime != nil
}

func (p *SilenceRecord) IsSetComment() bool {
	return p.Comment != nil
}

func (p *SilenceRecord) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SilenceRecord) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *SilenceRecord) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Nickname = v
	}
	return nil
}

func (p *SilenceRecord) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Identity = v
	}
	return nil
}

func (p *SilenceRecord) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *SilenceRecord) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Source = v
	}
	return nil
}

func (p *SilenceRecord) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.AddTime = v
	}
	return nil
}

func (p *SilenceRecord) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Optor = v
	}
	return nil
}

func (p *SilenceRecord) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *SilenceRecord) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.EndTime = &v
	}
	return nil
}

func (p *SilenceRecord) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.Comment = &v
	}
	return nil
}

func (p *SilenceRecord) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SilenceRecord"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SilenceRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *SilenceRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:nickname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Nickname)); err != nil {
		return fmt.Errorf("%T.nickname (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:nickname: %s", p, err)
	}
	return err
}

func (p *SilenceRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identity", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:identity: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Identity)); err != nil {
		return fmt.Errorf("%T.identity (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:identity: %s", p, err)
	}
	return err
}

func (p *SilenceRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.status (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:status: %s", p, err)
	}
	return err
}

func (p *SilenceRecord) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:source: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Source)); err != nil {
		return fmt.Errorf("%T.source (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:source: %s", p, err)
	}
	return err
}

func (p *SilenceRecord) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("add_time", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:add_time: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.AddTime)); err != nil {
		return fmt.Errorf("%T.add_time (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:add_time: %s", p, err)
	}
	return err
}

func (p *SilenceRecord) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("optor", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:optor: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Optor)); err != nil {
		return fmt.Errorf("%T.optor (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:optor: %s", p, err)
	}
	return err
}

func (p *SilenceRecord) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err := oprot.WriteFieldBegin("start_time", thrift.I64, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:start_time: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.StartTime)); err != nil {
			return fmt.Errorf("%T.start_time (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:start_time: %s", p, err)
		}
	}
	return err
}

func (p *SilenceRecord) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTime() {
		if err := oprot.WriteFieldBegin("end_time", thrift.I64, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:end_time: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EndTime)); err != nil {
			return fmt.Errorf("%T.end_time (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:end_time: %s", p, err)
		}
	}
	return err
}

func (p *SilenceRecord) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetComment() {
		if err := oprot.WriteFieldBegin("comment", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:comment: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Comment)); err != nil {
			return fmt.Errorf("%T.comment (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:comment: %s", p, err)
		}
	}
	return err
}

func (p *SilenceRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SilenceRecord(%+v)", *p)
}

type GetSilenceRecordReq struct {
	Uid        *int64  `thrift:"uid,1" json:"uid"`
	Nickname   *string `thrift:"nickname,2" json:"nickname"`
	Optor      *string `thrift:"optor,3" json:"optor"`
	StartIndex int32   `thrift:"start_index,4" json:"start_index"`
	Num        int32   `thrift:"num,5" json:"num"`
}

func NewGetSilenceRecordReq() *GetSilenceRecordReq {
	return &GetSilenceRecordReq{
		Num: 20,
	}
}

var GetSilenceRecordReq_Uid_DEFAULT int64

func (p *GetSilenceRecordReq) GetUid() int64 {
	if !p.IsSetUid() {
		return GetSilenceRecordReq_Uid_DEFAULT
	}
	return *p.Uid
}

var GetSilenceRecordReq_Nickname_DEFAULT string

func (p *GetSilenceRecordReq) GetNickname() string {
	if !p.IsSetNickname() {
		return GetSilenceRecordReq_Nickname_DEFAULT
	}
	return *p.Nickname
}

var GetSilenceRecordReq_Optor_DEFAULT string

func (p *GetSilenceRecordReq) GetOptor() string {
	if !p.IsSetOptor() {
		return GetSilenceRecordReq_Optor_DEFAULT
	}
	return *p.Optor
}

var GetSilenceRecordReq_StartIndex_DEFAULT int32 = 0

func (p *GetSilenceRecordReq) GetStartIndex() int32 {
	return p.StartIndex
}

var GetSilenceRecordReq_Num_DEFAULT int32 = 20

func (p *GetSilenceRecordReq) GetNum() int32 {
	return p.Num
}
func (p *GetSilenceRecordReq) IsSetUid() bool {
	return p.Uid != nil
}

func (p *GetSilenceRecordReq) IsSetNickname() bool {
	return p.Nickname != nil
}

func (p *GetSilenceRecordReq) IsSetOptor() bool {
	return p.Optor != nil
}

func (p *GetSilenceRecordReq) IsSetStartIndex() bool {
	return p.StartIndex != GetSilenceRecordReq_StartIndex_DEFAULT
}

func (p *GetSilenceRecordReq) IsSetNum() bool {
	return p.Num != GetSilenceRecordReq_Num_DEFAULT
}

func (p *GetSilenceRecordReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSilenceRecordReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = &v
	}
	return nil
}

func (p *GetSilenceRecordReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Nickname = &v
	}
	return nil
}

func (p *GetSilenceRecordReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Optor = &v
	}
	return nil
}

func (p *GetSilenceRecordReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *GetSilenceRecordReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Num = v
	}
	return nil
}

func (p *GetSilenceRecordReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSilenceRecordReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSilenceRecordReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUid() {
		if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Uid)); err != nil {
			return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
		}
	}
	return err
}

func (p *GetSilenceRecordReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNickname() {
		if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:nickname: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Nickname)); err != nil {
			return fmt.Errorf("%T.nickname (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:nickname: %s", p, err)
		}
	}
	return err
}

func (p *GetSilenceRecordReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOptor() {
		if err := oprot.WriteFieldBegin("optor", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:optor: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Optor)); err != nil {
			return fmt.Errorf("%T.optor (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:optor: %s", p, err)
		}
	}
	return err
}

func (p *GetSilenceRecordReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err := oprot.WriteFieldBegin("start_index", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:start_index: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
			return fmt.Errorf("%T.start_index (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:start_index: %s", p, err)
		}
	}
	return err
}

func (p *GetSilenceRecordReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNum() {
		if err := oprot.WriteFieldBegin("num", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:num: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Num)); err != nil {
			return fmt.Errorf("%T.num (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:num: %s", p, err)
		}
	}
	return err
}

func (p *GetSilenceRecordReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSilenceRecordReq(%+v)", *p)
}

type GetSilenceRecordReturn struct {
	ErrInfo    *ErrInfo         `thrift:"err_info,1,required" json:"err_info"`
	TotalCount *int64           `thrift:"total_count,2" json:"total_count"`
	RecordList []*SilenceRecord `thrift:"record_list,3" json:"record_list"`
}

func NewGetSilenceRecordReturn() *GetSilenceRecordReturn {
	return &GetSilenceRecordReturn{}
}

var GetSilenceRecordReturn_ErrInfo_DEFAULT *ErrInfo

func (p *GetSilenceRecordReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return GetSilenceRecordReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var GetSilenceRecordReturn_TotalCount_DEFAULT int64

func (p *GetSilenceRecordReturn) GetTotalCount() int64 {
	if !p.IsSetTotalCount() {
		return GetSilenceRecordReturn_TotalCount_DEFAULT
	}
	return *p.TotalCount
}

var GetSilenceRecordReturn_RecordList_DEFAULT []*SilenceRecord

func (p *GetSilenceRecordReturn) GetRecordList() []*SilenceRecord {
	return p.RecordList
}
func (p *GetSilenceRecordReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *GetSilenceRecordReturn) IsSetTotalCount() bool {
	return p.TotalCount != nil
}

func (p *GetSilenceRecordReturn) IsSetRecordList() bool {
	return p.RecordList != nil
}

func (p *GetSilenceRecordReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSilenceRecordReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *GetSilenceRecordReturn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TotalCount = &v
	}
	return nil
}

func (p *GetSilenceRecordReturn) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*SilenceRecord, 0, size)
	p.RecordList = tSlice
	for i := 0; i < size; i++ {
		_elem13 := &SilenceRecord{}
		if err := _elem13.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem13, err)
		}
		p.RecordList = append(p.RecordList, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetSilenceRecordReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSilenceRecordReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSilenceRecordReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *GetSilenceRecordReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalCount() {
		if err := oprot.WriteFieldBegin("total_count", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:total_count: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TotalCount)); err != nil {
			return fmt.Errorf("%T.total_count (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:total_count: %s", p, err)
		}
	}
	return err
}

func (p *GetSilenceRecordReturn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecordList() {
		if err := oprot.WriteFieldBegin("record_list", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:record_list: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RecordList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.RecordList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:record_list: %s", p, err)
		}
	}
	return err
}

func (p *GetSilenceRecordReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSilenceRecordReturn(%+v)", *p)
}

type RelationFollowInfo struct {
	Timestamp int64 `thrift:"timestamp,1,required" json:"timestamp"`
}

func NewRelationFollowInfo() *RelationFollowInfo {
	return &RelationFollowInfo{}
}

func (p *RelationFollowInfo) GetTimestamp() int64 {
	return p.Timestamp
}
func (p *RelationFollowInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RelationFollowInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *RelationFollowInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RelationFollowInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RelationFollowInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:timestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return fmt.Errorf("%T.timestamp (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:timestamp: %s", p, err)
	}
	return err
}

func (p *RelationFollowInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationFollowInfo(%+v)", *p)
}

type IsFollowerReq struct {
	MeUid      int64 `thrift:"me_uid,1,required" json:"me_uid"`
	Uid2       int64 `thrift:"uid2,2,required" json:"uid2"`
	FollowType int64 `thrift:"follow_type,3,required" json:"follow_type"`
}

func NewIsFollowerReq() *IsFollowerReq {
	return &IsFollowerReq{}
}

func (p *IsFollowerReq) GetMeUid() int64 {
	return p.MeUid
}

func (p *IsFollowerReq) GetUid2() int64 {
	return p.Uid2
}

func (p *IsFollowerReq) GetFollowType() int64 {
	return p.FollowType
}
func (p *IsFollowerReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IsFollowerReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MeUid = v
	}
	return nil
}

func (p *IsFollowerReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Uid2 = v
	}
	return nil
}

func (p *IsFollowerReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.FollowType = v
	}
	return nil
}

func (p *IsFollowerReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IsFollowerReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IsFollowerReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("me_uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:me_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MeUid)); err != nil {
		return fmt.Errorf("%T.me_uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:me_uid: %s", p, err)
	}
	return err
}

func (p *IsFollowerReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid2", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uid2: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid2)); err != nil {
		return fmt.Errorf("%T.uid2 (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uid2: %s", p, err)
	}
	return err
}

func (p *IsFollowerReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("follow_type", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:follow_type: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.FollowType)); err != nil {
		return fmt.Errorf("%T.follow_type (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:follow_type: %s", p, err)
	}
	return err
}

func (p *IsFollowerReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsFollowerReq(%+v)", *p)
}

type IsFollowerReturn struct {
	ErrInfo *ErrInfo `thrift:"err_info,1,required" json:"err_info"`
	Follow  int64    `thrift:"follow,2,required" json:"follow"`
}

func NewIsFollowerReturn() *IsFollowerReturn {
	return &IsFollowerReturn{}
}

var IsFollowerReturn_ErrInfo_DEFAULT *ErrInfo

func (p *IsFollowerReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return IsFollowerReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

func (p *IsFollowerReturn) GetFollow() int64 {
	return p.Follow
}
func (p *IsFollowerReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *IsFollowerReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IsFollowerReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *IsFollowerReturn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Follow = v
	}
	return nil
}

func (p *IsFollowerReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IsFollowerReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IsFollowerReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *IsFollowerReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("follow", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:follow: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Follow)); err != nil {
		return fmt.Errorf("%T.follow (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:follow: %s", p, err)
	}
	return err
}

func (p *IsFollowerReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsFollowerReturn(%+v)", *p)
}

type Follower struct {
	Uid int64 `thrift:"uid,1,required" json:"uid"`
}

func NewFollower() *Follower {
	return &Follower{}
}

func (p *Follower) GetUid() int64 {
	return p.Uid
}
func (p *Follower) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Follower) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *Follower) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Follower"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Follower) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *Follower) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Follower(%+v)", *p)
}

type GetAllMyFollowersReq struct {
	Uid        int64 `thrift:"uid,1,required" json:"uid"`
	FollowType int64 `thrift:"follow_type,2,required" json:"follow_type"`
}

func NewGetAllMyFollowersReq() *GetAllMyFollowersReq {
	return &GetAllMyFollowersReq{
		FollowType: 3,
	}
}

func (p *GetAllMyFollowersReq) GetUid() int64 {
	return p.Uid
}

func (p *GetAllMyFollowersReq) GetFollowType() int64 {
	return p.FollowType
}
func (p *GetAllMyFollowersReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllMyFollowersReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *GetAllMyFollowersReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.FollowType = v
	}
	return nil
}

func (p *GetAllMyFollowersReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAllMyFollowersReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllMyFollowersReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *GetAllMyFollowersReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("follow_type", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:follow_type: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.FollowType)); err != nil {
		return fmt.Errorf("%T.follow_type (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:follow_type: %s", p, err)
	}
	return err
}

func (p *GetAllMyFollowersReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllMyFollowersReq(%+v)", *p)
}

type GetAllMyFollowersReturn struct {
	ErrInfo        *ErrInfo    `thrift:"err_info,1,required" json:"err_info"`
	StockFollowers []*Follower `thrift:"stock_followers,2" json:"stock_followers"`
	ForexFollowers []*Follower `thrift:"forex_followers,3" json:"forex_followers"`
}

func NewGetAllMyFollowersReturn() *GetAllMyFollowersReturn {
	return &GetAllMyFollowersReturn{}
}

var GetAllMyFollowersReturn_ErrInfo_DEFAULT *ErrInfo

func (p *GetAllMyFollowersReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return GetAllMyFollowersReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var GetAllMyFollowersReturn_StockFollowers_DEFAULT []*Follower

func (p *GetAllMyFollowersReturn) GetStockFollowers() []*Follower {
	return p.StockFollowers
}

var GetAllMyFollowersReturn_ForexFollowers_DEFAULT []*Follower

func (p *GetAllMyFollowersReturn) GetForexFollowers() []*Follower {
	return p.ForexFollowers
}
func (p *GetAllMyFollowersReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *GetAllMyFollowersReturn) IsSetStockFollowers() bool {
	return p.StockFollowers != nil
}

func (p *GetAllMyFollowersReturn) IsSetForexFollowers() bool {
	return p.ForexFollowers != nil
}

func (p *GetAllMyFollowersReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllMyFollowersReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *GetAllMyFollowersReturn) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Follower, 0, size)
	p.StockFollowers = tSlice
	for i := 0; i < size; i++ {
		_elem14 := &Follower{}
		if err := _elem14.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem14, err)
		}
		p.StockFollowers = append(p.StockFollowers, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetAllMyFollowersReturn) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Follower, 0, size)
	p.ForexFollowers = tSlice
	for i := 0; i < size; i++ {
		_elem15 := &Follower{}
		if err := _elem15.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem15, err)
		}
		p.ForexFollowers = append(p.ForexFollowers, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetAllMyFollowersReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAllMyFollowersReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllMyFollowersReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *GetAllMyFollowersReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStockFollowers() {
		if err := oprot.WriteFieldBegin("stock_followers", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:stock_followers: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StockFollowers)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.StockFollowers {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:stock_followers: %s", p, err)
		}
	}
	return err
}

func (p *GetAllMyFollowersReturn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetForexFollowers() {
		if err := oprot.WriteFieldBegin("forex_followers", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:forex_followers: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ForexFollowers)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.ForexFollowers {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:forex_followers: %s", p, err)
		}
	}
	return err
}

func (p *GetAllMyFollowersReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllMyFollowersReturn(%+v)", *p)
}

type OAPushUserNoticeMsgReq struct {
	Msgid         int64           `thrift:"msgid,1,required" json:"msgid"`
	TypeA1        int64           `thrift:"type,2,required" json:"type"`
	UidList       []int64         `thrift:"uid_list,3" json:"uid_list"`
	UidUrl        *string         `thrift:"uid_url,4" json:"uid_url"`
	MsgLevel      int32           `thrift:"msg_level,5" json:"msg_level"`
	SendStartTime int64           `thrift:"send_start_time,6" json:"send_start_time"`
	SendEndTime   int64           `thrift:"send_end_time,7" json:"send_end_time"`
	MsgZh         *PublishMsgNode `thrift:"msg_zh,8" json:"msg_zh"`
	MsgHk         *PublishMsgNode `thrift:"msg_hk,9" json:"msg_hk"`
	MsgEn         *PublishMsgNode `thrift:"msg_en,10" json:"msg_en"`
	PushBodyZh    *PushBody       `thrift:"push_body_zh,11" json:"push_body_zh"`
	PushBodyHk    *PushBody       `thrift:"push_body_hk,12" json:"push_body_hk"`
	PushBodyEn    *PushBody       `thrift:"push_body_en,13" json:"push_body_en"`
	BussMark      string          `thrift:"buss_mark,14" json:"buss_mark"`
}

func NewOAPushUserNoticeMsgReq() *OAPushUserNoticeMsgReq {
	return &OAPushUserNoticeMsgReq{
		BussMark: "PLATFORM",
	}
}

func (p *OAPushUserNoticeMsgReq) GetMsgid() int64 {
	return p.Msgid
}

func (p *OAPushUserNoticeMsgReq) GetTypeA1() int64 {
	return p.TypeA1
}

var OAPushUserNoticeMsgReq_UidList_DEFAULT []int64

func (p *OAPushUserNoticeMsgReq) GetUidList() []int64 {
	return p.UidList
}

var OAPushUserNoticeMsgReq_UidUrl_DEFAULT string

func (p *OAPushUserNoticeMsgReq) GetUidUrl() string {
	if !p.IsSetUidUrl() {
		return OAPushUserNoticeMsgReq_UidUrl_DEFAULT
	}
	return *p.UidUrl
}

var OAPushUserNoticeMsgReq_MsgLevel_DEFAULT int32 = 0

func (p *OAPushUserNoticeMsgReq) GetMsgLevel() int32 {
	return p.MsgLevel
}

var OAPushUserNoticeMsgReq_SendStartTime_DEFAULT int64 = 0

func (p *OAPushUserNoticeMsgReq) GetSendStartTime() int64 {
	return p.SendStartTime
}

var OAPushUserNoticeMsgReq_SendEndTime_DEFAULT int64 = 0

func (p *OAPushUserNoticeMsgReq) GetSendEndTime() int64 {
	return p.SendEndTime
}

var OAPushUserNoticeMsgReq_MsgZh_DEFAULT *PublishMsgNode

func (p *OAPushUserNoticeMsgReq) GetMsgZh() *PublishMsgNode {
	if !p.IsSetMsgZh() {
		return OAPushUserNoticeMsgReq_MsgZh_DEFAULT
	}
	return p.MsgZh
}

var OAPushUserNoticeMsgReq_MsgHk_DEFAULT *PublishMsgNode

func (p *OAPushUserNoticeMsgReq) GetMsgHk() *PublishMsgNode {
	if !p.IsSetMsgHk() {
		return OAPushUserNoticeMsgReq_MsgHk_DEFAULT
	}
	return p.MsgHk
}

var OAPushUserNoticeMsgReq_MsgEn_DEFAULT *PublishMsgNode

func (p *OAPushUserNoticeMsgReq) GetMsgEn() *PublishMsgNode {
	if !p.IsSetMsgEn() {
		return OAPushUserNoticeMsgReq_MsgEn_DEFAULT
	}
	return p.MsgEn
}

var OAPushUserNoticeMsgReq_PushBodyZh_DEFAULT *PushBody

func (p *OAPushUserNoticeMsgReq) GetPushBodyZh() *PushBody {
	if !p.IsSetPushBodyZh() {
		return OAPushUserNoticeMsgReq_PushBodyZh_DEFAULT
	}
	return p.PushBodyZh
}

var OAPushUserNoticeMsgReq_PushBodyHk_DEFAULT *PushBody

func (p *OAPushUserNoticeMsgReq) GetPushBodyHk() *PushBody {
	if !p.IsSetPushBodyHk() {
		return OAPushUserNoticeMsgReq_PushBodyHk_DEFAULT
	}
	return p.PushBodyHk
}

var OAPushUserNoticeMsgReq_PushBodyEn_DEFAULT *PushBody

func (p *OAPushUserNoticeMsgReq) GetPushBodyEn() *PushBody {
	if !p.IsSetPushBodyEn() {
		return OAPushUserNoticeMsgReq_PushBodyEn_DEFAULT
	}
	return p.PushBodyEn
}

var OAPushUserNoticeMsgReq_BussMark_DEFAULT string = "PLATFORM"

func (p *OAPushUserNoticeMsgReq) GetBussMark() string {
	return p.BussMark
}
func (p *OAPushUserNoticeMsgReq) IsSetUidList() bool {
	return p.UidList != nil
}

func (p *OAPushUserNoticeMsgReq) IsSetUidUrl() bool {
	return p.UidUrl != nil
}

func (p *OAPushUserNoticeMsgReq) IsSetMsgLevel() bool {
	return p.MsgLevel != OAPushUserNoticeMsgReq_MsgLevel_DEFAULT
}

func (p *OAPushUserNoticeMsgReq) IsSetSendStartTime() bool {
	return p.SendStartTime != OAPushUserNoticeMsgReq_SendStartTime_DEFAULT
}

func (p *OAPushUserNoticeMsgReq) IsSetSendEndTime() bool {
	return p.SendEndTime != OAPushUserNoticeMsgReq_SendEndTime_DEFAULT
}

func (p *OAPushUserNoticeMsgReq) IsSetMsgZh() bool {
	return p.MsgZh != nil
}

func (p *OAPushUserNoticeMsgReq) IsSetMsgHk() bool {
	return p.MsgHk != nil
}

func (p *OAPushUserNoticeMsgReq) IsSetMsgEn() bool {
	return p.MsgEn != nil
}

func (p *OAPushUserNoticeMsgReq) IsSetPushBodyZh() bool {
	return p.PushBodyZh != nil
}

func (p *OAPushUserNoticeMsgReq) IsSetPushBodyHk() bool {
	return p.PushBodyHk != nil
}

func (p *OAPushUserNoticeMsgReq) IsSetPushBodyEn() bool {
	return p.PushBodyEn != nil
}

func (p *OAPushUserNoticeMsgReq) IsSetBussMark() bool {
	return p.BussMark != OAPushUserNoticeMsgReq_BussMark_DEFAULT
}

func (p *OAPushUserNoticeMsgReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msgid = v
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.UidList = tSlice
	for i := 0; i < size; i++ {
		var _elem16 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem16 = v
		}
		p.UidList = append(p.UidList, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UidUrl = &v
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MsgLevel = v
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.SendStartTime = v
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.SendEndTime = v
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) ReadField8(iprot thrift.TProtocol) error {
	p.MsgZh = &PublishMsgNode{}
	if err := p.MsgZh.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MsgZh, err)
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) ReadField9(iprot thrift.TProtocol) error {
	p.MsgHk = &PublishMsgNode{}
	if err := p.MsgHk.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MsgHk, err)
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) ReadField10(iprot thrift.TProtocol) error {
	p.MsgEn = &PublishMsgNode{}
	if err := p.MsgEn.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MsgEn, err)
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) ReadField11(iprot thrift.TProtocol) error {
	p.PushBodyZh = &PushBody{
		Lang: "zh",
	}
	if err := p.PushBodyZh.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PushBodyZh, err)
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) ReadField12(iprot thrift.TProtocol) error {
	p.PushBodyHk = &PushBody{
		Lang: "zh",
	}
	if err := p.PushBodyHk.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PushBodyHk, err)
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) ReadField13(iprot thrift.TProtocol) error {
	p.PushBodyEn = &PushBody{
		Lang: "zh",
	}
	if err := p.PushBodyEn.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PushBodyEn, err)
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.BussMark = v
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAPushUserNoticeMsgReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAPushUserNoticeMsgReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msgid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Msgid)); err != nil {
		return fmt.Errorf("%T.msgid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msgid: %s", p, err)
	}
	return err
}

func (p *OAPushUserNoticeMsgReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:type: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:type: %s", p, err)
	}
	return err
}

func (p *OAPushUserNoticeMsgReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUidList() {
		if err := oprot.WriteFieldBegin("uid_list", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:uid_list: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.UidList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.UidList {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:uid_list: %s", p, err)
		}
	}
	return err
}

func (p *OAPushUserNoticeMsgReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUidUrl() {
		if err := oprot.WriteFieldBegin("uid_url", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:uid_url: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.UidUrl)); err != nil {
			return fmt.Errorf("%T.uid_url (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:uid_url: %s", p, err)
		}
	}
	return err
}

func (p *OAPushUserNoticeMsgReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgLevel() {
		if err := oprot.WriteFieldBegin("msg_level", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:msg_level: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MsgLevel)); err != nil {
			return fmt.Errorf("%T.msg_level (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:msg_level: %s", p, err)
		}
	}
	return err
}

func (p *OAPushUserNoticeMsgReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSendStartTime() {
		if err := oprot.WriteFieldBegin("send_start_time", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:send_start_time: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.SendStartTime)); err != nil {
			return fmt.Errorf("%T.send_start_time (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:send_start_time: %s", p, err)
		}
	}
	return err
}

func (p *OAPushUserNoticeMsgReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSendEndTime() {
		if err := oprot.WriteFieldBegin("send_end_time", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:send_end_time: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.SendEndTime)); err != nil {
			return fmt.Errorf("%T.send_end_time (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:send_end_time: %s", p, err)
		}
	}
	return err
}

func (p *OAPushUserNoticeMsgReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgZh() {
		if err := oprot.WriteFieldBegin("msg_zh", thrift.STRUCT, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:msg_zh: %s", p, err)
		}
		if err := p.MsgZh.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MsgZh, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:msg_zh: %s", p, err)
		}
	}
	return err
}

func (p *OAPushUserNoticeMsgReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgHk() {
		if err := oprot.WriteFieldBegin("msg_hk", thrift.STRUCT, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:msg_hk: %s", p, err)
		}
		if err := p.MsgHk.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MsgHk, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:msg_hk: %s", p, err)
		}
	}
	return err
}

func (p *OAPushUserNoticeMsgReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgEn() {
		if err := oprot.WriteFieldBegin("msg_en", thrift.STRUCT, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:msg_en: %s", p, err)
		}
		if err := p.MsgEn.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MsgEn, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:msg_en: %s", p, err)
		}
	}
	return err
}

func (p *OAPushUserNoticeMsgReq) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPushBodyZh() {
		if err := oprot.WriteFieldBegin("push_body_zh", thrift.STRUCT, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:push_body_zh: %s", p, err)
		}
		if err := p.PushBodyZh.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.PushBodyZh, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:push_body_zh: %s", p, err)
		}
	}
	return err
}

func (p *OAPushUserNoticeMsgReq) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetPushBodyHk() {
		if err := oprot.WriteFieldBegin("push_body_hk", thrift.STRUCT, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:push_body_hk: %s", p, err)
		}
		if err := p.PushBodyHk.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.PushBodyHk, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:push_body_hk: %s", p, err)
		}
	}
	return err
}

func (p *OAPushUserNoticeMsgReq) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPushBodyEn() {
		if err := oprot.WriteFieldBegin("push_body_en", thrift.STRUCT, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:push_body_en: %s", p, err)
		}
		if err := p.PushBodyEn.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.PushBodyEn, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:push_body_en: %s", p, err)
		}
	}
	return err
}

func (p *OAPushUserNoticeMsgReq) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetBussMark() {
		if err := oprot.WriteFieldBegin("buss_mark", thrift.STRING, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:buss_mark: %s", p, err)
		}
		if err := oprot.WriteString(string(p.BussMark)); err != nil {
			return fmt.Errorf("%T.buss_mark (14) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:buss_mark: %s", p, err)
		}
	}
	return err
}

func (p *OAPushUserNoticeMsgReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAPushUserNoticeMsgReq(%+v)", *p)
}

type OADelTimeUnreachedMsgReq struct {
	Msgid int64 `thrift:"msgid,1,required" json:"msgid"`
}

func NewOADelTimeUnreachedMsgReq() *OADelTimeUnreachedMsgReq {
	return &OADelTimeUnreachedMsgReq{}
}

func (p *OADelTimeUnreachedMsgReq) GetMsgid() int64 {
	return p.Msgid
}
func (p *OADelTimeUnreachedMsgReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OADelTimeUnreachedMsgReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msgid = v
	}
	return nil
}

func (p *OADelTimeUnreachedMsgReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OADelTimeUnreachedMsgReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OADelTimeUnreachedMsgReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msgid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Msgid)); err != nil {
		return fmt.Errorf("%T.msgid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msgid: %s", p, err)
	}
	return err
}

func (p *OADelTimeUnreachedMsgReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OADelTimeUnreachedMsgReq(%+v)", *p)
}

type OAQueryUserMsgReq struct {
	Uid        *int64  `thrift:"uid,1" json:"uid"`
	Identity   *int32  `thrift:"identity,2" json:"identity"`
	StartTime  *int64  `thrift:"start_time,3" json:"start_time"`
	EndTime    *int64  `thrift:"end_time,4" json:"end_time"`
	Nickname   *string `thrift:"nickname,5" json:"nickname"`
	Content    *string `thrift:"content,6" json:"content"`
	StartIndex int32   `thrift:"start_index,7" json:"start_index"`
	Num        int32   `thrift:"num,8" json:"num"`
}

func NewOAQueryUserMsgReq() *OAQueryUserMsgReq {
	return &OAQueryUserMsgReq{
		Num: 20,
	}
}

var OAQueryUserMsgReq_Uid_DEFAULT int64

func (p *OAQueryUserMsgReq) GetUid() int64 {
	if !p.IsSetUid() {
		return OAQueryUserMsgReq_Uid_DEFAULT
	}
	return *p.Uid
}

var OAQueryUserMsgReq_Identity_DEFAULT int32

func (p *OAQueryUserMsgReq) GetIdentity() int32 {
	if !p.IsSetIdentity() {
		return OAQueryUserMsgReq_Identity_DEFAULT
	}
	return *p.Identity
}

var OAQueryUserMsgReq_StartTime_DEFAULT int64

func (p *OAQueryUserMsgReq) GetStartTime() int64 {
	if !p.IsSetStartTime() {
		return OAQueryUserMsgReq_StartTime_DEFAULT
	}
	return *p.StartTime
}

var OAQueryUserMsgReq_EndTime_DEFAULT int64

func (p *OAQueryUserMsgReq) GetEndTime() int64 {
	if !p.IsSetEndTime() {
		return OAQueryUserMsgReq_EndTime_DEFAULT
	}
	return *p.EndTime
}

var OAQueryUserMsgReq_Nickname_DEFAULT string

func (p *OAQueryUserMsgReq) GetNickname() string {
	if !p.IsSetNickname() {
		return OAQueryUserMsgReq_Nickname_DEFAULT
	}
	return *p.Nickname
}

var OAQueryUserMsgReq_Content_DEFAULT string

func (p *OAQueryUserMsgReq) GetContent() string {
	if !p.IsSetContent() {
		return OAQueryUserMsgReq_Content_DEFAULT
	}
	return *p.Content
}

var OAQueryUserMsgReq_StartIndex_DEFAULT int32 = 0

func (p *OAQueryUserMsgReq) GetStartIndex() int32 {
	return p.StartIndex
}

var OAQueryUserMsgReq_Num_DEFAULT int32 = 20

func (p *OAQueryUserMsgReq) GetNum() int32 {
	return p.Num
}
func (p *OAQueryUserMsgReq) IsSetUid() bool {
	return p.Uid != nil
}

func (p *OAQueryUserMsgReq) IsSetIdentity() bool {
	return p.Identity != nil
}

func (p *OAQueryUserMsgReq) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *OAQueryUserMsgReq) IsSetEndTime() bool {
	return p.EndTime != nil
}

func (p *OAQueryUserMsgReq) IsSetNickname() bool {
	return p.Nickname != nil
}

func (p *OAQueryUserMsgReq) IsSetContent() bool {
	return p.Content != nil
}

func (p *OAQueryUserMsgReq) IsSetStartIndex() bool {
	return p.StartIndex != OAQueryUserMsgReq_StartIndex_DEFAULT
}

func (p *OAQueryUserMsgReq) IsSetNum() bool {
	return p.Num != OAQueryUserMsgReq_Num_DEFAULT
}

func (p *OAQueryUserMsgReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAQueryUserMsgReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = &v
	}
	return nil
}

func (p *OAQueryUserMsgReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Identity = &v
	}
	return nil
}

func (p *OAQueryUserMsgReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *OAQueryUserMsgReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.EndTime = &v
	}
	return nil
}

func (p *OAQueryUserMsgReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Nickname = &v
	}
	return nil
}

func (p *OAQueryUserMsgReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Content = &v
	}
	return nil
}

func (p *OAQueryUserMsgReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *OAQueryUserMsgReq) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Num = v
	}
	return nil
}

func (p *OAQueryUserMsgReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAQueryUserMsgReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAQueryUserMsgReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUid() {
		if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Uid)); err != nil {
			return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserMsgReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdentity() {
		if err := oprot.WriteFieldBegin("identity", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:identity: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Identity)); err != nil {
			return fmt.Errorf("%T.identity (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:identity: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserMsgReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err := oprot.WriteFieldBegin("start_time", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:start_time: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.StartTime)); err != nil {
			return fmt.Errorf("%T.start_time (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:start_time: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserMsgReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTime() {
		if err := oprot.WriteFieldBegin("end_time", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:end_time: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EndTime)); err != nil {
			return fmt.Errorf("%T.end_time (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:end_time: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserMsgReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNickname() {
		if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:nickname: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Nickname)); err != nil {
			return fmt.Errorf("%T.nickname (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:nickname: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserMsgReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err := oprot.WriteFieldBegin("content", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:content: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Content)); err != nil {
			return fmt.Errorf("%T.content (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:content: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserMsgReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err := oprot.WriteFieldBegin("start_index", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:start_index: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
			return fmt.Errorf("%T.start_index (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:start_index: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserMsgReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetNum() {
		if err := oprot.WriteFieldBegin("num", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:num: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Num)); err != nil {
			return fmt.Errorf("%T.num (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:num: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserMsgReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAQueryUserMsgReq(%+v)", *p)
}

type OAUserMsg struct {
	Msgid         int64    `thrift:"msgid,1,required" json:"msgid"`
	SrcUid        int64    `thrift:"src_uid,2,required" json:"src_uid"`
	DesUid        int64    `thrift:"des_uid,3,required" json:"des_uid"`
	SrcIdentity   int32    `thrift:"src_identity,4,required" json:"src_identity"`
	DesIdentity   int32    `thrift:"des_identity,5,required" json:"des_identity"`
	CreateTime    int64    `thrift:"create_time,6,required" json:"create_time"`
	MsgStatus     int32    `thrift:"msg_status,7,required" json:"msg_status"`
	SrcNickname   string   `thrift:"src_nickname,8,required" json:"src_nickname"`
	DesNickname   string   `thrift:"des_nickname,9,required" json:"des_nickname"`
	Content       string   `thrift:"content,10,required" json:"content"`
	CensoredWords []string `thrift:"censored_words,11" json:"censored_words"`
}

func NewOAUserMsg() *OAUserMsg {
	return &OAUserMsg{}
}

func (p *OAUserMsg) GetMsgid() int64 {
	return p.Msgid
}

func (p *OAUserMsg) GetSrcUid() int64 {
	return p.SrcUid
}

func (p *OAUserMsg) GetDesUid() int64 {
	return p.DesUid
}

func (p *OAUserMsg) GetSrcIdentity() int32 {
	return p.SrcIdentity
}

func (p *OAUserMsg) GetDesIdentity() int32 {
	return p.DesIdentity
}

func (p *OAUserMsg) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *OAUserMsg) GetMsgStatus() int32 {
	return p.MsgStatus
}

func (p *OAUserMsg) GetSrcNickname() string {
	return p.SrcNickname
}

func (p *OAUserMsg) GetDesNickname() string {
	return p.DesNickname
}

func (p *OAUserMsg) GetContent() string {
	return p.Content
}

var OAUserMsg_CensoredWords_DEFAULT []string

func (p *OAUserMsg) GetCensoredWords() []string {
	return p.CensoredWords
}
func (p *OAUserMsg) IsSetCensoredWords() bool {
	return p.CensoredWords != nil
}

func (p *OAUserMsg) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAUserMsg) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msgid = v
	}
	return nil
}

func (p *OAUserMsg) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SrcUid = v
	}
	return nil
}

func (p *OAUserMsg) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DesUid = v
	}
	return nil
}

func (p *OAUserMsg) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.SrcIdentity = v
	}
	return nil
}

func (p *OAUserMsg) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.DesIdentity = v
	}
	return nil
}

func (p *OAUserMsg) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *OAUserMsg) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.MsgStatus = v
	}
	return nil
}

func (p *OAUserMsg) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.SrcNickname = v
	}
	return nil
}

func (p *OAUserMsg) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.DesNickname = v
	}
	return nil
}

func (p *OAUserMsg) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *OAUserMsg) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.CensoredWords = tSlice
	for i := 0; i < size; i++ {
		var _elem17 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem17 = v
		}
		p.CensoredWords = append(p.CensoredWords, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *OAUserMsg) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAUserMsg"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAUserMsg) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msgid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Msgid)); err != nil {
		return fmt.Errorf("%T.msgid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msgid: %s", p, err)
	}
	return err
}

func (p *OAUserMsg) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("src_uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:src_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SrcUid)); err != nil {
		return fmt.Errorf("%T.src_uid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:src_uid: %s", p, err)
	}
	return err
}

func (p *OAUserMsg) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("des_uid", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:des_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.DesUid)); err != nil {
		return fmt.Errorf("%T.des_uid (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:des_uid: %s", p, err)
	}
	return err
}

func (p *OAUserMsg) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("src_identity", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:src_identity: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SrcIdentity)); err != nil {
		return fmt.Errorf("%T.src_identity (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:src_identity: %s", p, err)
	}
	return err
}

func (p *OAUserMsg) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("des_identity", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:des_identity: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DesIdentity)); err != nil {
		return fmt.Errorf("%T.des_identity (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:des_identity: %s", p, err)
	}
	return err
}

func (p *OAUserMsg) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_time", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:create_time: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.create_time (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:create_time: %s", p, err)
	}
	return err
}

func (p *OAUserMsg) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg_status", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:msg_status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MsgStatus)); err != nil {
		return fmt.Errorf("%T.msg_status (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:msg_status: %s", p, err)
	}
	return err
}

func (p *OAUserMsg) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("src_nickname", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:src_nickname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SrcNickname)); err != nil {
		return fmt.Errorf("%T.src_nickname (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:src_nickname: %s", p, err)
	}
	return err
}

func (p *OAUserMsg) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("des_nickname", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:des_nickname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DesNickname)); err != nil {
		return fmt.Errorf("%T.des_nickname (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:des_nickname: %s", p, err)
	}
	return err
}

func (p *OAUserMsg) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:content: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return fmt.Errorf("%T.content (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:content: %s", p, err)
	}
	return err
}

func (p *OAUserMsg) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCensoredWords() {
		if err := oprot.WriteFieldBegin("censored_words", thrift.LIST, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:censored_words: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.CensoredWords)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.CensoredWords {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:censored_words: %s", p, err)
		}
	}
	return err
}

func (p *OAUserMsg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAUserMsg(%+v)", *p)
}

type OAQueryUserMsgReturn struct {
	ErrInfo    *ErrInfo     `thrift:"err_info,1,required" json:"err_info"`
	TotalCount *int64       `thrift:"total_count,2" json:"total_count"`
	MsgList    []*OAUserMsg `thrift:"msg_list,3" json:"msg_list"`
}

func NewOAQueryUserMsgReturn() *OAQueryUserMsgReturn {
	return &OAQueryUserMsgReturn{}
}

var OAQueryUserMsgReturn_ErrInfo_DEFAULT *ErrInfo

func (p *OAQueryUserMsgReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return OAQueryUserMsgReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var OAQueryUserMsgReturn_TotalCount_DEFAULT int64

func (p *OAQueryUserMsgReturn) GetTotalCount() int64 {
	if !p.IsSetTotalCount() {
		return OAQueryUserMsgReturn_TotalCount_DEFAULT
	}
	return *p.TotalCount
}

var OAQueryUserMsgReturn_MsgList_DEFAULT []*OAUserMsg

func (p *OAQueryUserMsgReturn) GetMsgList() []*OAUserMsg {
	return p.MsgList
}
func (p *OAQueryUserMsgReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *OAQueryUserMsgReturn) IsSetTotalCount() bool {
	return p.TotalCount != nil
}

func (p *OAQueryUserMsgReturn) IsSetMsgList() bool {
	return p.MsgList != nil
}

func (p *OAQueryUserMsgReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAQueryUserMsgReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *OAQueryUserMsgReturn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TotalCount = &v
	}
	return nil
}

func (p *OAQueryUserMsgReturn) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*OAUserMsg, 0, size)
	p.MsgList = tSlice
	for i := 0; i < size; i++ {
		_elem18 := &OAUserMsg{}
		if err := _elem18.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem18, err)
		}
		p.MsgList = append(p.MsgList, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *OAQueryUserMsgReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAQueryUserMsgReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAQueryUserMsgReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *OAQueryUserMsgReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalCount() {
		if err := oprot.WriteFieldBegin("total_count", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:total_count: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TotalCount)); err != nil {
			return fmt.Errorf("%T.total_count (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:total_count: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserMsgReturn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgList() {
		if err := oprot.WriteFieldBegin("msg_list", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:msg_list: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MsgList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.MsgList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:msg_list: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserMsgReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAQueryUserMsgReturn(%+v)", *p)
}

type OAUserSentMsg struct {
	Msgid      int64   `thrift:"msgid,1,required" json:"msgid"`
	Uid        int64   `thrift:"uid,2,required" json:"uid"`
	OfficalId  int64   `thrift:"offical_id,3,required" json:"offical_id"`
	CreateTime int64   `thrift:"create_time,4,required" json:"create_time"`
	Status     int32   `thrift:"status,5,required" json:"status"`
	TypeA1     int32   `thrift:"type,6,required" json:"type"`
	Nickname   string  `thrift:"nickname,7,required" json:"nickname"`
	DesName    string  `thrift:"des_name,8,required" json:"des_name"`
	Content    string  `thrift:"content,9,required" json:"content"`
	Comment    *string `thrift:"comment,10" json:"comment"`
}

func NewOAUserSentMsg() *OAUserSentMsg {
	return &OAUserSentMsg{}
}

func (p *OAUserSentMsg) GetMsgid() int64 {
	return p.Msgid
}

func (p *OAUserSentMsg) GetUid() int64 {
	return p.Uid
}

func (p *OAUserSentMsg) GetOfficalId() int64 {
	return p.OfficalId
}

func (p *OAUserSentMsg) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *OAUserSentMsg) GetStatus() int32 {
	return p.Status
}

func (p *OAUserSentMsg) GetTypeA1() int32 {
	return p.TypeA1
}

func (p *OAUserSentMsg) GetNickname() string {
	return p.Nickname
}

func (p *OAUserSentMsg) GetDesName() string {
	return p.DesName
}

func (p *OAUserSentMsg) GetContent() string {
	return p.Content
}

var OAUserSentMsg_Comment_DEFAULT string

func (p *OAUserSentMsg) GetComment() string {
	if !p.IsSetComment() {
		return OAUserSentMsg_Comment_DEFAULT
	}
	return *p.Comment
}
func (p *OAUserSentMsg) IsSetComment() bool {
	return p.Comment != nil
}

func (p *OAUserSentMsg) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAUserSentMsg) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msgid = v
	}
	return nil
}

func (p *OAUserSentMsg) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *OAUserSentMsg) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.OfficalId = v
	}
	return nil
}

func (p *OAUserSentMsg) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *OAUserSentMsg) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *OAUserSentMsg) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *OAUserSentMsg) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Nickname = v
	}
	return nil
}

func (p *OAUserSentMsg) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.DesName = v
	}
	return nil
}

func (p *OAUserSentMsg) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *OAUserSentMsg) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.Comment = &v
	}
	return nil
}

func (p *OAUserSentMsg) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAUserSentMsg"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAUserSentMsg) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msgid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Msgid)); err != nil {
		return fmt.Errorf("%T.msgid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msgid: %s", p, err)
	}
	return err
}

func (p *OAUserSentMsg) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uid: %s", p, err)
	}
	return err
}

func (p *OAUserSentMsg) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offical_id", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:offical_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.OfficalId)); err != nil {
		return fmt.Errorf("%T.offical_id (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:offical_id: %s", p, err)
	}
	return err
}

func (p *OAUserSentMsg) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_time", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:create_time: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.create_time (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:create_time: %s", p, err)
	}
	return err
}

func (p *OAUserSentMsg) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.status (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:status: %s", p, err)
	}
	return err
}

func (p *OAUserSentMsg) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:type: %s", p, err)
	}
	return err
}

func (p *OAUserSentMsg) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:nickname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Nickname)); err != nil {
		return fmt.Errorf("%T.nickname (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:nickname: %s", p, err)
	}
	return err
}

func (p *OAUserSentMsg) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("des_name", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:des_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DesName)); err != nil {
		return fmt.Errorf("%T.des_name (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:des_name: %s", p, err)
	}
	return err
}

func (p *OAUserSentMsg) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:content: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return fmt.Errorf("%T.content (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:content: %s", p, err)
	}
	return err
}

func (p *OAUserSentMsg) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetComment() {
		if err := oprot.WriteFieldBegin("comment", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:comment: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Comment)); err != nil {
			return fmt.Errorf("%T.comment (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:comment: %s", p, err)
		}
	}
	return err
}

func (p *OAUserSentMsg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAUserSentMsg(%+v)", *p)
}

type OAQueryUserSentMsgReq struct {
	Uid        *int64  `thrift:"uid,1" json:"uid"`
	OfficalId  *int64  `thrift:"offical_id,2" json:"offical_id"`
	Nickname   *string `thrift:"nickname,3" json:"nickname"`
	Content    *string `thrift:"content,4" json:"content"`
	StartIndex int32   `thrift:"start_index,5" json:"start_index"`
	Num        int32   `thrift:"num,6" json:"num"`
}

func NewOAQueryUserSentMsgReq() *OAQueryUserSentMsgReq {
	return &OAQueryUserSentMsgReq{
		Num: 20,
	}
}

var OAQueryUserSentMsgReq_Uid_DEFAULT int64

func (p *OAQueryUserSentMsgReq) GetUid() int64 {
	if !p.IsSetUid() {
		return OAQueryUserSentMsgReq_Uid_DEFAULT
	}
	return *p.Uid
}

var OAQueryUserSentMsgReq_OfficalId_DEFAULT int64

func (p *OAQueryUserSentMsgReq) GetOfficalId() int64 {
	if !p.IsSetOfficalId() {
		return OAQueryUserSentMsgReq_OfficalId_DEFAULT
	}
	return *p.OfficalId
}

var OAQueryUserSentMsgReq_Nickname_DEFAULT string

func (p *OAQueryUserSentMsgReq) GetNickname() string {
	if !p.IsSetNickname() {
		return OAQueryUserSentMsgReq_Nickname_DEFAULT
	}
	return *p.Nickname
}

var OAQueryUserSentMsgReq_Content_DEFAULT string

func (p *OAQueryUserSentMsgReq) GetContent() string {
	if !p.IsSetContent() {
		return OAQueryUserSentMsgReq_Content_DEFAULT
	}
	return *p.Content
}

var OAQueryUserSentMsgReq_StartIndex_DEFAULT int32 = 0

func (p *OAQueryUserSentMsgReq) GetStartIndex() int32 {
	return p.StartIndex
}

var OAQueryUserSentMsgReq_Num_DEFAULT int32 = 20

func (p *OAQueryUserSentMsgReq) GetNum() int32 {
	return p.Num
}
func (p *OAQueryUserSentMsgReq) IsSetUid() bool {
	return p.Uid != nil
}

func (p *OAQueryUserSentMsgReq) IsSetOfficalId() bool {
	return p.OfficalId != nil
}

func (p *OAQueryUserSentMsgReq) IsSetNickname() bool {
	return p.Nickname != nil
}

func (p *OAQueryUserSentMsgReq) IsSetContent() bool {
	return p.Content != nil
}

func (p *OAQueryUserSentMsgReq) IsSetStartIndex() bool {
	return p.StartIndex != OAQueryUserSentMsgReq_StartIndex_DEFAULT
}

func (p *OAQueryUserSentMsgReq) IsSetNum() bool {
	return p.Num != OAQueryUserSentMsgReq_Num_DEFAULT
}

func (p *OAQueryUserSentMsgReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAQueryUserSentMsgReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = &v
	}
	return nil
}

func (p *OAQueryUserSentMsgReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.OfficalId = &v
	}
	return nil
}

func (p *OAQueryUserSentMsgReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Nickname = &v
	}
	return nil
}

func (p *OAQueryUserSentMsgReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Content = &v
	}
	return nil
}

func (p *OAQueryUserSentMsgReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *OAQueryUserSentMsgReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Num = v
	}
	return nil
}

func (p *OAQueryUserSentMsgReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAQueryUserSentMsgReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAQueryUserSentMsgReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUid() {
		if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Uid)); err != nil {
			return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserSentMsgReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOfficalId() {
		if err := oprot.WriteFieldBegin("offical_id", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:offical_id: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.OfficalId)); err != nil {
			return fmt.Errorf("%T.offical_id (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:offical_id: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserSentMsgReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNickname() {
		if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:nickname: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Nickname)); err != nil {
			return fmt.Errorf("%T.nickname (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:nickname: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserSentMsgReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err := oprot.WriteFieldBegin("content", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:content: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Content)); err != nil {
			return fmt.Errorf("%T.content (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:content: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserSentMsgReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err := oprot.WriteFieldBegin("start_index", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:start_index: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
			return fmt.Errorf("%T.start_index (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:start_index: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserSentMsgReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNum() {
		if err := oprot.WriteFieldBegin("num", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:num: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Num)); err != nil {
			return fmt.Errorf("%T.num (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:num: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserSentMsgReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAQueryUserSentMsgReq(%+v)", *p)
}

type OAQueryUserMsgRecordReq struct {
	Uid        int64 `thrift:"uid,1,required" json:"uid"`
	OfficalId  int64 `thrift:"offical_id,2,required" json:"offical_id"`
	StartIndex int32 `thrift:"start_index,3" json:"start_index"`
	Num        int32 `thrift:"num,4" json:"num"`
}

func NewOAQueryUserMsgRecordReq() *OAQueryUserMsgRecordReq {
	return &OAQueryUserMsgRecordReq{
		Num: 20,
	}
}

func (p *OAQueryUserMsgRecordReq) GetUid() int64 {
	return p.Uid
}

func (p *OAQueryUserMsgRecordReq) GetOfficalId() int64 {
	return p.OfficalId
}

var OAQueryUserMsgRecordReq_StartIndex_DEFAULT int32 = 0

func (p *OAQueryUserMsgRecordReq) GetStartIndex() int32 {
	return p.StartIndex
}

var OAQueryUserMsgRecordReq_Num_DEFAULT int32 = 20

func (p *OAQueryUserMsgRecordReq) GetNum() int32 {
	return p.Num
}
func (p *OAQueryUserMsgRecordReq) IsSetStartIndex() bool {
	return p.StartIndex != OAQueryUserMsgRecordReq_StartIndex_DEFAULT
}

func (p *OAQueryUserMsgRecordReq) IsSetNum() bool {
	return p.Num != OAQueryUserMsgRecordReq_Num_DEFAULT
}

func (p *OAQueryUserMsgRecordReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAQueryUserMsgRecordReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *OAQueryUserMsgRecordReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.OfficalId = v
	}
	return nil
}

func (p *OAQueryUserMsgRecordReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *OAQueryUserMsgRecordReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Num = v
	}
	return nil
}

func (p *OAQueryUserMsgRecordReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAQueryUserMsgRecordReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAQueryUserMsgRecordReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *OAQueryUserMsgRecordReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offical_id", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:offical_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.OfficalId)); err != nil {
		return fmt.Errorf("%T.offical_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:offical_id: %s", p, err)
	}
	return err
}

func (p *OAQueryUserMsgRecordReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err := oprot.WriteFieldBegin("start_index", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:start_index: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
			return fmt.Errorf("%T.start_index (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:start_index: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserMsgRecordReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNum() {
		if err := oprot.WriteFieldBegin("num", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:num: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Num)); err != nil {
			return fmt.Errorf("%T.num (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:num: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserMsgRecordReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAQueryUserMsgRecordReq(%+v)", *p)
}

type OAQueryUserSentMsgReturn struct {
	ErrInfo    *ErrInfo         `thrift:"err_info,1,required" json:"err_info"`
	TotalCount *int64           `thrift:"total_count,2" json:"total_count"`
	MsgList    []*OAUserSentMsg `thrift:"msg_list,3" json:"msg_list"`
}

func NewOAQueryUserSentMsgReturn() *OAQueryUserSentMsgReturn {
	return &OAQueryUserSentMsgReturn{}
}

var OAQueryUserSentMsgReturn_ErrInfo_DEFAULT *ErrInfo

func (p *OAQueryUserSentMsgReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return OAQueryUserSentMsgReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var OAQueryUserSentMsgReturn_TotalCount_DEFAULT int64

func (p *OAQueryUserSentMsgReturn) GetTotalCount() int64 {
	if !p.IsSetTotalCount() {
		return OAQueryUserSentMsgReturn_TotalCount_DEFAULT
	}
	return *p.TotalCount
}

var OAQueryUserSentMsgReturn_MsgList_DEFAULT []*OAUserSentMsg

func (p *OAQueryUserSentMsgReturn) GetMsgList() []*OAUserSentMsg {
	return p.MsgList
}
func (p *OAQueryUserSentMsgReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *OAQueryUserSentMsgReturn) IsSetTotalCount() bool {
	return p.TotalCount != nil
}

func (p *OAQueryUserSentMsgReturn) IsSetMsgList() bool {
	return p.MsgList != nil
}

func (p *OAQueryUserSentMsgReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAQueryUserSentMsgReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *OAQueryUserSentMsgReturn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TotalCount = &v
	}
	return nil
}

func (p *OAQueryUserSentMsgReturn) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*OAUserSentMsg, 0, size)
	p.MsgList = tSlice
	for i := 0; i < size; i++ {
		_elem19 := &OAUserSentMsg{}
		if err := _elem19.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem19, err)
		}
		p.MsgList = append(p.MsgList, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *OAQueryUserSentMsgReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAQueryUserSentMsgReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAQueryUserSentMsgReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *OAQueryUserSentMsgReturn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalCount() {
		if err := oprot.WriteFieldBegin("total_count", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:total_count: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TotalCount)); err != nil {
			return fmt.Errorf("%T.total_count (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:total_count: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserSentMsgReturn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgList() {
		if err := oprot.WriteFieldBegin("msg_list", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:msg_list: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MsgList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.MsgList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:msg_list: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserSentMsgReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAQueryUserSentMsgReturn(%+v)", *p)
}

type OAAnswerUserMsgReq struct {
	Msgid     int64   `thrift:"msgid,1,required" json:"msgid"`
	Uid       int64   `thrift:"uid,2,required" json:"uid"`
	OfficalId int64   `thrift:"offical_id,3,required" json:"offical_id"`
	Content   string  `thrift:"content,4,required" json:"content"`
	Comment   *string `thrift:"comment,5" json:"comment"`
}

func NewOAAnswerUserMsgReq() *OAAnswerUserMsgReq {
	return &OAAnswerUserMsgReq{}
}

func (p *OAAnswerUserMsgReq) GetMsgid() int64 {
	return p.Msgid
}

func (p *OAAnswerUserMsgReq) GetUid() int64 {
	return p.Uid
}

func (p *OAAnswerUserMsgReq) GetOfficalId() int64 {
	return p.OfficalId
}

func (p *OAAnswerUserMsgReq) GetContent() string {
	return p.Content
}

var OAAnswerUserMsgReq_Comment_DEFAULT string

func (p *OAAnswerUserMsgReq) GetComment() string {
	if !p.IsSetComment() {
		return OAAnswerUserMsgReq_Comment_DEFAULT
	}
	return *p.Comment
}
func (p *OAAnswerUserMsgReq) IsSetComment() bool {
	return p.Comment != nil
}

func (p *OAAnswerUserMsgReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAAnswerUserMsgReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msgid = v
	}
	return nil
}

func (p *OAAnswerUserMsgReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *OAAnswerUserMsgReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.OfficalId = v
	}
	return nil
}

func (p *OAAnswerUserMsgReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *OAAnswerUserMsgReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Comment = &v
	}
	return nil
}

func (p *OAAnswerUserMsgReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAAnswerUserMsgReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAAnswerUserMsgReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msgid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Msgid)); err != nil {
		return fmt.Errorf("%T.msgid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msgid: %s", p, err)
	}
	return err
}

func (p *OAAnswerUserMsgReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uid: %s", p, err)
	}
	return err
}

func (p *OAAnswerUserMsgReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offical_id", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:offical_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.OfficalId)); err != nil {
		return fmt.Errorf("%T.offical_id (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:offical_id: %s", p, err)
	}
	return err
}

func (p *OAAnswerUserMsgReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:content: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return fmt.Errorf("%T.content (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:content: %s", p, err)
	}
	return err
}

func (p *OAAnswerUserMsgReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetComment() {
		if err := oprot.WriteFieldBegin("comment", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:comment: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Comment)); err != nil {
			return fmt.Errorf("%T.comment (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:comment: %s", p, err)
		}
	}
	return err
}

func (p *OAAnswerUserMsgReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAAnswerUserMsgReq(%+v)", *p)
}

type OAAnswerUserMsgReturn struct {
	ErrInfo *ErrInfo `thrift:"err_info,1,required" json:"err_info"`
}

func NewOAAnswerUserMsgReturn() *OAAnswerUserMsgReturn {
	return &OAAnswerUserMsgReturn{}
}

var OAAnswerUserMsgReturn_ErrInfo_DEFAULT *ErrInfo

func (p *OAAnswerUserMsgReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return OAAnswerUserMsgReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}
func (p *OAAnswerUserMsgReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *OAAnswerUserMsgReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAAnswerUserMsgReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *OAAnswerUserMsgReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAAnswerUserMsgReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAAnswerUserMsgReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *OAAnswerUserMsgReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAAnswerUserMsgReturn(%+v)", *p)
}

type DeleteConversationReq struct {
	Uid    int64  `thrift:"uid,1,required" json:"uid"`
	Msgid  string `thrift:"msgid,2,required" json:"msgid"`
	TypeA1 int64  `thrift:"type,3,required" json:"type"`
	Opt    int64  `thrift:"opt,4,required" json:"opt"`
	// unused fields # 5 to 100
	TerminalInfo *TerminalInfo `thrift:"terminal_info,101" json:"terminal_info"`
}

func NewDeleteConversationReq() *DeleteConversationReq {
	return &DeleteConversationReq{}
}

func (p *DeleteConversationReq) GetUid() int64 {
	return p.Uid
}

func (p *DeleteConversationReq) GetMsgid() string {
	return p.Msgid
}

func (p *DeleteConversationReq) GetTypeA1() int64 {
	return p.TypeA1
}

func (p *DeleteConversationReq) GetOpt() int64 {
	return p.Opt
}

var DeleteConversationReq_TerminalInfo_DEFAULT *TerminalInfo

func (p *DeleteConversationReq) GetTerminalInfo() *TerminalInfo {
	if !p.IsSetTerminalInfo() {
		return DeleteConversationReq_TerminalInfo_DEFAULT
	}
	return p.TerminalInfo
}
func (p *DeleteConversationReq) IsSetTerminalInfo() bool {
	return p.TerminalInfo != nil
}

func (p *DeleteConversationReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 101:
			if err := p.ReadField101(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteConversationReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *DeleteConversationReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Msgid = v
	}
	return nil
}

func (p *DeleteConversationReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *DeleteConversationReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Opt = v
	}
	return nil
}

func (p *DeleteConversationReq) ReadField101(iprot thrift.TProtocol) error {
	p.TerminalInfo = &TerminalInfo{}
	if err := p.TerminalInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TerminalInfo, err)
	}
	return nil
}

func (p *DeleteConversationReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteConversationReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField101(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteConversationReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *DeleteConversationReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:msgid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Msgid)); err != nil {
		return fmt.Errorf("%T.msgid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:msgid: %s", p, err)
	}
	return err
}

func (p *DeleteConversationReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:type: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:type: %s", p, err)
	}
	return err
}

func (p *DeleteConversationReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("opt", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:opt: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Opt)); err != nil {
		return fmt.Errorf("%T.opt (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:opt: %s", p, err)
	}
	return err
}

func (p *DeleteConversationReq) writeField101(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("terminal_info", thrift.STRUCT, 101); err != nil {
		return fmt.Errorf("%T write field begin error 101:terminal_info: %s", p, err)
	}
	if err := p.TerminalInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TerminalInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 101:terminal_info: %s", p, err)
	}
	return err
}

func (p *DeleteConversationReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteConversationReq(%+v)", *p)
}

type DeleteConversationReturn struct {
	ErrInfo *ErrInfo `thrift:"err_info,1,required" json:"err_info"`
}

func NewDeleteConversationReturn() *DeleteConversationReturn {
	return &DeleteConversationReturn{}
}

var DeleteConversationReturn_ErrInfo_DEFAULT *ErrInfo

func (p *DeleteConversationReturn) GetErrInfo() *ErrInfo {
	if !p.IsSetErrInfo() {
		return DeleteConversationReturn_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}
func (p *DeleteConversationReturn) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *DeleteConversationReturn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteConversationReturn) ReadField1(iprot thrift.TProtocol) error {
	p.ErrInfo = &ErrInfo{}
	if err := p.ErrInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrInfo, err)
	}
	return nil
}

func (p *DeleteConversationReturn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteConversationReturn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteConversationReturn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:err_info: %s", p, err)
	}
	if err := p.ErrInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ErrInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:err_info: %s", p, err)
	}
	return err
}

func (p *DeleteConversationReturn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteConversationReturn(%+v)", *p)
}
