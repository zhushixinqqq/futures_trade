// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package msgcenter

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type MsgCenterService interface {
	// Parameters:
	//  - Req
	PushUserNoticeMsg(req *PushUserNoticeMsgReq) (r *PushUserNoticeMsgReturn, err error)
	// Parameters:
	//  - Req
	SyncOldMsg(req *PushUserNoticeMsgReq) (r *PushUserNoticeMsgReturn, err error)
	// Parameters:
	//  - Req
	RefreshMsgList(req *RefreshMsgListReq) (r *RefreshMsgListReturn, err error)
	// Parameters:
	//  - Req
	QueryMsgCount(req *QueryMsgListReq) (r *QueryMsgCountReturn, err error)
	// Parameters:
	//  - Req
	QueryMsgList(req *QueryMsgListReq) (r *QueryMsgListReturn, err error)
	// Parameters:
	//  - Req
	QueryUserMsg(req *QueryUserMsgReq) (r *QueryUserMsgReturn, err error)
	// Parameters:
	//  - Req
	SendUserMsg(req *SendUserMsgReq) (r *SendUserMsgReturn, err error)
	// Parameters:
	//  - Req
	OptBlackList(req *OptBlackListReq) (r *OptBlackListReturn, err error)
	// Parameters:
	//  - Req
	QueryBlackList(req *QueryBlackListReq) (r *QueryBlackListReturn, err error)
	// Parameters:
	//  - Req
	IsInMyBlackList(req *IsInMyBlackListReq) (r *ErrInfo, err error)
	// Parameters:
	//  - Req
	IsMyFollower(req *IsFollowerReq) (r *IsFollowerReturn, err error)
	// Parameters:
	//  - Req
	GetAllMyFollowers(req *GetAllMyFollowersReq) (r *GetAllMyFollowersReturn, err error)
	// Parameters:
	//  - Req
	ReportUser(req *ReportUserReq) (r *ReportUserReturn, err error)
	// Parameters:
	//  - Req
	DeleteConversation(req *DeleteConversationReq) (r *DeleteConversationReturn, err error)
	// Parameters:
	//  - Req
	GetReportedMsg(req *GetReportedMsgReq) (r *GetReportedMsgReturn, err error)
	// Parameters:
	//  - Req
	ProcessReportedMsg(req *ProcessReportedMsgReq) (r *ProcessReportedMsgReturn, err error)
	// Parameters:
	//  - Req
	GetReportRecord(req *GetReportRecordReq) (r *GetReportRecordReturn, err error)
	// Parameters:
	//  - Req
	GetWatchingRule(req *GetWatchingRuleReq) (r *GetWatchingRuleReturn, err error)
	// Parameters:
	//  - Req
	SetWatchingRule(req *SetWatchingRuleReq) (r *SetWatchingRuleReturn, err error)
	// Parameters:
	//  - Req
	GetWatchedMsg(req *GetWatchedMsgReq) (r *GetWatchedMsgReturn, err error)
	// Parameters:
	//  - Req
	GetSilencedUser(req *GetSilencedUserReq) (r *GetSilencedUserReturn, err error)
	// Parameters:
	//  - Req
	OutSilencedUser(req *OutSilencedUserReq) (r *OutSilencedUserReturn, err error)
	// Parameters:
	//  - Req
	GetSilenceRecord(req *GetSilenceRecordReq) (r *GetSilenceRecordReturn, err error)
	// Parameters:
	//  - Req
	OAPushUserNoticeMsg(req *OAPushUserNoticeMsgReq) (r *PushUserNoticeMsgReturn, err error)
	// Parameters:
	//  - Req
	OADelTimeUnreachedMsg(req *OADelTimeUnreachedMsgReq) (r *PushUserNoticeMsgReturn, err error)
	// Parameters:
	//  - Req
	OAQueryUserMsg(req *OAQueryUserMsgReq) (r *OAQueryUserMsgReturn, err error)
	// Parameters:
	//  - Req
	OAQueryUserSentMsg(req *OAQueryUserSentMsgReq) (r *OAQueryUserSentMsgReturn, err error)
	// Parameters:
	//  - Req
	OAQueryUserMsgRecord(req *OAQueryUserMsgRecordReq) (r *OAQueryUserSentMsgReturn, err error)
	// Parameters:
	//  - Req
	OAAnswerUserMsg(req *OAAnswerUserMsgReq) (r *OAAnswerUserMsgReturn, err error)
}

type MsgCenterServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewMsgCenterServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MsgCenterServiceClient {
	return &MsgCenterServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewMsgCenterServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MsgCenterServiceClient {
	return &MsgCenterServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) PushUserNoticeMsg(req *PushUserNoticeMsgReq) (r *PushUserNoticeMsgReturn, err error) {
	if err = p.sendPushUserNoticeMsg(req); err != nil {
		return
	}
	return p.recvPushUserNoticeMsg()
}

func (p *MsgCenterServiceClient) sendPushUserNoticeMsg(req *PushUserNoticeMsgReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("PushUserNoticeMsg", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PushUserNoticeMsgArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvPushUserNoticeMsg() (value *PushUserNoticeMsgReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "PushUserNoticeMsg failed: out of sequence response")
		return
	}
	result := PushUserNoticeMsgResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) SyncOldMsg(req *PushUserNoticeMsgReq) (r *PushUserNoticeMsgReturn, err error) {
	if err = p.sendSyncOldMsg(req); err != nil {
		return
	}
	return p.recvSyncOldMsg()
}

func (p *MsgCenterServiceClient) sendSyncOldMsg(req *PushUserNoticeMsgReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("SyncOldMsg", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SyncOldMsgArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvSyncOldMsg() (value *PushUserNoticeMsgReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SyncOldMsg failed: out of sequence response")
		return
	}
	result := SyncOldMsgResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) RefreshMsgList(req *RefreshMsgListReq) (r *RefreshMsgListReturn, err error) {
	if err = p.sendRefreshMsgList(req); err != nil {
		return
	}
	return p.recvRefreshMsgList()
}

func (p *MsgCenterServiceClient) sendRefreshMsgList(req *RefreshMsgListReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RefreshMsgList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RefreshMsgListArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvRefreshMsgList() (value *RefreshMsgListReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RefreshMsgList failed: out of sequence response")
		return
	}
	result := RefreshMsgListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) QueryMsgCount(req *QueryMsgListReq) (r *QueryMsgCountReturn, err error) {
	if err = p.sendQueryMsgCount(req); err != nil {
		return
	}
	return p.recvQueryMsgCount()
}

func (p *MsgCenterServiceClient) sendQueryMsgCount(req *QueryMsgListReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("QueryMsgCount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryMsgCountArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvQueryMsgCount() (value *QueryMsgCountReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "QueryMsgCount failed: out of sequence response")
		return
	}
	result := QueryMsgCountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) QueryMsgList(req *QueryMsgListReq) (r *QueryMsgListReturn, err error) {
	if err = p.sendQueryMsgList(req); err != nil {
		return
	}
	return p.recvQueryMsgList()
}

func (p *MsgCenterServiceClient) sendQueryMsgList(req *QueryMsgListReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("QueryMsgList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryMsgListArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvQueryMsgList() (value *QueryMsgListReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "QueryMsgList failed: out of sequence response")
		return
	}
	result := QueryMsgListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) QueryUserMsg(req *QueryUserMsgReq) (r *QueryUserMsgReturn, err error) {
	if err = p.sendQueryUserMsg(req); err != nil {
		return
	}
	return p.recvQueryUserMsg()
}

func (p *MsgCenterServiceClient) sendQueryUserMsg(req *QueryUserMsgReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("QueryUserMsg", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryUserMsgArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvQueryUserMsg() (value *QueryUserMsgReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "QueryUserMsg failed: out of sequence response")
		return
	}
	result := QueryUserMsgResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) SendUserMsg(req *SendUserMsgReq) (r *SendUserMsgReturn, err error) {
	if err = p.sendSendUserMsg(req); err != nil {
		return
	}
	return p.recvSendUserMsg()
}

func (p *MsgCenterServiceClient) sendSendUserMsg(req *SendUserMsgReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("SendUserMsg", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendUserMsgArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvSendUserMsg() (value *SendUserMsgReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SendUserMsg failed: out of sequence response")
		return
	}
	result := SendUserMsgResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) OptBlackList(req *OptBlackListReq) (r *OptBlackListReturn, err error) {
	if err = p.sendOptBlackList(req); err != nil {
		return
	}
	return p.recvOptBlackList()
}

func (p *MsgCenterServiceClient) sendOptBlackList(req *OptBlackListReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("OptBlackList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OptBlackListArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvOptBlackList() (value *OptBlackListReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "OptBlackList failed: out of sequence response")
		return
	}
	result := OptBlackListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) QueryBlackList(req *QueryBlackListReq) (r *QueryBlackListReturn, err error) {
	if err = p.sendQueryBlackList(req); err != nil {
		return
	}
	return p.recvQueryBlackList()
}

func (p *MsgCenterServiceClient) sendQueryBlackList(req *QueryBlackListReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("QueryBlackList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryBlackListArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvQueryBlackList() (value *QueryBlackListReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "QueryBlackList failed: out of sequence response")
		return
	}
	result := QueryBlackListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) IsInMyBlackList(req *IsInMyBlackListReq) (r *ErrInfo, err error) {
	if err = p.sendIsInMyBlackList(req); err != nil {
		return
	}
	return p.recvIsInMyBlackList()
}

func (p *MsgCenterServiceClient) sendIsInMyBlackList(req *IsInMyBlackListReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("IsInMyBlackList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IsInMyBlackListArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvIsInMyBlackList() (value *ErrInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "IsInMyBlackList failed: out of sequence response")
		return
	}
	result := IsInMyBlackListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) IsMyFollower(req *IsFollowerReq) (r *IsFollowerReturn, err error) {
	if err = p.sendIsMyFollower(req); err != nil {
		return
	}
	return p.recvIsMyFollower()
}

func (p *MsgCenterServiceClient) sendIsMyFollower(req *IsFollowerReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("IsMyFollower", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IsMyFollowerArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvIsMyFollower() (value *IsFollowerReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "IsMyFollower failed: out of sequence response")
		return
	}
	result := IsMyFollowerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) GetAllMyFollowers(req *GetAllMyFollowersReq) (r *GetAllMyFollowersReturn, err error) {
	if err = p.sendGetAllMyFollowers(req); err != nil {
		return
	}
	return p.recvGetAllMyFollowers()
}

func (p *MsgCenterServiceClient) sendGetAllMyFollowers(req *GetAllMyFollowersReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetAllMyFollowers", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetAllMyFollowersArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvGetAllMyFollowers() (value *GetAllMyFollowersReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetAllMyFollowers failed: out of sequence response")
		return
	}
	result := GetAllMyFollowersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) ReportUser(req *ReportUserReq) (r *ReportUserReturn, err error) {
	if err = p.sendReportUser(req); err != nil {
		return
	}
	return p.recvReportUser()
}

func (p *MsgCenterServiceClient) sendReportUser(req *ReportUserReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ReportUser", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ReportUserArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvReportUser() (value *ReportUserReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error45 error
		error45, err = error44.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error45
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ReportUser failed: out of sequence response")
		return
	}
	result := ReportUserResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) DeleteConversation(req *DeleteConversationReq) (r *DeleteConversationReturn, err error) {
	if err = p.sendDeleteConversation(req); err != nil {
		return
	}
	return p.recvDeleteConversation()
}

func (p *MsgCenterServiceClient) sendDeleteConversation(req *DeleteConversationReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("DeleteConversation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteConversationArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvDeleteConversation() (value *DeleteConversationReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error47 error
		error47, err = error46.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error47
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "DeleteConversation failed: out of sequence response")
		return
	}
	result := DeleteConversationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) GetReportedMsg(req *GetReportedMsgReq) (r *GetReportedMsgReturn, err error) {
	if err = p.sendGetReportedMsg(req); err != nil {
		return
	}
	return p.recvGetReportedMsg()
}

func (p *MsgCenterServiceClient) sendGetReportedMsg(req *GetReportedMsgReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetReportedMsg", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetReportedMsgArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvGetReportedMsg() (value *GetReportedMsgReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error48 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error49 error
		error49, err = error48.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error49
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetReportedMsg failed: out of sequence response")
		return
	}
	result := GetReportedMsgResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) ProcessReportedMsg(req *ProcessReportedMsgReq) (r *ProcessReportedMsgReturn, err error) {
	if err = p.sendProcessReportedMsg(req); err != nil {
		return
	}
	return p.recvProcessReportedMsg()
}

func (p *MsgCenterServiceClient) sendProcessReportedMsg(req *ProcessReportedMsgReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ProcessReportedMsg", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ProcessReportedMsgArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvProcessReportedMsg() (value *ProcessReportedMsgReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error51 error
		error51, err = error50.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error51
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ProcessReportedMsg failed: out of sequence response")
		return
	}
	result := ProcessReportedMsgResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) GetReportRecord(req *GetReportRecordReq) (r *GetReportRecordReturn, err error) {
	if err = p.sendGetReportRecord(req); err != nil {
		return
	}
	return p.recvGetReportRecord()
}

func (p *MsgCenterServiceClient) sendGetReportRecord(req *GetReportRecordReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetReportRecord", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetReportRecordArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvGetReportRecord() (value *GetReportRecordReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error52 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error53 error
		error53, err = error52.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error53
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetReportRecord failed: out of sequence response")
		return
	}
	result := GetReportRecordResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) GetWatchingRule(req *GetWatchingRuleReq) (r *GetWatchingRuleReturn, err error) {
	if err = p.sendGetWatchingRule(req); err != nil {
		return
	}
	return p.recvGetWatchingRule()
}

func (p *MsgCenterServiceClient) sendGetWatchingRule(req *GetWatchingRuleReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetWatchingRule", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetWatchingRuleArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvGetWatchingRule() (value *GetWatchingRuleReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error55 error
		error55, err = error54.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error55
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetWatchingRule failed: out of sequence response")
		return
	}
	result := GetWatchingRuleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) SetWatchingRule(req *SetWatchingRuleReq) (r *SetWatchingRuleReturn, err error) {
	if err = p.sendSetWatchingRule(req); err != nil {
		return
	}
	return p.recvSetWatchingRule()
}

func (p *MsgCenterServiceClient) sendSetWatchingRule(req *SetWatchingRuleReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("SetWatchingRule", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SetWatchingRuleArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvSetWatchingRule() (value *SetWatchingRuleReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error56 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error57 error
		error57, err = error56.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error57
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SetWatchingRule failed: out of sequence response")
		return
	}
	result := SetWatchingRuleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) GetWatchedMsg(req *GetWatchedMsgReq) (r *GetWatchedMsgReturn, err error) {
	if err = p.sendGetWatchedMsg(req); err != nil {
		return
	}
	return p.recvGetWatchedMsg()
}

func (p *MsgCenterServiceClient) sendGetWatchedMsg(req *GetWatchedMsgReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetWatchedMsg", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetWatchedMsgArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvGetWatchedMsg() (value *GetWatchedMsgReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error59 error
		error59, err = error58.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error59
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetWatchedMsg failed: out of sequence response")
		return
	}
	result := GetWatchedMsgResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) GetSilencedUser(req *GetSilencedUserReq) (r *GetSilencedUserReturn, err error) {
	if err = p.sendGetSilencedUser(req); err != nil {
		return
	}
	return p.recvGetSilencedUser()
}

func (p *MsgCenterServiceClient) sendGetSilencedUser(req *GetSilencedUserReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetSilencedUser", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetSilencedUserArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvGetSilencedUser() (value *GetSilencedUserReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error60 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error61 error
		error61, err = error60.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error61
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetSilencedUser failed: out of sequence response")
		return
	}
	result := GetSilencedUserResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) OutSilencedUser(req *OutSilencedUserReq) (r *OutSilencedUserReturn, err error) {
	if err = p.sendOutSilencedUser(req); err != nil {
		return
	}
	return p.recvOutSilencedUser()
}

func (p *MsgCenterServiceClient) sendOutSilencedUser(req *OutSilencedUserReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("OutSilencedUser", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OutSilencedUserArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvOutSilencedUser() (value *OutSilencedUserReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error62 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error63 error
		error63, err = error62.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error63
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "OutSilencedUser failed: out of sequence response")
		return
	}
	result := OutSilencedUserResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) GetSilenceRecord(req *GetSilenceRecordReq) (r *GetSilenceRecordReturn, err error) {
	if err = p.sendGetSilenceRecord(req); err != nil {
		return
	}
	return p.recvGetSilenceRecord()
}

func (p *MsgCenterServiceClient) sendGetSilenceRecord(req *GetSilenceRecordReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetSilenceRecord", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetSilenceRecordArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvGetSilenceRecord() (value *GetSilenceRecordReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error64 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error65 error
		error65, err = error64.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error65
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetSilenceRecord failed: out of sequence response")
		return
	}
	result := GetSilenceRecordResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) OAPushUserNoticeMsg(req *OAPushUserNoticeMsgReq) (r *PushUserNoticeMsgReturn, err error) {
	if err = p.sendOAPushUserNoticeMsg(req); err != nil {
		return
	}
	return p.recvOAPushUserNoticeMsg()
}

func (p *MsgCenterServiceClient) sendOAPushUserNoticeMsg(req *OAPushUserNoticeMsgReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("OAPushUserNoticeMsg", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OAPushUserNoticeMsgArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvOAPushUserNoticeMsg() (value *PushUserNoticeMsgReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error66 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error67 error
		error67, err = error66.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error67
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "OAPushUserNoticeMsg failed: out of sequence response")
		return
	}
	result := OAPushUserNoticeMsgResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) OADelTimeUnreachedMsg(req *OADelTimeUnreachedMsgReq) (r *PushUserNoticeMsgReturn, err error) {
	if err = p.sendOADelTimeUnreachedMsg(req); err != nil {
		return
	}
	return p.recvOADelTimeUnreachedMsg()
}

func (p *MsgCenterServiceClient) sendOADelTimeUnreachedMsg(req *OADelTimeUnreachedMsgReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("OADelTimeUnreachedMsg", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OADelTimeUnreachedMsgArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvOADelTimeUnreachedMsg() (value *PushUserNoticeMsgReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error68 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error69 error
		error69, err = error68.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error69
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "OADelTimeUnreachedMsg failed: out of sequence response")
		return
	}
	result := OADelTimeUnreachedMsgResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) OAQueryUserMsg(req *OAQueryUserMsgReq) (r *OAQueryUserMsgReturn, err error) {
	if err = p.sendOAQueryUserMsg(req); err != nil {
		return
	}
	return p.recvOAQueryUserMsg()
}

func (p *MsgCenterServiceClient) sendOAQueryUserMsg(req *OAQueryUserMsgReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("OAQueryUserMsg", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OAQueryUserMsgArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvOAQueryUserMsg() (value *OAQueryUserMsgReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error70 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error71 error
		error71, err = error70.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error71
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "OAQueryUserMsg failed: out of sequence response")
		return
	}
	result := OAQueryUserMsgResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) OAQueryUserSentMsg(req *OAQueryUserSentMsgReq) (r *OAQueryUserSentMsgReturn, err error) {
	if err = p.sendOAQueryUserSentMsg(req); err != nil {
		return
	}
	return p.recvOAQueryUserSentMsg()
}

func (p *MsgCenterServiceClient) sendOAQueryUserSentMsg(req *OAQueryUserSentMsgReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("OAQueryUserSentMsg", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OAQueryUserSentMsgArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvOAQueryUserSentMsg() (value *OAQueryUserSentMsgReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error72 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error73 error
		error73, err = error72.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error73
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "OAQueryUserSentMsg failed: out of sequence response")
		return
	}
	result := OAQueryUserSentMsgResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) OAQueryUserMsgRecord(req *OAQueryUserMsgRecordReq) (r *OAQueryUserSentMsgReturn, err error) {
	if err = p.sendOAQueryUserMsgRecord(req); err != nil {
		return
	}
	return p.recvOAQueryUserMsgRecord()
}

func (p *MsgCenterServiceClient) sendOAQueryUserMsgRecord(req *OAQueryUserMsgRecordReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("OAQueryUserMsgRecord", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OAQueryUserMsgRecordArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvOAQueryUserMsgRecord() (value *OAQueryUserSentMsgReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error74 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error75 error
		error75, err = error74.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error75
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "OAQueryUserMsgRecord failed: out of sequence response")
		return
	}
	result := OAQueryUserMsgRecordResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *MsgCenterServiceClient) OAAnswerUserMsg(req *OAAnswerUserMsgReq) (r *OAAnswerUserMsgReturn, err error) {
	if err = p.sendOAAnswerUserMsg(req); err != nil {
		return
	}
	return p.recvOAAnswerUserMsg()
}

func (p *MsgCenterServiceClient) sendOAAnswerUserMsg(req *OAAnswerUserMsgReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("OAAnswerUserMsg", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OAAnswerUserMsgArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MsgCenterServiceClient) recvOAAnswerUserMsg() (value *OAAnswerUserMsgReturn, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error76 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error77 error
		error77, err = error76.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error77
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "OAAnswerUserMsg failed: out of sequence response")
		return
	}
	result := OAAnswerUserMsgResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type MsgCenterServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MsgCenterService
}

func (p *MsgCenterServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MsgCenterServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MsgCenterServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMsgCenterServiceProcessor(handler MsgCenterService) *MsgCenterServiceProcessor {

	self78 := &MsgCenterServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self78.processorMap["PushUserNoticeMsg"] = &msgCenterServiceProcessorPushUserNoticeMsg{handler: handler}
	self78.processorMap["SyncOldMsg"] = &msgCenterServiceProcessorSyncOldMsg{handler: handler}
	self78.processorMap["RefreshMsgList"] = &msgCenterServiceProcessorRefreshMsgList{handler: handler}
	self78.processorMap["QueryMsgCount"] = &msgCenterServiceProcessorQueryMsgCount{handler: handler}
	self78.processorMap["QueryMsgList"] = &msgCenterServiceProcessorQueryMsgList{handler: handler}
	self78.processorMap["QueryUserMsg"] = &msgCenterServiceProcessorQueryUserMsg{handler: handler}
	self78.processorMap["SendUserMsg"] = &msgCenterServiceProcessorSendUserMsg{handler: handler}
	self78.processorMap["OptBlackList"] = &msgCenterServiceProcessorOptBlackList{handler: handler}
	self78.processorMap["QueryBlackList"] = &msgCenterServiceProcessorQueryBlackList{handler: handler}
	self78.processorMap["IsInMyBlackList"] = &msgCenterServiceProcessorIsInMyBlackList{handler: handler}
	self78.processorMap["IsMyFollower"] = &msgCenterServiceProcessorIsMyFollower{handler: handler}
	self78.processorMap["GetAllMyFollowers"] = &msgCenterServiceProcessorGetAllMyFollowers{handler: handler}
	self78.processorMap["ReportUser"] = &msgCenterServiceProcessorReportUser{handler: handler}
	self78.processorMap["DeleteConversation"] = &msgCenterServiceProcessorDeleteConversation{handler: handler}
	self78.processorMap["GetReportedMsg"] = &msgCenterServiceProcessorGetReportedMsg{handler: handler}
	self78.processorMap["ProcessReportedMsg"] = &msgCenterServiceProcessorProcessReportedMsg{handler: handler}
	self78.processorMap["GetReportRecord"] = &msgCenterServiceProcessorGetReportRecord{handler: handler}
	self78.processorMap["GetWatchingRule"] = &msgCenterServiceProcessorGetWatchingRule{handler: handler}
	self78.processorMap["SetWatchingRule"] = &msgCenterServiceProcessorSetWatchingRule{handler: handler}
	self78.processorMap["GetWatchedMsg"] = &msgCenterServiceProcessorGetWatchedMsg{handler: handler}
	self78.processorMap["GetSilencedUser"] = &msgCenterServiceProcessorGetSilencedUser{handler: handler}
	self78.processorMap["OutSilencedUser"] = &msgCenterServiceProcessorOutSilencedUser{handler: handler}
	self78.processorMap["GetSilenceRecord"] = &msgCenterServiceProcessorGetSilenceRecord{handler: handler}
	self78.processorMap["OAPushUserNoticeMsg"] = &msgCenterServiceProcessorOAPushUserNoticeMsg{handler: handler}
	self78.processorMap["OADelTimeUnreachedMsg"] = &msgCenterServiceProcessorOADelTimeUnreachedMsg{handler: handler}
	self78.processorMap["OAQueryUserMsg"] = &msgCenterServiceProcessorOAQueryUserMsg{handler: handler}
	self78.processorMap["OAQueryUserSentMsg"] = &msgCenterServiceProcessorOAQueryUserSentMsg{handler: handler}
	self78.processorMap["OAQueryUserMsgRecord"] = &msgCenterServiceProcessorOAQueryUserMsgRecord{handler: handler}
	self78.processorMap["OAAnswerUserMsg"] = &msgCenterServiceProcessorOAAnswerUserMsg{handler: handler}
	return self78
}

func (p *MsgCenterServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x79 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x79.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x79

}

type msgCenterServiceProcessorPushUserNoticeMsg struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorPushUserNoticeMsg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PushUserNoticeMsgArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PushUserNoticeMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PushUserNoticeMsgResult{}
	var retval *PushUserNoticeMsgReturn
	var err2 error
	if retval, err2 = p.handler.PushUserNoticeMsg(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PushUserNoticeMsg: "+err2.Error())
		oprot.WriteMessageBegin("PushUserNoticeMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PushUserNoticeMsg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorSyncOldMsg struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorSyncOldMsg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SyncOldMsgArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SyncOldMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SyncOldMsgResult{}
	var retval *PushUserNoticeMsgReturn
	var err2 error
	if retval, err2 = p.handler.SyncOldMsg(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SyncOldMsg: "+err2.Error())
		oprot.WriteMessageBegin("SyncOldMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SyncOldMsg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorRefreshMsgList struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorRefreshMsgList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RefreshMsgListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RefreshMsgList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RefreshMsgListResult{}
	var retval *RefreshMsgListReturn
	var err2 error
	if retval, err2 = p.handler.RefreshMsgList(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RefreshMsgList: "+err2.Error())
		oprot.WriteMessageBegin("RefreshMsgList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RefreshMsgList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorQueryMsgCount struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorQueryMsgCount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryMsgCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryMsgCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryMsgCountResult{}
	var retval *QueryMsgCountReturn
	var err2 error
	if retval, err2 = p.handler.QueryMsgCount(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryMsgCount: "+err2.Error())
		oprot.WriteMessageBegin("QueryMsgCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryMsgCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorQueryMsgList struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorQueryMsgList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryMsgListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryMsgList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryMsgListResult{}
	var retval *QueryMsgListReturn
	var err2 error
	if retval, err2 = p.handler.QueryMsgList(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryMsgList: "+err2.Error())
		oprot.WriteMessageBegin("QueryMsgList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryMsgList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorQueryUserMsg struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorQueryUserMsg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryUserMsgArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryUserMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryUserMsgResult{}
	var retval *QueryUserMsgReturn
	var err2 error
	if retval, err2 = p.handler.QueryUserMsg(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryUserMsg: "+err2.Error())
		oprot.WriteMessageBegin("QueryUserMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryUserMsg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorSendUserMsg struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorSendUserMsg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendUserMsgArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SendUserMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendUserMsgResult{}
	var retval *SendUserMsgReturn
	var err2 error
	if retval, err2 = p.handler.SendUserMsg(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendUserMsg: "+err2.Error())
		oprot.WriteMessageBegin("SendUserMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SendUserMsg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorOptBlackList struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorOptBlackList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OptBlackListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("OptBlackList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OptBlackListResult{}
	var retval *OptBlackListReturn
	var err2 error
	if retval, err2 = p.handler.OptBlackList(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OptBlackList: "+err2.Error())
		oprot.WriteMessageBegin("OptBlackList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("OptBlackList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorQueryBlackList struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorQueryBlackList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryBlackListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryBlackList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryBlackListResult{}
	var retval *QueryBlackListReturn
	var err2 error
	if retval, err2 = p.handler.QueryBlackList(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryBlackList: "+err2.Error())
		oprot.WriteMessageBegin("QueryBlackList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryBlackList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorIsInMyBlackList struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorIsInMyBlackList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IsInMyBlackListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("IsInMyBlackList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IsInMyBlackListResult{}
	var retval *ErrInfo
	var err2 error
	if retval, err2 = p.handler.IsInMyBlackList(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsInMyBlackList: "+err2.Error())
		oprot.WriteMessageBegin("IsInMyBlackList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("IsInMyBlackList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorIsMyFollower struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorIsMyFollower) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IsMyFollowerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("IsMyFollower", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IsMyFollowerResult{}
	var retval *IsFollowerReturn
	var err2 error
	if retval, err2 = p.handler.IsMyFollower(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsMyFollower: "+err2.Error())
		oprot.WriteMessageBegin("IsMyFollower", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("IsMyFollower", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorGetAllMyFollowers struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorGetAllMyFollowers) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetAllMyFollowersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAllMyFollowers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetAllMyFollowersResult{}
	var retval *GetAllMyFollowersReturn
	var err2 error
	if retval, err2 = p.handler.GetAllMyFollowers(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAllMyFollowers: "+err2.Error())
		oprot.WriteMessageBegin("GetAllMyFollowers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAllMyFollowers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorReportUser struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorReportUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReportUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ReportUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ReportUserResult{}
	var retval *ReportUserReturn
	var err2 error
	if retval, err2 = p.handler.ReportUser(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReportUser: "+err2.Error())
		oprot.WriteMessageBegin("ReportUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ReportUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorDeleteConversation struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorDeleteConversation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteConversationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteConversation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteConversationResult{}
	var retval *DeleteConversationReturn
	var err2 error
	if retval, err2 = p.handler.DeleteConversation(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteConversation: "+err2.Error())
		oprot.WriteMessageBegin("DeleteConversation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteConversation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorGetReportedMsg struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorGetReportedMsg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetReportedMsgArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetReportedMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetReportedMsgResult{}
	var retval *GetReportedMsgReturn
	var err2 error
	if retval, err2 = p.handler.GetReportedMsg(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetReportedMsg: "+err2.Error())
		oprot.WriteMessageBegin("GetReportedMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetReportedMsg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorProcessReportedMsg struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorProcessReportedMsg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProcessReportedMsgArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ProcessReportedMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ProcessReportedMsgResult{}
	var retval *ProcessReportedMsgReturn
	var err2 error
	if retval, err2 = p.handler.ProcessReportedMsg(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ProcessReportedMsg: "+err2.Error())
		oprot.WriteMessageBegin("ProcessReportedMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ProcessReportedMsg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorGetReportRecord struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorGetReportRecord) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetReportRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetReportRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetReportRecordResult{}
	var retval *GetReportRecordReturn
	var err2 error
	if retval, err2 = p.handler.GetReportRecord(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetReportRecord: "+err2.Error())
		oprot.WriteMessageBegin("GetReportRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetReportRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorGetWatchingRule struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorGetWatchingRule) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetWatchingRuleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetWatchingRule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetWatchingRuleResult{}
	var retval *GetWatchingRuleReturn
	var err2 error
	if retval, err2 = p.handler.GetWatchingRule(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetWatchingRule: "+err2.Error())
		oprot.WriteMessageBegin("GetWatchingRule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetWatchingRule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorSetWatchingRule struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorSetWatchingRule) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SetWatchingRuleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SetWatchingRule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SetWatchingRuleResult{}
	var retval *SetWatchingRuleReturn
	var err2 error
	if retval, err2 = p.handler.SetWatchingRule(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetWatchingRule: "+err2.Error())
		oprot.WriteMessageBegin("SetWatchingRule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SetWatchingRule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorGetWatchedMsg struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorGetWatchedMsg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetWatchedMsgArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetWatchedMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetWatchedMsgResult{}
	var retval *GetWatchedMsgReturn
	var err2 error
	if retval, err2 = p.handler.GetWatchedMsg(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetWatchedMsg: "+err2.Error())
		oprot.WriteMessageBegin("GetWatchedMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetWatchedMsg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorGetSilencedUser struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorGetSilencedUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetSilencedUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSilencedUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetSilencedUserResult{}
	var retval *GetSilencedUserReturn
	var err2 error
	if retval, err2 = p.handler.GetSilencedUser(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSilencedUser: "+err2.Error())
		oprot.WriteMessageBegin("GetSilencedUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSilencedUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorOutSilencedUser struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorOutSilencedUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OutSilencedUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("OutSilencedUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OutSilencedUserResult{}
	var retval *OutSilencedUserReturn
	var err2 error
	if retval, err2 = p.handler.OutSilencedUser(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OutSilencedUser: "+err2.Error())
		oprot.WriteMessageBegin("OutSilencedUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("OutSilencedUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorGetSilenceRecord struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorGetSilenceRecord) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetSilenceRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSilenceRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetSilenceRecordResult{}
	var retval *GetSilenceRecordReturn
	var err2 error
	if retval, err2 = p.handler.GetSilenceRecord(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSilenceRecord: "+err2.Error())
		oprot.WriteMessageBegin("GetSilenceRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSilenceRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorOAPushUserNoticeMsg struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorOAPushUserNoticeMsg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OAPushUserNoticeMsgArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("OAPushUserNoticeMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OAPushUserNoticeMsgResult{}
	var retval *PushUserNoticeMsgReturn
	var err2 error
	if retval, err2 = p.handler.OAPushUserNoticeMsg(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OAPushUserNoticeMsg: "+err2.Error())
		oprot.WriteMessageBegin("OAPushUserNoticeMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("OAPushUserNoticeMsg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorOADelTimeUnreachedMsg struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorOADelTimeUnreachedMsg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OADelTimeUnreachedMsgArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("OADelTimeUnreachedMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OADelTimeUnreachedMsgResult{}
	var retval *PushUserNoticeMsgReturn
	var err2 error
	if retval, err2 = p.handler.OADelTimeUnreachedMsg(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OADelTimeUnreachedMsg: "+err2.Error())
		oprot.WriteMessageBegin("OADelTimeUnreachedMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("OADelTimeUnreachedMsg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorOAQueryUserMsg struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorOAQueryUserMsg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OAQueryUserMsgArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("OAQueryUserMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OAQueryUserMsgResult{}
	var retval *OAQueryUserMsgReturn
	var err2 error
	if retval, err2 = p.handler.OAQueryUserMsg(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OAQueryUserMsg: "+err2.Error())
		oprot.WriteMessageBegin("OAQueryUserMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("OAQueryUserMsg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorOAQueryUserSentMsg struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorOAQueryUserSentMsg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OAQueryUserSentMsgArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("OAQueryUserSentMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OAQueryUserSentMsgResult{}
	var retval *OAQueryUserSentMsgReturn
	var err2 error
	if retval, err2 = p.handler.OAQueryUserSentMsg(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OAQueryUserSentMsg: "+err2.Error())
		oprot.WriteMessageBegin("OAQueryUserSentMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("OAQueryUserSentMsg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorOAQueryUserMsgRecord struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorOAQueryUserMsgRecord) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OAQueryUserMsgRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("OAQueryUserMsgRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OAQueryUserMsgRecordResult{}
	var retval *OAQueryUserSentMsgReturn
	var err2 error
	if retval, err2 = p.handler.OAQueryUserMsgRecord(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OAQueryUserMsgRecord: "+err2.Error())
		oprot.WriteMessageBegin("OAQueryUserMsgRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("OAQueryUserMsgRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type msgCenterServiceProcessorOAAnswerUserMsg struct {
	handler MsgCenterService
}

func (p *msgCenterServiceProcessorOAAnswerUserMsg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OAAnswerUserMsgArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("OAAnswerUserMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OAAnswerUserMsgResult{}
	var retval *OAAnswerUserMsgReturn
	var err2 error
	if retval, err2 = p.handler.OAAnswerUserMsg(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OAAnswerUserMsg: "+err2.Error())
		oprot.WriteMessageBegin("OAAnswerUserMsg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("OAAnswerUserMsg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type PushUserNoticeMsgArgs struct {
	Req *PushUserNoticeMsgReq `thrift:"req,1,required" json:"req"`
}

func NewPushUserNoticeMsgArgs() *PushUserNoticeMsgArgs {
	return &PushUserNoticeMsgArgs{}
}

var PushUserNoticeMsgArgs_Req_DEFAULT *PushUserNoticeMsgReq

func (p *PushUserNoticeMsgArgs) GetReq() *PushUserNoticeMsgReq {
	if !p.IsSetReq() {
		return PushUserNoticeMsgArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PushUserNoticeMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PushUserNoticeMsgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PushUserNoticeMsgArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &PushUserNoticeMsgReq{
		BussType: 1,

		MsgVersion: -1,

		BussMark: "PLATFORM",
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *PushUserNoticeMsgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PushUserNoticeMsg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PushUserNoticeMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *PushUserNoticeMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushUserNoticeMsgArgs(%+v)", *p)
}

type PushUserNoticeMsgResult struct {
	Success *PushUserNoticeMsgReturn `thrift:"success,0" json:"success"`
}

func NewPushUserNoticeMsgResult() *PushUserNoticeMsgResult {
	return &PushUserNoticeMsgResult{}
}

var PushUserNoticeMsgResult_Success_DEFAULT *PushUserNoticeMsgReturn

func (p *PushUserNoticeMsgResult) GetSuccess() *PushUserNoticeMsgReturn {
	if !p.IsSetSuccess() {
		return PushUserNoticeMsgResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PushUserNoticeMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PushUserNoticeMsgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PushUserNoticeMsgResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PushUserNoticeMsgReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *PushUserNoticeMsgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PushUserNoticeMsg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PushUserNoticeMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *PushUserNoticeMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushUserNoticeMsgResult(%+v)", *p)
}

type SyncOldMsgArgs struct {
	Req *PushUserNoticeMsgReq `thrift:"req,1,required" json:"req"`
}

func NewSyncOldMsgArgs() *SyncOldMsgArgs {
	return &SyncOldMsgArgs{}
}

var SyncOldMsgArgs_Req_DEFAULT *PushUserNoticeMsgReq

func (p *SyncOldMsgArgs) GetReq() *PushUserNoticeMsgReq {
	if !p.IsSetReq() {
		return SyncOldMsgArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SyncOldMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SyncOldMsgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SyncOldMsgArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &PushUserNoticeMsgReq{
		BussType: 1,

		MsgVersion: -1,

		BussMark: "PLATFORM",
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *SyncOldMsgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncOldMsg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SyncOldMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *SyncOldMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncOldMsgArgs(%+v)", *p)
}

type SyncOldMsgResult struct {
	Success *PushUserNoticeMsgReturn `thrift:"success,0" json:"success"`
}

func NewSyncOldMsgResult() *SyncOldMsgResult {
	return &SyncOldMsgResult{}
}

var SyncOldMsgResult_Success_DEFAULT *PushUserNoticeMsgReturn

func (p *SyncOldMsgResult) GetSuccess() *PushUserNoticeMsgReturn {
	if !p.IsSetSuccess() {
		return SyncOldMsgResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SyncOldMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SyncOldMsgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SyncOldMsgResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PushUserNoticeMsgReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *SyncOldMsgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncOldMsg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SyncOldMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SyncOldMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncOldMsgResult(%+v)", *p)
}

type RefreshMsgListArgs struct {
	Req *RefreshMsgListReq `thrift:"req,1,required" json:"req"`
}

func NewRefreshMsgListArgs() *RefreshMsgListArgs {
	return &RefreshMsgListArgs{}
}

var RefreshMsgListArgs_Req_DEFAULT *RefreshMsgListReq

func (p *RefreshMsgListArgs) GetReq() *RefreshMsgListReq {
	if !p.IsSetReq() {
		return RefreshMsgListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RefreshMsgListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RefreshMsgListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RefreshMsgListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &RefreshMsgListReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *RefreshMsgListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RefreshMsgList_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RefreshMsgListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *RefreshMsgListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshMsgListArgs(%+v)", *p)
}

type RefreshMsgListResult struct {
	Success *RefreshMsgListReturn `thrift:"success,0" json:"success"`
}

func NewRefreshMsgListResult() *RefreshMsgListResult {
	return &RefreshMsgListResult{}
}

var RefreshMsgListResult_Success_DEFAULT *RefreshMsgListReturn

func (p *RefreshMsgListResult) GetSuccess() *RefreshMsgListReturn {
	if !p.IsSetSuccess() {
		return RefreshMsgListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RefreshMsgListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RefreshMsgListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RefreshMsgListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RefreshMsgListReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *RefreshMsgListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RefreshMsgList_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RefreshMsgListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RefreshMsgListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshMsgListResult(%+v)", *p)
}

type QueryMsgCountArgs struct {
	Req *QueryMsgListReq `thrift:"req,1,required" json:"req"`
}

func NewQueryMsgCountArgs() *QueryMsgCountArgs {
	return &QueryMsgCountArgs{}
}

var QueryMsgCountArgs_Req_DEFAULT *QueryMsgListReq

func (p *QueryMsgCountArgs) GetReq() *QueryMsgListReq {
	if !p.IsSetReq() {
		return QueryMsgCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *QueryMsgCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryMsgCountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryMsgCountArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &QueryMsgListReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *QueryMsgCountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryMsgCount_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryMsgCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *QueryMsgCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryMsgCountArgs(%+v)", *p)
}

type QueryMsgCountResult struct {
	Success *QueryMsgCountReturn `thrift:"success,0" json:"success"`
}

func NewQueryMsgCountResult() *QueryMsgCountResult {
	return &QueryMsgCountResult{}
}

var QueryMsgCountResult_Success_DEFAULT *QueryMsgCountReturn

func (p *QueryMsgCountResult) GetSuccess() *QueryMsgCountReturn {
	if !p.IsSetSuccess() {
		return QueryMsgCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *QueryMsgCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryMsgCountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryMsgCountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryMsgCountReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryMsgCountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryMsgCount_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryMsgCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryMsgCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryMsgCountResult(%+v)", *p)
}

type QueryMsgListArgs struct {
	Req *QueryMsgListReq `thrift:"req,1,required" json:"req"`
}

func NewQueryMsgListArgs() *QueryMsgListArgs {
	return &QueryMsgListArgs{}
}

var QueryMsgListArgs_Req_DEFAULT *QueryMsgListReq

func (p *QueryMsgListArgs) GetReq() *QueryMsgListReq {
	if !p.IsSetReq() {
		return QueryMsgListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *QueryMsgListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryMsgListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryMsgListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &QueryMsgListReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *QueryMsgListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryMsgList_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryMsgListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *QueryMsgListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryMsgListArgs(%+v)", *p)
}

type QueryMsgListResult struct {
	Success *QueryMsgListReturn `thrift:"success,0" json:"success"`
}

func NewQueryMsgListResult() *QueryMsgListResult {
	return &QueryMsgListResult{}
}

var QueryMsgListResult_Success_DEFAULT *QueryMsgListReturn

func (p *QueryMsgListResult) GetSuccess() *QueryMsgListReturn {
	if !p.IsSetSuccess() {
		return QueryMsgListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *QueryMsgListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryMsgListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryMsgListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryMsgListReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryMsgListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryMsgList_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryMsgListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryMsgListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryMsgListResult(%+v)", *p)
}

type QueryUserMsgArgs struct {
	Req *QueryUserMsgReq `thrift:"req,1,required" json:"req"`
}

func NewQueryUserMsgArgs() *QueryUserMsgArgs {
	return &QueryUserMsgArgs{}
}

var QueryUserMsgArgs_Req_DEFAULT *QueryUserMsgReq

func (p *QueryUserMsgArgs) GetReq() *QueryUserMsgReq {
	if !p.IsSetReq() {
		return QueryUserMsgArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *QueryUserMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryUserMsgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryUserMsgArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &QueryUserMsgReq{
		MsgNum: 15,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *QueryUserMsgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryUserMsg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryUserMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *QueryUserMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserMsgArgs(%+v)", *p)
}

type QueryUserMsgResult struct {
	Success *QueryUserMsgReturn `thrift:"success,0" json:"success"`
}

func NewQueryUserMsgResult() *QueryUserMsgResult {
	return &QueryUserMsgResult{}
}

var QueryUserMsgResult_Success_DEFAULT *QueryUserMsgReturn

func (p *QueryUserMsgResult) GetSuccess() *QueryUserMsgReturn {
	if !p.IsSetSuccess() {
		return QueryUserMsgResult_Success_DEFAULT
	}
	return p.Success
}
func (p *QueryUserMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryUserMsgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryUserMsgResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryUserMsgReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryUserMsgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryUserMsg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryUserMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryUserMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserMsgResult(%+v)", *p)
}

type SendUserMsgArgs struct {
	Req *SendUserMsgReq `thrift:"req,1,required" json:"req"`
}

func NewSendUserMsgArgs() *SendUserMsgArgs {
	return &SendUserMsgArgs{}
}

var SendUserMsgArgs_Req_DEFAULT *SendUserMsgReq

func (p *SendUserMsgArgs) GetReq() *SendUserMsgReq {
	if !p.IsSetReq() {
		return SendUserMsgArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SendUserMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendUserMsgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendUserMsgArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &SendUserMsgReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *SendUserMsgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SendUserMsg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendUserMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *SendUserMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendUserMsgArgs(%+v)", *p)
}

type SendUserMsgResult struct {
	Success *SendUserMsgReturn `thrift:"success,0" json:"success"`
}

func NewSendUserMsgResult() *SendUserMsgResult {
	return &SendUserMsgResult{}
}

var SendUserMsgResult_Success_DEFAULT *SendUserMsgReturn

func (p *SendUserMsgResult) GetSuccess() *SendUserMsgReturn {
	if !p.IsSetSuccess() {
		return SendUserMsgResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SendUserMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendUserMsgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendUserMsgResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SendUserMsgReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *SendUserMsgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SendUserMsg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendUserMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SendUserMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendUserMsgResult(%+v)", *p)
}

type OptBlackListArgs struct {
	Req *OptBlackListReq `thrift:"req,1,required" json:"req"`
}

func NewOptBlackListArgs() *OptBlackListArgs {
	return &OptBlackListArgs{}
}

var OptBlackListArgs_Req_DEFAULT *OptBlackListReq

func (p *OptBlackListArgs) GetReq() *OptBlackListReq {
	if !p.IsSetReq() {
		return OptBlackListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OptBlackListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OptBlackListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OptBlackListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &OptBlackListReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *OptBlackListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OptBlackList_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OptBlackListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *OptBlackListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OptBlackListArgs(%+v)", *p)
}

type OptBlackListResult struct {
	Success *OptBlackListReturn `thrift:"success,0" json:"success"`
}

func NewOptBlackListResult() *OptBlackListResult {
	return &OptBlackListResult{}
}

var OptBlackListResult_Success_DEFAULT *OptBlackListReturn

func (p *OptBlackListResult) GetSuccess() *OptBlackListReturn {
	if !p.IsSetSuccess() {
		return OptBlackListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OptBlackListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OptBlackListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OptBlackListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &OptBlackListReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *OptBlackListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OptBlackList_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OptBlackListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *OptBlackListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OptBlackListResult(%+v)", *p)
}

type QueryBlackListArgs struct {
	Req *QueryBlackListReq `thrift:"req,1,required" json:"req"`
}

func NewQueryBlackListArgs() *QueryBlackListArgs {
	return &QueryBlackListArgs{}
}

var QueryBlackListArgs_Req_DEFAULT *QueryBlackListReq

func (p *QueryBlackListArgs) GetReq() *QueryBlackListReq {
	if !p.IsSetReq() {
		return QueryBlackListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *QueryBlackListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryBlackListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryBlackListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &QueryBlackListReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *QueryBlackListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryBlackList_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryBlackListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *QueryBlackListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryBlackListArgs(%+v)", *p)
}

type QueryBlackListResult struct {
	Success *QueryBlackListReturn `thrift:"success,0" json:"success"`
}

func NewQueryBlackListResult() *QueryBlackListResult {
	return &QueryBlackListResult{}
}

var QueryBlackListResult_Success_DEFAULT *QueryBlackListReturn

func (p *QueryBlackListResult) GetSuccess() *QueryBlackListReturn {
	if !p.IsSetSuccess() {
		return QueryBlackListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *QueryBlackListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryBlackListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryBlackListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryBlackListReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryBlackListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryBlackList_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryBlackListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryBlackListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryBlackListResult(%+v)", *p)
}

type IsInMyBlackListArgs struct {
	Req *IsInMyBlackListReq `thrift:"req,1,required" json:"req"`
}

func NewIsInMyBlackListArgs() *IsInMyBlackListArgs {
	return &IsInMyBlackListArgs{}
}

var IsInMyBlackListArgs_Req_DEFAULT *IsInMyBlackListReq

func (p *IsInMyBlackListArgs) GetReq() *IsInMyBlackListReq {
	if !p.IsSetReq() {
		return IsInMyBlackListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IsInMyBlackListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IsInMyBlackListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IsInMyBlackListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &IsInMyBlackListReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *IsInMyBlackListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IsInMyBlackList_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IsInMyBlackListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *IsInMyBlackListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsInMyBlackListArgs(%+v)", *p)
}

type IsInMyBlackListResult struct {
	Success *ErrInfo `thrift:"success,0" json:"success"`
}

func NewIsInMyBlackListResult() *IsInMyBlackListResult {
	return &IsInMyBlackListResult{}
}

var IsInMyBlackListResult_Success_DEFAULT *ErrInfo

func (p *IsInMyBlackListResult) GetSuccess() *ErrInfo {
	if !p.IsSetSuccess() {
		return IsInMyBlackListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IsInMyBlackListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IsInMyBlackListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IsInMyBlackListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ErrInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *IsInMyBlackListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IsInMyBlackList_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IsInMyBlackListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *IsInMyBlackListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsInMyBlackListResult(%+v)", *p)
}

type IsMyFollowerArgs struct {
	Req *IsFollowerReq `thrift:"req,1,required" json:"req"`
}

func NewIsMyFollowerArgs() *IsMyFollowerArgs {
	return &IsMyFollowerArgs{}
}

var IsMyFollowerArgs_Req_DEFAULT *IsFollowerReq

func (p *IsMyFollowerArgs) GetReq() *IsFollowerReq {
	if !p.IsSetReq() {
		return IsMyFollowerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IsMyFollowerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IsMyFollowerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IsMyFollowerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &IsFollowerReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *IsMyFollowerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IsMyFollower_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IsMyFollowerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *IsMyFollowerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsMyFollowerArgs(%+v)", *p)
}

type IsMyFollowerResult struct {
	Success *IsFollowerReturn `thrift:"success,0" json:"success"`
}

func NewIsMyFollowerResult() *IsMyFollowerResult {
	return &IsMyFollowerResult{}
}

var IsMyFollowerResult_Success_DEFAULT *IsFollowerReturn

func (p *IsMyFollowerResult) GetSuccess() *IsFollowerReturn {
	if !p.IsSetSuccess() {
		return IsMyFollowerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IsMyFollowerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IsMyFollowerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IsMyFollowerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IsFollowerReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *IsMyFollowerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IsMyFollower_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IsMyFollowerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *IsMyFollowerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsMyFollowerResult(%+v)", *p)
}

type GetAllMyFollowersArgs struct {
	Req *GetAllMyFollowersReq `thrift:"req,1,required" json:"req"`
}

func NewGetAllMyFollowersArgs() *GetAllMyFollowersArgs {
	return &GetAllMyFollowersArgs{}
}

var GetAllMyFollowersArgs_Req_DEFAULT *GetAllMyFollowersReq

func (p *GetAllMyFollowersArgs) GetReq() *GetAllMyFollowersReq {
	if !p.IsSetReq() {
		return GetAllMyFollowersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetAllMyFollowersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAllMyFollowersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllMyFollowersArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &GetAllMyFollowersReq{
		FollowType: 3,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetAllMyFollowersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAllMyFollowers_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllMyFollowersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetAllMyFollowersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllMyFollowersArgs(%+v)", *p)
}

type GetAllMyFollowersResult struct {
	Success *GetAllMyFollowersReturn `thrift:"success,0" json:"success"`
}

func NewGetAllMyFollowersResult() *GetAllMyFollowersResult {
	return &GetAllMyFollowersResult{}
}

var GetAllMyFollowersResult_Success_DEFAULT *GetAllMyFollowersReturn

func (p *GetAllMyFollowersResult) GetSuccess() *GetAllMyFollowersReturn {
	if !p.IsSetSuccess() {
		return GetAllMyFollowersResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GetAllMyFollowersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAllMyFollowersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllMyFollowersResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetAllMyFollowersReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetAllMyFollowersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAllMyFollowers_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllMyFollowersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetAllMyFollowersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllMyFollowersResult(%+v)", *p)
}

type ReportUserArgs struct {
	Req *ReportUserReq `thrift:"req,1,required" json:"req"`
}

func NewReportUserArgs() *ReportUserArgs {
	return &ReportUserArgs{}
}

var ReportUserArgs_Req_DEFAULT *ReportUserReq

func (p *ReportUserArgs) GetReq() *ReportUserReq {
	if !p.IsSetReq() {
		return ReportUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ReportUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ReportUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &ReportUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *ReportUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReportUser_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *ReportUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportUserArgs(%+v)", *p)
}

type ReportUserResult struct {
	Success *ReportUserReturn `thrift:"success,0" json:"success"`
}

func NewReportUserResult() *ReportUserResult {
	return &ReportUserResult{}
}

var ReportUserResult_Success_DEFAULT *ReportUserReturn

func (p *ReportUserResult) GetSuccess() *ReportUserReturn {
	if !p.IsSetSuccess() {
		return ReportUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ReportUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReportUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ReportUserReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ReportUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReportUser_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ReportUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportUserResult(%+v)", *p)
}

type DeleteConversationArgs struct {
	Req *DeleteConversationReq `thrift:"req,1,required" json:"req"`
}

func NewDeleteConversationArgs() *DeleteConversationArgs {
	return &DeleteConversationArgs{}
}

var DeleteConversationArgs_Req_DEFAULT *DeleteConversationReq

func (p *DeleteConversationArgs) GetReq() *DeleteConversationReq {
	if !p.IsSetReq() {
		return DeleteConversationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DeleteConversationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteConversationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteConversationArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &DeleteConversationReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *DeleteConversationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteConversation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteConversationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *DeleteConversationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteConversationArgs(%+v)", *p)
}

type DeleteConversationResult struct {
	Success *DeleteConversationReturn `thrift:"success,0" json:"success"`
}

func NewDeleteConversationResult() *DeleteConversationResult {
	return &DeleteConversationResult{}
}

var DeleteConversationResult_Success_DEFAULT *DeleteConversationReturn

func (p *DeleteConversationResult) GetSuccess() *DeleteConversationReturn {
	if !p.IsSetSuccess() {
		return DeleteConversationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DeleteConversationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteConversationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteConversationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DeleteConversationReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *DeleteConversationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteConversation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteConversationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DeleteConversationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteConversationResult(%+v)", *p)
}

type GetReportedMsgArgs struct {
	Req *GetReportedMsgReq `thrift:"req,1,required" json:"req"`
}

func NewGetReportedMsgArgs() *GetReportedMsgArgs {
	return &GetReportedMsgArgs{}
}

var GetReportedMsgArgs_Req_DEFAULT *GetReportedMsgReq

func (p *GetReportedMsgArgs) GetReq() *GetReportedMsgReq {
	if !p.IsSetReq() {
		return GetReportedMsgArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetReportedMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetReportedMsgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetReportedMsgArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &GetReportedMsgReq{
		ProcessStatus: 1,

		Num: 20,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetReportedMsgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetReportedMsg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetReportedMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetReportedMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReportedMsgArgs(%+v)", *p)
}

type GetReportedMsgResult struct {
	Success *GetReportedMsgReturn `thrift:"success,0" json:"success"`
}

func NewGetReportedMsgResult() *GetReportedMsgResult {
	return &GetReportedMsgResult{}
}

var GetReportedMsgResult_Success_DEFAULT *GetReportedMsgReturn

func (p *GetReportedMsgResult) GetSuccess() *GetReportedMsgReturn {
	if !p.IsSetSuccess() {
		return GetReportedMsgResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GetReportedMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetReportedMsgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetReportedMsgResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetReportedMsgReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetReportedMsgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetReportedMsg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetReportedMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetReportedMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReportedMsgResult(%+v)", *p)
}

type ProcessReportedMsgArgs struct {
	Req *ProcessReportedMsgReq `thrift:"req,1,required" json:"req"`
}

func NewProcessReportedMsgArgs() *ProcessReportedMsgArgs {
	return &ProcessReportedMsgArgs{}
}

var ProcessReportedMsgArgs_Req_DEFAULT *ProcessReportedMsgReq

func (p *ProcessReportedMsgArgs) GetReq() *ProcessReportedMsgReq {
	if !p.IsSetReq() {
		return ProcessReportedMsgArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProcessReportedMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProcessReportedMsgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ProcessReportedMsgArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &ProcessReportedMsgReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *ProcessReportedMsgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProcessReportedMsg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ProcessReportedMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *ProcessReportedMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProcessReportedMsgArgs(%+v)", *p)
}

type ProcessReportedMsgResult struct {
	Success *ProcessReportedMsgReturn `thrift:"success,0" json:"success"`
}

func NewProcessReportedMsgResult() *ProcessReportedMsgResult {
	return &ProcessReportedMsgResult{}
}

var ProcessReportedMsgResult_Success_DEFAULT *ProcessReportedMsgReturn

func (p *ProcessReportedMsgResult) GetSuccess() *ProcessReportedMsgReturn {
	if !p.IsSetSuccess() {
		return ProcessReportedMsgResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProcessReportedMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProcessReportedMsgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ProcessReportedMsgResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ProcessReportedMsgReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ProcessReportedMsgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProcessReportedMsg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ProcessReportedMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ProcessReportedMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProcessReportedMsgResult(%+v)", *p)
}

type GetReportRecordArgs struct {
	Req *GetReportRecordReq `thrift:"req,1,required" json:"req"`
}

func NewGetReportRecordArgs() *GetReportRecordArgs {
	return &GetReportRecordArgs{}
}

var GetReportRecordArgs_Req_DEFAULT *GetReportRecordReq

func (p *GetReportRecordArgs) GetReq() *GetReportRecordReq {
	if !p.IsSetReq() {
		return GetReportRecordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetReportRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetReportRecordArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetReportRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &GetReportRecordReq{
		Num: 20,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetReportRecordArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetReportRecord_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetReportRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetReportRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReportRecordArgs(%+v)", *p)
}

type GetReportRecordResult struct {
	Success *GetReportRecordReturn `thrift:"success,0" json:"success"`
}

func NewGetReportRecordResult() *GetReportRecordResult {
	return &GetReportRecordResult{}
}

var GetReportRecordResult_Success_DEFAULT *GetReportRecordReturn

func (p *GetReportRecordResult) GetSuccess() *GetReportRecordReturn {
	if !p.IsSetSuccess() {
		return GetReportRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GetReportRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetReportRecordResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetReportRecordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetReportRecordReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetReportRecordResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetReportRecord_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetReportRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetReportRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReportRecordResult(%+v)", *p)
}

type GetWatchingRuleArgs struct {
	Req *GetWatchingRuleReq `thrift:"req,1,required" json:"req"`
}

func NewGetWatchingRuleArgs() *GetWatchingRuleArgs {
	return &GetWatchingRuleArgs{}
}

var GetWatchingRuleArgs_Req_DEFAULT *GetWatchingRuleReq

func (p *GetWatchingRuleArgs) GetReq() *GetWatchingRuleReq {
	if !p.IsSetReq() {
		return GetWatchingRuleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetWatchingRuleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetWatchingRuleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetWatchingRuleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &GetWatchingRuleReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetWatchingRuleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetWatchingRule_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetWatchingRuleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetWatchingRuleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWatchingRuleArgs(%+v)", *p)
}

type GetWatchingRuleResult struct {
	Success *GetWatchingRuleReturn `thrift:"success,0" json:"success"`
}

func NewGetWatchingRuleResult() *GetWatchingRuleResult {
	return &GetWatchingRuleResult{}
}

var GetWatchingRuleResult_Success_DEFAULT *GetWatchingRuleReturn

func (p *GetWatchingRuleResult) GetSuccess() *GetWatchingRuleReturn {
	if !p.IsSetSuccess() {
		return GetWatchingRuleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GetWatchingRuleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetWatchingRuleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetWatchingRuleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetWatchingRuleReturn{
		Period: 10,

		Times: 3,

		Status: 3,
	}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetWatchingRuleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetWatchingRule_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetWatchingRuleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetWatchingRuleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWatchingRuleResult(%+v)", *p)
}

type SetWatchingRuleArgs struct {
	Req *SetWatchingRuleReq `thrift:"req,1,required" json:"req"`
}

func NewSetWatchingRuleArgs() *SetWatchingRuleArgs {
	return &SetWatchingRuleArgs{}
}

var SetWatchingRuleArgs_Req_DEFAULT *SetWatchingRuleReq

func (p *SetWatchingRuleArgs) GetReq() *SetWatchingRuleReq {
	if !p.IsSetReq() {
		return SetWatchingRuleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SetWatchingRuleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SetWatchingRuleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetWatchingRuleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &SetWatchingRuleReq{
		Period: 10,

		Times: 3,

		Status: 3,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *SetWatchingRuleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetWatchingRule_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetWatchingRuleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *SetWatchingRuleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetWatchingRuleArgs(%+v)", *p)
}

type SetWatchingRuleResult struct {
	Success *SetWatchingRuleReturn `thrift:"success,0" json:"success"`
}

func NewSetWatchingRuleResult() *SetWatchingRuleResult {
	return &SetWatchingRuleResult{}
}

var SetWatchingRuleResult_Success_DEFAULT *SetWatchingRuleReturn

func (p *SetWatchingRuleResult) GetSuccess() *SetWatchingRuleReturn {
	if !p.IsSetSuccess() {
		return SetWatchingRuleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SetWatchingRuleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetWatchingRuleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetWatchingRuleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SetWatchingRuleReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *SetWatchingRuleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetWatchingRule_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetWatchingRuleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SetWatchingRuleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetWatchingRuleResult(%+v)", *p)
}

type GetWatchedMsgArgs struct {
	Req *GetWatchedMsgReq `thrift:"req,1,required" json:"req"`
}

func NewGetWatchedMsgArgs() *GetWatchedMsgArgs {
	return &GetWatchedMsgArgs{}
}

var GetWatchedMsgArgs_Req_DEFAULT *GetWatchedMsgReq

func (p *GetWatchedMsgArgs) GetReq() *GetWatchedMsgReq {
	if !p.IsSetReq() {
		return GetWatchedMsgArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetWatchedMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetWatchedMsgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetWatchedMsgArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &GetWatchedMsgReq{
		Num: 20,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetWatchedMsgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetWatchedMsg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetWatchedMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetWatchedMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWatchedMsgArgs(%+v)", *p)
}

type GetWatchedMsgResult struct {
	Success *GetWatchedMsgReturn `thrift:"success,0" json:"success"`
}

func NewGetWatchedMsgResult() *GetWatchedMsgResult {
	return &GetWatchedMsgResult{}
}

var GetWatchedMsgResult_Success_DEFAULT *GetWatchedMsgReturn

func (p *GetWatchedMsgResult) GetSuccess() *GetWatchedMsgReturn {
	if !p.IsSetSuccess() {
		return GetWatchedMsgResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GetWatchedMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetWatchedMsgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetWatchedMsgResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetWatchedMsgReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetWatchedMsgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetWatchedMsg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetWatchedMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetWatchedMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWatchedMsgResult(%+v)", *p)
}

type GetSilencedUserArgs struct {
	Req *GetSilencedUserReq `thrift:"req,1,required" json:"req"`
}

func NewGetSilencedUserArgs() *GetSilencedUserArgs {
	return &GetSilencedUserArgs{}
}

var GetSilencedUserArgs_Req_DEFAULT *GetSilencedUserReq

func (p *GetSilencedUserArgs) GetReq() *GetSilencedUserReq {
	if !p.IsSetReq() {
		return GetSilencedUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetSilencedUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSilencedUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSilencedUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &GetSilencedUserReq{
		Num: 20,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetSilencedUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSilencedUser_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSilencedUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetSilencedUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSilencedUserArgs(%+v)", *p)
}

type GetSilencedUserResult struct {
	Success *GetSilencedUserReturn `thrift:"success,0" json:"success"`
}

func NewGetSilencedUserResult() *GetSilencedUserResult {
	return &GetSilencedUserResult{}
}

var GetSilencedUserResult_Success_DEFAULT *GetSilencedUserReturn

func (p *GetSilencedUserResult) GetSuccess() *GetSilencedUserReturn {
	if !p.IsSetSuccess() {
		return GetSilencedUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GetSilencedUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSilencedUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSilencedUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetSilencedUserReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetSilencedUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSilencedUser_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSilencedUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSilencedUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSilencedUserResult(%+v)", *p)
}

type OutSilencedUserArgs struct {
	Req *OutSilencedUserReq `thrift:"req,1,required" json:"req"`
}

func NewOutSilencedUserArgs() *OutSilencedUserArgs {
	return &OutSilencedUserArgs{}
}

var OutSilencedUserArgs_Req_DEFAULT *OutSilencedUserReq

func (p *OutSilencedUserArgs) GetReq() *OutSilencedUserReq {
	if !p.IsSetReq() {
		return OutSilencedUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OutSilencedUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OutSilencedUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OutSilencedUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &OutSilencedUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *OutSilencedUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OutSilencedUser_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OutSilencedUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *OutSilencedUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OutSilencedUserArgs(%+v)", *p)
}

type OutSilencedUserResult struct {
	Success *OutSilencedUserReturn `thrift:"success,0" json:"success"`
}

func NewOutSilencedUserResult() *OutSilencedUserResult {
	return &OutSilencedUserResult{}
}

var OutSilencedUserResult_Success_DEFAULT *OutSilencedUserReturn

func (p *OutSilencedUserResult) GetSuccess() *OutSilencedUserReturn {
	if !p.IsSetSuccess() {
		return OutSilencedUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OutSilencedUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OutSilencedUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OutSilencedUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &OutSilencedUserReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *OutSilencedUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OutSilencedUser_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OutSilencedUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *OutSilencedUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OutSilencedUserResult(%+v)", *p)
}

type GetSilenceRecordArgs struct {
	Req *GetSilenceRecordReq `thrift:"req,1,required" json:"req"`
}

func NewGetSilenceRecordArgs() *GetSilenceRecordArgs {
	return &GetSilenceRecordArgs{}
}

var GetSilenceRecordArgs_Req_DEFAULT *GetSilenceRecordReq

func (p *GetSilenceRecordArgs) GetReq() *GetSilenceRecordReq {
	if !p.IsSetReq() {
		return GetSilenceRecordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetSilenceRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSilenceRecordArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSilenceRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &GetSilenceRecordReq{
		Num: 20,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetSilenceRecordArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSilenceRecord_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSilenceRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetSilenceRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSilenceRecordArgs(%+v)", *p)
}

type GetSilenceRecordResult struct {
	Success *GetSilenceRecordReturn `thrift:"success,0" json:"success"`
}

func NewGetSilenceRecordResult() *GetSilenceRecordResult {
	return &GetSilenceRecordResult{}
}

var GetSilenceRecordResult_Success_DEFAULT *GetSilenceRecordReturn

func (p *GetSilenceRecordResult) GetSuccess() *GetSilenceRecordReturn {
	if !p.IsSetSuccess() {
		return GetSilenceRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GetSilenceRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSilenceRecordResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSilenceRecordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetSilenceRecordReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetSilenceRecordResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSilenceRecord_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSilenceRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSilenceRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSilenceRecordResult(%+v)", *p)
}

type OAPushUserNoticeMsgArgs struct {
	Req *OAPushUserNoticeMsgReq `thrift:"req,1,required" json:"req"`
}

func NewOAPushUserNoticeMsgArgs() *OAPushUserNoticeMsgArgs {
	return &OAPushUserNoticeMsgArgs{}
}

var OAPushUserNoticeMsgArgs_Req_DEFAULT *OAPushUserNoticeMsgReq

func (p *OAPushUserNoticeMsgArgs) GetReq() *OAPushUserNoticeMsgReq {
	if !p.IsSetReq() {
		return OAPushUserNoticeMsgArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OAPushUserNoticeMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OAPushUserNoticeMsgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAPushUserNoticeMsgArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &OAPushUserNoticeMsgReq{
		BussMark: "PLATFORM",
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *OAPushUserNoticeMsgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAPushUserNoticeMsg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAPushUserNoticeMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *OAPushUserNoticeMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAPushUserNoticeMsgArgs(%+v)", *p)
}

type OAPushUserNoticeMsgResult struct {
	Success *PushUserNoticeMsgReturn `thrift:"success,0" json:"success"`
}

func NewOAPushUserNoticeMsgResult() *OAPushUserNoticeMsgResult {
	return &OAPushUserNoticeMsgResult{}
}

var OAPushUserNoticeMsgResult_Success_DEFAULT *PushUserNoticeMsgReturn

func (p *OAPushUserNoticeMsgResult) GetSuccess() *PushUserNoticeMsgReturn {
	if !p.IsSetSuccess() {
		return OAPushUserNoticeMsgResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OAPushUserNoticeMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OAPushUserNoticeMsgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAPushUserNoticeMsgResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PushUserNoticeMsgReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *OAPushUserNoticeMsgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAPushUserNoticeMsg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAPushUserNoticeMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *OAPushUserNoticeMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAPushUserNoticeMsgResult(%+v)", *p)
}

type OADelTimeUnreachedMsgArgs struct {
	Req *OADelTimeUnreachedMsgReq `thrift:"req,1,required" json:"req"`
}

func NewOADelTimeUnreachedMsgArgs() *OADelTimeUnreachedMsgArgs {
	return &OADelTimeUnreachedMsgArgs{}
}

var OADelTimeUnreachedMsgArgs_Req_DEFAULT *OADelTimeUnreachedMsgReq

func (p *OADelTimeUnreachedMsgArgs) GetReq() *OADelTimeUnreachedMsgReq {
	if !p.IsSetReq() {
		return OADelTimeUnreachedMsgArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OADelTimeUnreachedMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OADelTimeUnreachedMsgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OADelTimeUnreachedMsgArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &OADelTimeUnreachedMsgReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *OADelTimeUnreachedMsgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OADelTimeUnreachedMsg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OADelTimeUnreachedMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *OADelTimeUnreachedMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OADelTimeUnreachedMsgArgs(%+v)", *p)
}

type OADelTimeUnreachedMsgResult struct {
	Success *PushUserNoticeMsgReturn `thrift:"success,0" json:"success"`
}

func NewOADelTimeUnreachedMsgResult() *OADelTimeUnreachedMsgResult {
	return &OADelTimeUnreachedMsgResult{}
}

var OADelTimeUnreachedMsgResult_Success_DEFAULT *PushUserNoticeMsgReturn

func (p *OADelTimeUnreachedMsgResult) GetSuccess() *PushUserNoticeMsgReturn {
	if !p.IsSetSuccess() {
		return OADelTimeUnreachedMsgResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OADelTimeUnreachedMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OADelTimeUnreachedMsgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OADelTimeUnreachedMsgResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PushUserNoticeMsgReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *OADelTimeUnreachedMsgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OADelTimeUnreachedMsg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OADelTimeUnreachedMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *OADelTimeUnreachedMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OADelTimeUnreachedMsgResult(%+v)", *p)
}

type OAQueryUserMsgArgs struct {
	Req *OAQueryUserMsgReq `thrift:"req,1,required" json:"req"`
}

func NewOAQueryUserMsgArgs() *OAQueryUserMsgArgs {
	return &OAQueryUserMsgArgs{}
}

var OAQueryUserMsgArgs_Req_DEFAULT *OAQueryUserMsgReq

func (p *OAQueryUserMsgArgs) GetReq() *OAQueryUserMsgReq {
	if !p.IsSetReq() {
		return OAQueryUserMsgArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OAQueryUserMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OAQueryUserMsgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAQueryUserMsgArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &OAQueryUserMsgReq{
		Num: 20,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *OAQueryUserMsgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAQueryUserMsg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAQueryUserMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *OAQueryUserMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAQueryUserMsgArgs(%+v)", *p)
}

type OAQueryUserMsgResult struct {
	Success *OAQueryUserMsgReturn `thrift:"success,0" json:"success"`
}

func NewOAQueryUserMsgResult() *OAQueryUserMsgResult {
	return &OAQueryUserMsgResult{}
}

var OAQueryUserMsgResult_Success_DEFAULT *OAQueryUserMsgReturn

func (p *OAQueryUserMsgResult) GetSuccess() *OAQueryUserMsgReturn {
	if !p.IsSetSuccess() {
		return OAQueryUserMsgResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OAQueryUserMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OAQueryUserMsgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAQueryUserMsgResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &OAQueryUserMsgReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *OAQueryUserMsgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAQueryUserMsg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAQueryUserMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAQueryUserMsgResult(%+v)", *p)
}

type OAQueryUserSentMsgArgs struct {
	Req *OAQueryUserSentMsgReq `thrift:"req,1,required" json:"req"`
}

func NewOAQueryUserSentMsgArgs() *OAQueryUserSentMsgArgs {
	return &OAQueryUserSentMsgArgs{}
}

var OAQueryUserSentMsgArgs_Req_DEFAULT *OAQueryUserSentMsgReq

func (p *OAQueryUserSentMsgArgs) GetReq() *OAQueryUserSentMsgReq {
	if !p.IsSetReq() {
		return OAQueryUserSentMsgArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OAQueryUserSentMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OAQueryUserSentMsgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAQueryUserSentMsgArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &OAQueryUserSentMsgReq{
		Num: 20,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *OAQueryUserSentMsgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAQueryUserSentMsg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAQueryUserSentMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *OAQueryUserSentMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAQueryUserSentMsgArgs(%+v)", *p)
}

type OAQueryUserSentMsgResult struct {
	Success *OAQueryUserSentMsgReturn `thrift:"success,0" json:"success"`
}

func NewOAQueryUserSentMsgResult() *OAQueryUserSentMsgResult {
	return &OAQueryUserSentMsgResult{}
}

var OAQueryUserSentMsgResult_Success_DEFAULT *OAQueryUserSentMsgReturn

func (p *OAQueryUserSentMsgResult) GetSuccess() *OAQueryUserSentMsgReturn {
	if !p.IsSetSuccess() {
		return OAQueryUserSentMsgResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OAQueryUserSentMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OAQueryUserSentMsgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAQueryUserSentMsgResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &OAQueryUserSentMsgReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *OAQueryUserSentMsgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAQueryUserSentMsg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAQueryUserSentMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserSentMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAQueryUserSentMsgResult(%+v)", *p)
}

type OAQueryUserMsgRecordArgs struct {
	Req *OAQueryUserMsgRecordReq `thrift:"req,1,required" json:"req"`
}

func NewOAQueryUserMsgRecordArgs() *OAQueryUserMsgRecordArgs {
	return &OAQueryUserMsgRecordArgs{}
}

var OAQueryUserMsgRecordArgs_Req_DEFAULT *OAQueryUserMsgRecordReq

func (p *OAQueryUserMsgRecordArgs) GetReq() *OAQueryUserMsgRecordReq {
	if !p.IsSetReq() {
		return OAQueryUserMsgRecordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OAQueryUserMsgRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OAQueryUserMsgRecordArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAQueryUserMsgRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &OAQueryUserMsgRecordReq{
		Num: 20,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *OAQueryUserMsgRecordArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAQueryUserMsgRecord_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAQueryUserMsgRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *OAQueryUserMsgRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAQueryUserMsgRecordArgs(%+v)", *p)
}

type OAQueryUserMsgRecordResult struct {
	Success *OAQueryUserSentMsgReturn `thrift:"success,0" json:"success"`
}

func NewOAQueryUserMsgRecordResult() *OAQueryUserMsgRecordResult {
	return &OAQueryUserMsgRecordResult{}
}

var OAQueryUserMsgRecordResult_Success_DEFAULT *OAQueryUserSentMsgReturn

func (p *OAQueryUserMsgRecordResult) GetSuccess() *OAQueryUserSentMsgReturn {
	if !p.IsSetSuccess() {
		return OAQueryUserMsgRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OAQueryUserMsgRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OAQueryUserMsgRecordResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAQueryUserMsgRecordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &OAQueryUserSentMsgReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *OAQueryUserMsgRecordResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAQueryUserMsgRecord_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAQueryUserMsgRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *OAQueryUserMsgRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAQueryUserMsgRecordResult(%+v)", *p)
}

type OAAnswerUserMsgArgs struct {
	Req *OAAnswerUserMsgReq `thrift:"req,1,required" json:"req"`
}

func NewOAAnswerUserMsgArgs() *OAAnswerUserMsgArgs {
	return &OAAnswerUserMsgArgs{}
}

var OAAnswerUserMsgArgs_Req_DEFAULT *OAAnswerUserMsgReq

func (p *OAAnswerUserMsgArgs) GetReq() *OAAnswerUserMsgReq {
	if !p.IsSetReq() {
		return OAAnswerUserMsgArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OAAnswerUserMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OAAnswerUserMsgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAAnswerUserMsgArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &OAAnswerUserMsgReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *OAAnswerUserMsgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAAnswerUserMsg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAAnswerUserMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *OAAnswerUserMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAAnswerUserMsgArgs(%+v)", *p)
}

type OAAnswerUserMsgResult struct {
	Success *OAAnswerUserMsgReturn `thrift:"success,0" json:"success"`
}

func NewOAAnswerUserMsgResult() *OAAnswerUserMsgResult {
	return &OAAnswerUserMsgResult{}
}

var OAAnswerUserMsgResult_Success_DEFAULT *OAAnswerUserMsgReturn

func (p *OAAnswerUserMsgResult) GetSuccess() *OAAnswerUserMsgReturn {
	if !p.IsSetSuccess() {
		return OAAnswerUserMsgResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OAAnswerUserMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OAAnswerUserMsgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OAAnswerUserMsgResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &OAAnswerUserMsgReturn{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *OAAnswerUserMsgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OAAnswerUserMsg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OAAnswerUserMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *OAAnswerUserMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OAAnswerUserMsgResult(%+v)", *p)
}
