// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"msgcenter"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  PushUserNoticeMsgReturn PushUserNoticeMsg(PushUserNoticeMsgReq req)")
	fmt.Fprintln(os.Stderr, "  PushUserNoticeMsgReturn SyncOldMsg(PushUserNoticeMsgReq req)")
	fmt.Fprintln(os.Stderr, "  RefreshMsgListReturn RefreshMsgList(RefreshMsgListReq req)")
	fmt.Fprintln(os.Stderr, "  QueryMsgCountReturn QueryMsgCount(QueryMsgListReq req)")
	fmt.Fprintln(os.Stderr, "  QueryMsgListReturn QueryMsgList(QueryMsgListReq req)")
	fmt.Fprintln(os.Stderr, "  QueryUserMsgReturn QueryUserMsg(QueryUserMsgReq req)")
	fmt.Fprintln(os.Stderr, "  SendUserMsgReturn SendUserMsg(SendUserMsgReq req)")
	fmt.Fprintln(os.Stderr, "  OptBlackListReturn OptBlackList(OptBlackListReq req)")
	fmt.Fprintln(os.Stderr, "  QueryBlackListReturn QueryBlackList(QueryBlackListReq req)")
	fmt.Fprintln(os.Stderr, "  ErrInfo IsInMyBlackList(IsInMyBlackListReq req)")
	fmt.Fprintln(os.Stderr, "  IsFollowerReturn IsMyFollower(IsFollowerReq req)")
	fmt.Fprintln(os.Stderr, "  GetAllMyFollowersReturn GetAllMyFollowers(GetAllMyFollowersReq req)")
	fmt.Fprintln(os.Stderr, "  ReportUserReturn ReportUser(ReportUserReq req)")
	fmt.Fprintln(os.Stderr, "  DeleteConversationReturn DeleteConversation(DeleteConversationReq req)")
	fmt.Fprintln(os.Stderr, "  GetReportedMsgReturn GetReportedMsg(GetReportedMsgReq req)")
	fmt.Fprintln(os.Stderr, "  ProcessReportedMsgReturn ProcessReportedMsg(ProcessReportedMsgReq req)")
	fmt.Fprintln(os.Stderr, "  GetReportRecordReturn GetReportRecord(GetReportRecordReq req)")
	fmt.Fprintln(os.Stderr, "  GetWatchingRuleReturn GetWatchingRule(GetWatchingRuleReq req)")
	fmt.Fprintln(os.Stderr, "  SetWatchingRuleReturn SetWatchingRule(SetWatchingRuleReq req)")
	fmt.Fprintln(os.Stderr, "  GetWatchedMsgReturn GetWatchedMsg(GetWatchedMsgReq req)")
	fmt.Fprintln(os.Stderr, "  GetSilencedUserReturn GetSilencedUser(GetSilencedUserReq req)")
	fmt.Fprintln(os.Stderr, "  OutSilencedUserReturn OutSilencedUser(OutSilencedUserReq req)")
	fmt.Fprintln(os.Stderr, "  GetSilenceRecordReturn GetSilenceRecord(GetSilenceRecordReq req)")
	fmt.Fprintln(os.Stderr, "  PushUserNoticeMsgReturn OAPushUserNoticeMsg(OAPushUserNoticeMsgReq req)")
	fmt.Fprintln(os.Stderr, "  PushUserNoticeMsgReturn OADelTimeUnreachedMsg(OADelTimeUnreachedMsgReq req)")
	fmt.Fprintln(os.Stderr, "  OAQueryUserMsgReturn OAQueryUserMsg(OAQueryUserMsgReq req)")
	fmt.Fprintln(os.Stderr, "  OAQueryUserSentMsgReturn OAQueryUserSentMsg(OAQueryUserSentMsgReq req)")
	fmt.Fprintln(os.Stderr, "  OAQueryUserSentMsgReturn OAQueryUserMsgRecord(OAQueryUserMsgRecordReq req)")
	fmt.Fprintln(os.Stderr, "  OAAnswerUserMsgReturn OAAnswerUserMsg(OAAnswerUserMsgReq req)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := msgcenter.NewMsgCenterServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "PushUserNoticeMsg":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PushUserNoticeMsg requires 1 args")
			flag.Usage()
		}
		arg80 := flag.Arg(1)
		mbTrans81 := thrift.NewTMemoryBufferLen(len(arg80))
		defer mbTrans81.Close()
		_, err82 := mbTrans81.WriteString(arg80)
		if err82 != nil {
			Usage()
			return
		}
		factory83 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt84 := factory83.GetProtocol(mbTrans81)
		argvalue0 := msgcenter.NewPushUserNoticeMsgReq()
		err85 := argvalue0.Read(jsProt84)
		if err85 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PushUserNoticeMsg(value0))
		fmt.Print("\n")
		break
	case "SyncOldMsg":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SyncOldMsg requires 1 args")
			flag.Usage()
		}
		arg86 := flag.Arg(1)
		mbTrans87 := thrift.NewTMemoryBufferLen(len(arg86))
		defer mbTrans87.Close()
		_, err88 := mbTrans87.WriteString(arg86)
		if err88 != nil {
			Usage()
			return
		}
		factory89 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt90 := factory89.GetProtocol(mbTrans87)
		argvalue0 := msgcenter.NewPushUserNoticeMsgReq()
		err91 := argvalue0.Read(jsProt90)
		if err91 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SyncOldMsg(value0))
		fmt.Print("\n")
		break
	case "RefreshMsgList":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RefreshMsgList requires 1 args")
			flag.Usage()
		}
		arg92 := flag.Arg(1)
		mbTrans93 := thrift.NewTMemoryBufferLen(len(arg92))
		defer mbTrans93.Close()
		_, err94 := mbTrans93.WriteString(arg92)
		if err94 != nil {
			Usage()
			return
		}
		factory95 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt96 := factory95.GetProtocol(mbTrans93)
		argvalue0 := msgcenter.NewRefreshMsgListReq()
		err97 := argvalue0.Read(jsProt96)
		if err97 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RefreshMsgList(value0))
		fmt.Print("\n")
		break
	case "QueryMsgCount":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryMsgCount requires 1 args")
			flag.Usage()
		}
		arg98 := flag.Arg(1)
		mbTrans99 := thrift.NewTMemoryBufferLen(len(arg98))
		defer mbTrans99.Close()
		_, err100 := mbTrans99.WriteString(arg98)
		if err100 != nil {
			Usage()
			return
		}
		factory101 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt102 := factory101.GetProtocol(mbTrans99)
		argvalue0 := msgcenter.NewQueryMsgListReq()
		err103 := argvalue0.Read(jsProt102)
		if err103 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryMsgCount(value0))
		fmt.Print("\n")
		break
	case "QueryMsgList":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryMsgList requires 1 args")
			flag.Usage()
		}
		arg104 := flag.Arg(1)
		mbTrans105 := thrift.NewTMemoryBufferLen(len(arg104))
		defer mbTrans105.Close()
		_, err106 := mbTrans105.WriteString(arg104)
		if err106 != nil {
			Usage()
			return
		}
		factory107 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt108 := factory107.GetProtocol(mbTrans105)
		argvalue0 := msgcenter.NewQueryMsgListReq()
		err109 := argvalue0.Read(jsProt108)
		if err109 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryMsgList(value0))
		fmt.Print("\n")
		break
	case "QueryUserMsg":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryUserMsg requires 1 args")
			flag.Usage()
		}
		arg110 := flag.Arg(1)
		mbTrans111 := thrift.NewTMemoryBufferLen(len(arg110))
		defer mbTrans111.Close()
		_, err112 := mbTrans111.WriteString(arg110)
		if err112 != nil {
			Usage()
			return
		}
		factory113 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt114 := factory113.GetProtocol(mbTrans111)
		argvalue0 := msgcenter.NewQueryUserMsgReq()
		err115 := argvalue0.Read(jsProt114)
		if err115 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryUserMsg(value0))
		fmt.Print("\n")
		break
	case "SendUserMsg":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SendUserMsg requires 1 args")
			flag.Usage()
		}
		arg116 := flag.Arg(1)
		mbTrans117 := thrift.NewTMemoryBufferLen(len(arg116))
		defer mbTrans117.Close()
		_, err118 := mbTrans117.WriteString(arg116)
		if err118 != nil {
			Usage()
			return
		}
		factory119 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt120 := factory119.GetProtocol(mbTrans117)
		argvalue0 := msgcenter.NewSendUserMsgReq()
		err121 := argvalue0.Read(jsProt120)
		if err121 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SendUserMsg(value0))
		fmt.Print("\n")
		break
	case "OptBlackList":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OptBlackList requires 1 args")
			flag.Usage()
		}
		arg122 := flag.Arg(1)
		mbTrans123 := thrift.NewTMemoryBufferLen(len(arg122))
		defer mbTrans123.Close()
		_, err124 := mbTrans123.WriteString(arg122)
		if err124 != nil {
			Usage()
			return
		}
		factory125 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt126 := factory125.GetProtocol(mbTrans123)
		argvalue0 := msgcenter.NewOptBlackListReq()
		err127 := argvalue0.Read(jsProt126)
		if err127 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OptBlackList(value0))
		fmt.Print("\n")
		break
	case "QueryBlackList":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryBlackList requires 1 args")
			flag.Usage()
		}
		arg128 := flag.Arg(1)
		mbTrans129 := thrift.NewTMemoryBufferLen(len(arg128))
		defer mbTrans129.Close()
		_, err130 := mbTrans129.WriteString(arg128)
		if err130 != nil {
			Usage()
			return
		}
		factory131 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt132 := factory131.GetProtocol(mbTrans129)
		argvalue0 := msgcenter.NewQueryBlackListReq()
		err133 := argvalue0.Read(jsProt132)
		if err133 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryBlackList(value0))
		fmt.Print("\n")
		break
	case "IsInMyBlackList":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IsInMyBlackList requires 1 args")
			flag.Usage()
		}
		arg134 := flag.Arg(1)
		mbTrans135 := thrift.NewTMemoryBufferLen(len(arg134))
		defer mbTrans135.Close()
		_, err136 := mbTrans135.WriteString(arg134)
		if err136 != nil {
			Usage()
			return
		}
		factory137 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt138 := factory137.GetProtocol(mbTrans135)
		argvalue0 := msgcenter.NewIsInMyBlackListReq()
		err139 := argvalue0.Read(jsProt138)
		if err139 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.IsInMyBlackList(value0))
		fmt.Print("\n")
		break
	case "IsMyFollower":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IsMyFollower requires 1 args")
			flag.Usage()
		}
		arg140 := flag.Arg(1)
		mbTrans141 := thrift.NewTMemoryBufferLen(len(arg140))
		defer mbTrans141.Close()
		_, err142 := mbTrans141.WriteString(arg140)
		if err142 != nil {
			Usage()
			return
		}
		factory143 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt144 := factory143.GetProtocol(mbTrans141)
		argvalue0 := msgcenter.NewIsFollowerReq()
		err145 := argvalue0.Read(jsProt144)
		if err145 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.IsMyFollower(value0))
		fmt.Print("\n")
		break
	case "GetAllMyFollowers":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllMyFollowers requires 1 args")
			flag.Usage()
		}
		arg146 := flag.Arg(1)
		mbTrans147 := thrift.NewTMemoryBufferLen(len(arg146))
		defer mbTrans147.Close()
		_, err148 := mbTrans147.WriteString(arg146)
		if err148 != nil {
			Usage()
			return
		}
		factory149 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt150 := factory149.GetProtocol(mbTrans147)
		argvalue0 := msgcenter.NewGetAllMyFollowersReq()
		err151 := argvalue0.Read(jsProt150)
		if err151 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetAllMyFollowers(value0))
		fmt.Print("\n")
		break
	case "ReportUser":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ReportUser requires 1 args")
			flag.Usage()
		}
		arg152 := flag.Arg(1)
		mbTrans153 := thrift.NewTMemoryBufferLen(len(arg152))
		defer mbTrans153.Close()
		_, err154 := mbTrans153.WriteString(arg152)
		if err154 != nil {
			Usage()
			return
		}
		factory155 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt156 := factory155.GetProtocol(mbTrans153)
		argvalue0 := msgcenter.NewReportUserReq()
		err157 := argvalue0.Read(jsProt156)
		if err157 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ReportUser(value0))
		fmt.Print("\n")
		break
	case "DeleteConversation":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteConversation requires 1 args")
			flag.Usage()
		}
		arg158 := flag.Arg(1)
		mbTrans159 := thrift.NewTMemoryBufferLen(len(arg158))
		defer mbTrans159.Close()
		_, err160 := mbTrans159.WriteString(arg158)
		if err160 != nil {
			Usage()
			return
		}
		factory161 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt162 := factory161.GetProtocol(mbTrans159)
		argvalue0 := msgcenter.NewDeleteConversationReq()
		err163 := argvalue0.Read(jsProt162)
		if err163 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteConversation(value0))
		fmt.Print("\n")
		break
	case "GetReportedMsg":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetReportedMsg requires 1 args")
			flag.Usage()
		}
		arg164 := flag.Arg(1)
		mbTrans165 := thrift.NewTMemoryBufferLen(len(arg164))
		defer mbTrans165.Close()
		_, err166 := mbTrans165.WriteString(arg164)
		if err166 != nil {
			Usage()
			return
		}
		factory167 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt168 := factory167.GetProtocol(mbTrans165)
		argvalue0 := msgcenter.NewGetReportedMsgReq()
		err169 := argvalue0.Read(jsProt168)
		if err169 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetReportedMsg(value0))
		fmt.Print("\n")
		break
	case "ProcessReportedMsg":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ProcessReportedMsg requires 1 args")
			flag.Usage()
		}
		arg170 := flag.Arg(1)
		mbTrans171 := thrift.NewTMemoryBufferLen(len(arg170))
		defer mbTrans171.Close()
		_, err172 := mbTrans171.WriteString(arg170)
		if err172 != nil {
			Usage()
			return
		}
		factory173 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt174 := factory173.GetProtocol(mbTrans171)
		argvalue0 := msgcenter.NewProcessReportedMsgReq()
		err175 := argvalue0.Read(jsProt174)
		if err175 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ProcessReportedMsg(value0))
		fmt.Print("\n")
		break
	case "GetReportRecord":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetReportRecord requires 1 args")
			flag.Usage()
		}
		arg176 := flag.Arg(1)
		mbTrans177 := thrift.NewTMemoryBufferLen(len(arg176))
		defer mbTrans177.Close()
		_, err178 := mbTrans177.WriteString(arg176)
		if err178 != nil {
			Usage()
			return
		}
		factory179 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt180 := factory179.GetProtocol(mbTrans177)
		argvalue0 := msgcenter.NewGetReportRecordReq()
		err181 := argvalue0.Read(jsProt180)
		if err181 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetReportRecord(value0))
		fmt.Print("\n")
		break
	case "GetWatchingRule":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetWatchingRule requires 1 args")
			flag.Usage()
		}
		arg182 := flag.Arg(1)
		mbTrans183 := thrift.NewTMemoryBufferLen(len(arg182))
		defer mbTrans183.Close()
		_, err184 := mbTrans183.WriteString(arg182)
		if err184 != nil {
			Usage()
			return
		}
		factory185 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt186 := factory185.GetProtocol(mbTrans183)
		argvalue0 := msgcenter.NewGetWatchingRuleReq()
		err187 := argvalue0.Read(jsProt186)
		if err187 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetWatchingRule(value0))
		fmt.Print("\n")
		break
	case "SetWatchingRule":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetWatchingRule requires 1 args")
			flag.Usage()
		}
		arg188 := flag.Arg(1)
		mbTrans189 := thrift.NewTMemoryBufferLen(len(arg188))
		defer mbTrans189.Close()
		_, err190 := mbTrans189.WriteString(arg188)
		if err190 != nil {
			Usage()
			return
		}
		factory191 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt192 := factory191.GetProtocol(mbTrans189)
		argvalue0 := msgcenter.NewSetWatchingRuleReq()
		err193 := argvalue0.Read(jsProt192)
		if err193 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetWatchingRule(value0))
		fmt.Print("\n")
		break
	case "GetWatchedMsg":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetWatchedMsg requires 1 args")
			flag.Usage()
		}
		arg194 := flag.Arg(1)
		mbTrans195 := thrift.NewTMemoryBufferLen(len(arg194))
		defer mbTrans195.Close()
		_, err196 := mbTrans195.WriteString(arg194)
		if err196 != nil {
			Usage()
			return
		}
		factory197 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt198 := factory197.GetProtocol(mbTrans195)
		argvalue0 := msgcenter.NewGetWatchedMsgReq()
		err199 := argvalue0.Read(jsProt198)
		if err199 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetWatchedMsg(value0))
		fmt.Print("\n")
		break
	case "GetSilencedUser":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSilencedUser requires 1 args")
			flag.Usage()
		}
		arg200 := flag.Arg(1)
		mbTrans201 := thrift.NewTMemoryBufferLen(len(arg200))
		defer mbTrans201.Close()
		_, err202 := mbTrans201.WriteString(arg200)
		if err202 != nil {
			Usage()
			return
		}
		factory203 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt204 := factory203.GetProtocol(mbTrans201)
		argvalue0 := msgcenter.NewGetSilencedUserReq()
		err205 := argvalue0.Read(jsProt204)
		if err205 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetSilencedUser(value0))
		fmt.Print("\n")
		break
	case "OutSilencedUser":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OutSilencedUser requires 1 args")
			flag.Usage()
		}
		arg206 := flag.Arg(1)
		mbTrans207 := thrift.NewTMemoryBufferLen(len(arg206))
		defer mbTrans207.Close()
		_, err208 := mbTrans207.WriteString(arg206)
		if err208 != nil {
			Usage()
			return
		}
		factory209 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt210 := factory209.GetProtocol(mbTrans207)
		argvalue0 := msgcenter.NewOutSilencedUserReq()
		err211 := argvalue0.Read(jsProt210)
		if err211 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OutSilencedUser(value0))
		fmt.Print("\n")
		break
	case "GetSilenceRecord":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSilenceRecord requires 1 args")
			flag.Usage()
		}
		arg212 := flag.Arg(1)
		mbTrans213 := thrift.NewTMemoryBufferLen(len(arg212))
		defer mbTrans213.Close()
		_, err214 := mbTrans213.WriteString(arg212)
		if err214 != nil {
			Usage()
			return
		}
		factory215 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt216 := factory215.GetProtocol(mbTrans213)
		argvalue0 := msgcenter.NewGetSilenceRecordReq()
		err217 := argvalue0.Read(jsProt216)
		if err217 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetSilenceRecord(value0))
		fmt.Print("\n")
		break
	case "OAPushUserNoticeMsg":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OAPushUserNoticeMsg requires 1 args")
			flag.Usage()
		}
		arg218 := flag.Arg(1)
		mbTrans219 := thrift.NewTMemoryBufferLen(len(arg218))
		defer mbTrans219.Close()
		_, err220 := mbTrans219.WriteString(arg218)
		if err220 != nil {
			Usage()
			return
		}
		factory221 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt222 := factory221.GetProtocol(mbTrans219)
		argvalue0 := msgcenter.NewOAPushUserNoticeMsgReq()
		err223 := argvalue0.Read(jsProt222)
		if err223 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OAPushUserNoticeMsg(value0))
		fmt.Print("\n")
		break
	case "OADelTimeUnreachedMsg":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OADelTimeUnreachedMsg requires 1 args")
			flag.Usage()
		}
		arg224 := flag.Arg(1)
		mbTrans225 := thrift.NewTMemoryBufferLen(len(arg224))
		defer mbTrans225.Close()
		_, err226 := mbTrans225.WriteString(arg224)
		if err226 != nil {
			Usage()
			return
		}
		factory227 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt228 := factory227.GetProtocol(mbTrans225)
		argvalue0 := msgcenter.NewOADelTimeUnreachedMsgReq()
		err229 := argvalue0.Read(jsProt228)
		if err229 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OADelTimeUnreachedMsg(value0))
		fmt.Print("\n")
		break
	case "OAQueryUserMsg":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OAQueryUserMsg requires 1 args")
			flag.Usage()
		}
		arg230 := flag.Arg(1)
		mbTrans231 := thrift.NewTMemoryBufferLen(len(arg230))
		defer mbTrans231.Close()
		_, err232 := mbTrans231.WriteString(arg230)
		if err232 != nil {
			Usage()
			return
		}
		factory233 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt234 := factory233.GetProtocol(mbTrans231)
		argvalue0 := msgcenter.NewOAQueryUserMsgReq()
		err235 := argvalue0.Read(jsProt234)
		if err235 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OAQueryUserMsg(value0))
		fmt.Print("\n")
		break
	case "OAQueryUserSentMsg":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OAQueryUserSentMsg requires 1 args")
			flag.Usage()
		}
		arg236 := flag.Arg(1)
		mbTrans237 := thrift.NewTMemoryBufferLen(len(arg236))
		defer mbTrans237.Close()
		_, err238 := mbTrans237.WriteString(arg236)
		if err238 != nil {
			Usage()
			return
		}
		factory239 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt240 := factory239.GetProtocol(mbTrans237)
		argvalue0 := msgcenter.NewOAQueryUserSentMsgReq()
		err241 := argvalue0.Read(jsProt240)
		if err241 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OAQueryUserSentMsg(value0))
		fmt.Print("\n")
		break
	case "OAQueryUserMsgRecord":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OAQueryUserMsgRecord requires 1 args")
			flag.Usage()
		}
		arg242 := flag.Arg(1)
		mbTrans243 := thrift.NewTMemoryBufferLen(len(arg242))
		defer mbTrans243.Close()
		_, err244 := mbTrans243.WriteString(arg242)
		if err244 != nil {
			Usage()
			return
		}
		factory245 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt246 := factory245.GetProtocol(mbTrans243)
		argvalue0 := msgcenter.NewOAQueryUserMsgRecordReq()
		err247 := argvalue0.Read(jsProt246)
		if err247 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OAQueryUserMsgRecord(value0))
		fmt.Print("\n")
		break
	case "OAAnswerUserMsg":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OAAnswerUserMsg requires 1 args")
			flag.Usage()
		}
		arg248 := flag.Arg(1)
		mbTrans249 := thrift.NewTMemoryBufferLen(len(arg248))
		defer mbTrans249.Close()
		_, err250 := mbTrans249.WriteString(arg248)
		if err250 != nil {
			Usage()
			return
		}
		factory251 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt252 := factory251.GetProtocol(mbTrans249)
		argvalue0 := msgcenter.NewOAAnswerUserMsgReq()
		err253 := argvalue0.Read(jsProt252)
		if err253 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OAAnswerUserMsg(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
