// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"authentication_def"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  FormaxLoginResult Login(FormaxLoginInfo login_info)")
	fmt.Fprintln(os.Stderr, "  Errno Logout(SessionInfo session_info)")
	fmt.Fprintln(os.Stderr, "  Errno ValidateSession(SessionInfo session_info)")
	fmt.Fprintln(os.Stderr, "  UserBasicInfo QueryUserBasicInfoByUID(i64 uid)")
	fmt.Fprintln(os.Stderr, "   BatchQueryUserBasicInfo( uids)")
	fmt.Fprintln(os.Stderr, "  RegistrationAffliatedInfo QueryUserRegAffliatedInfoByUID(i64 uid)")
	fmt.Fprintln(os.Stderr, "  Errno MT4Authentication(MT4LoginInfo login_info)")
	fmt.Fprintln(os.Stderr, "  Errno MT4BindAccount(MT4BindInfo bind_info)")
	fmt.Fprintln(os.Stderr, "  MT4Info MT4QueryBindInfo(i64 uid)")
	fmt.Fprintln(os.Stderr, "  Errno ForbagAuthentication(ForbagLoginInfo login_info)")
	fmt.Fprintln(os.Stderr, "  Errno ForbagBindAccount(ForbagBindInfo bind_info)")
	fmt.Fprintln(os.Stderr, "   ForbagQueryBrokerInfoByUID(i64 uid)")
	fmt.Fprintln(os.Stderr, "  Errno QuickFixAuthentication(QuickFixLoginInfo login_info)")
	fmt.Fprintln(os.Stderr, "  Errno QuickFixBindAccount(QuickFixBindInfo bind_info)")
	fmt.Fprintln(os.Stderr, "  Errno P2PAuthenticationBy(P2PLoginInfo login_info)")
	fmt.Fprintln(os.Stderr, "  Errno P2PBindAccount(P2PBindInfo bind_info)")
	fmt.Fprintln(os.Stderr, "  P2PInfo P2PQueryBindInfo(i64 uid)")
	fmt.Fprintln(os.Stderr, "  Errno UpdateUserBasicInfo(UserBasicInfo userinfo)")
	fmt.Fprintln(os.Stderr, "  Errno ResetUserPasswordByUID(i64 uid, string oldpasswd, string newpasswd)")
	fmt.Fprintln(os.Stderr, "  Errno Ping()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := authentication_def.NewAuthenticationBaseServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "Login":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Login requires 1 args")
			flag.Usage()
		}
		arg47 := flag.Arg(1)
		mbTrans48 := thrift.NewTMemoryBufferLen(len(arg47))
		defer mbTrans48.Close()
		_, err49 := mbTrans48.WriteString(arg47)
		if err49 != nil {
			Usage()
			return
		}
		factory50 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt51 := factory50.GetProtocol(mbTrans48)
		argvalue0 := authentication_def.NewFormaxLoginInfo()
		err52 := argvalue0.Read(jsProt51)
		if err52 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Login(value0))
		fmt.Print("\n")
		break
	case "Logout":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Logout requires 1 args")
			flag.Usage()
		}
		arg53 := flag.Arg(1)
		mbTrans54 := thrift.NewTMemoryBufferLen(len(arg53))
		defer mbTrans54.Close()
		_, err55 := mbTrans54.WriteString(arg53)
		if err55 != nil {
			Usage()
			return
		}
		factory56 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt57 := factory56.GetProtocol(mbTrans54)
		argvalue0 := authentication_def.NewSessionInfo()
		err58 := argvalue0.Read(jsProt57)
		if err58 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Logout(value0))
		fmt.Print("\n")
		break
	case "ValidateSession":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ValidateSession requires 1 args")
			flag.Usage()
		}
		arg59 := flag.Arg(1)
		mbTrans60 := thrift.NewTMemoryBufferLen(len(arg59))
		defer mbTrans60.Close()
		_, err61 := mbTrans60.WriteString(arg59)
		if err61 != nil {
			Usage()
			return
		}
		factory62 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt63 := factory62.GetProtocol(mbTrans60)
		argvalue0 := authentication_def.NewSessionInfo()
		err64 := argvalue0.Read(jsProt63)
		if err64 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ValidateSession(value0))
		fmt.Print("\n")
		break
	case "QueryUserBasicInfoByUID":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryUserBasicInfoByUID requires 1 args")
			flag.Usage()
		}
		argvalue0, err65 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err65 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryUserBasicInfoByUID(value0))
		fmt.Print("\n")
		break
	case "BatchQueryUserBasicInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "BatchQueryUserBasicInfo requires 1 args")
			flag.Usage()
		}
		arg66 := flag.Arg(1)
		mbTrans67 := thrift.NewTMemoryBufferLen(len(arg66))
		defer mbTrans67.Close()
		_, err68 := mbTrans67.WriteString(arg66)
		if err68 != nil {
			Usage()
			return
		}
		factory69 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt70 := factory69.GetProtocol(mbTrans67)
		containerStruct0 := authentication_def.NewBatchQueryUserBasicInfoArgs()
		err71 := containerStruct0.ReadField1(jsProt70)
		if err71 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Uids
		value0 := argvalue0
		fmt.Print(client.BatchQueryUserBasicInfo(value0))
		fmt.Print("\n")
		break
	case "QueryUserRegAffliatedInfoByUID":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryUserRegAffliatedInfoByUID requires 1 args")
			flag.Usage()
		}
		argvalue0, err72 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err72 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryUserRegAffliatedInfoByUID(value0))
		fmt.Print("\n")
		break
	case "MT4Authentication":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MT4Authentication requires 1 args")
			flag.Usage()
		}
		arg73 := flag.Arg(1)
		mbTrans74 := thrift.NewTMemoryBufferLen(len(arg73))
		defer mbTrans74.Close()
		_, err75 := mbTrans74.WriteString(arg73)
		if err75 != nil {
			Usage()
			return
		}
		factory76 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt77 := factory76.GetProtocol(mbTrans74)
		argvalue0 := authentication_def.NewMT4LoginInfo()
		err78 := argvalue0.Read(jsProt77)
		if err78 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.MT4Authentication(value0))
		fmt.Print("\n")
		break
	case "MT4BindAccount":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MT4BindAccount requires 1 args")
			flag.Usage()
		}
		arg79 := flag.Arg(1)
		mbTrans80 := thrift.NewTMemoryBufferLen(len(arg79))
		defer mbTrans80.Close()
		_, err81 := mbTrans80.WriteString(arg79)
		if err81 != nil {
			Usage()
			return
		}
		factory82 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt83 := factory82.GetProtocol(mbTrans80)
		argvalue0 := authentication_def.NewMT4BindInfo()
		err84 := argvalue0.Read(jsProt83)
		if err84 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.MT4BindAccount(value0))
		fmt.Print("\n")
		break
	case "MT4QueryBindInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MT4QueryBindInfo requires 1 args")
			flag.Usage()
		}
		argvalue0, err85 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err85 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.MT4QueryBindInfo(value0))
		fmt.Print("\n")
		break
	case "ForbagAuthentication":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ForbagAuthentication requires 1 args")
			flag.Usage()
		}
		arg86 := flag.Arg(1)
		mbTrans87 := thrift.NewTMemoryBufferLen(len(arg86))
		defer mbTrans87.Close()
		_, err88 := mbTrans87.WriteString(arg86)
		if err88 != nil {
			Usage()
			return
		}
		factory89 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt90 := factory89.GetProtocol(mbTrans87)
		argvalue0 := authentication_def.NewForbagLoginInfo()
		err91 := argvalue0.Read(jsProt90)
		if err91 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ForbagAuthentication(value0))
		fmt.Print("\n")
		break
	case "ForbagBindAccount":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ForbagBindAccount requires 1 args")
			flag.Usage()
		}
		arg92 := flag.Arg(1)
		mbTrans93 := thrift.NewTMemoryBufferLen(len(arg92))
		defer mbTrans93.Close()
		_, err94 := mbTrans93.WriteString(arg92)
		if err94 != nil {
			Usage()
			return
		}
		factory95 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt96 := factory95.GetProtocol(mbTrans93)
		argvalue0 := authentication_def.NewForbagBindInfo()
		err97 := argvalue0.Read(jsProt96)
		if err97 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ForbagBindAccount(value0))
		fmt.Print("\n")
		break
	case "ForbagQueryBrokerInfoByUID":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ForbagQueryBrokerInfoByUID requires 1 args")
			flag.Usage()
		}
		argvalue0, err98 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err98 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ForbagQueryBrokerInfoByUID(value0))
		fmt.Print("\n")
		break
	case "QuickFixAuthentication":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QuickFixAuthentication requires 1 args")
			flag.Usage()
		}
		arg99 := flag.Arg(1)
		mbTrans100 := thrift.NewTMemoryBufferLen(len(arg99))
		defer mbTrans100.Close()
		_, err101 := mbTrans100.WriteString(arg99)
		if err101 != nil {
			Usage()
			return
		}
		factory102 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt103 := factory102.GetProtocol(mbTrans100)
		argvalue0 := authentication_def.NewQuickFixLoginInfo()
		err104 := argvalue0.Read(jsProt103)
		if err104 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QuickFixAuthentication(value0))
		fmt.Print("\n")
		break
	case "QuickFixBindAccount":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QuickFixBindAccount requires 1 args")
			flag.Usage()
		}
		arg105 := flag.Arg(1)
		mbTrans106 := thrift.NewTMemoryBufferLen(len(arg105))
		defer mbTrans106.Close()
		_, err107 := mbTrans106.WriteString(arg105)
		if err107 != nil {
			Usage()
			return
		}
		factory108 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt109 := factory108.GetProtocol(mbTrans106)
		argvalue0 := authentication_def.NewQuickFixBindInfo()
		err110 := argvalue0.Read(jsProt109)
		if err110 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QuickFixBindAccount(value0))
		fmt.Print("\n")
		break
	case "P2PAuthenticationBy":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "P2PAuthenticationBy requires 1 args")
			flag.Usage()
		}
		arg111 := flag.Arg(1)
		mbTrans112 := thrift.NewTMemoryBufferLen(len(arg111))
		defer mbTrans112.Close()
		_, err113 := mbTrans112.WriteString(arg111)
		if err113 != nil {
			Usage()
			return
		}
		factory114 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt115 := factory114.GetProtocol(mbTrans112)
		argvalue0 := authentication_def.NewP2PLoginInfo()
		err116 := argvalue0.Read(jsProt115)
		if err116 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.P2PAuthenticationBy(value0))
		fmt.Print("\n")
		break
	case "P2PBindAccount":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "P2PBindAccount requires 1 args")
			flag.Usage()
		}
		arg117 := flag.Arg(1)
		mbTrans118 := thrift.NewTMemoryBufferLen(len(arg117))
		defer mbTrans118.Close()
		_, err119 := mbTrans118.WriteString(arg117)
		if err119 != nil {
			Usage()
			return
		}
		factory120 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt121 := factory120.GetProtocol(mbTrans118)
		argvalue0 := authentication_def.NewP2PBindInfo()
		err122 := argvalue0.Read(jsProt121)
		if err122 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.P2PBindAccount(value0))
		fmt.Print("\n")
		break
	case "P2PQueryBindInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "P2PQueryBindInfo requires 1 args")
			flag.Usage()
		}
		argvalue0, err123 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err123 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.P2PQueryBindInfo(value0))
		fmt.Print("\n")
		break
	case "UpdateUserBasicInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateUserBasicInfo requires 1 args")
			flag.Usage()
		}
		arg124 := flag.Arg(1)
		mbTrans125 := thrift.NewTMemoryBufferLen(len(arg124))
		defer mbTrans125.Close()
		_, err126 := mbTrans125.WriteString(arg124)
		if err126 != nil {
			Usage()
			return
		}
		factory127 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt128 := factory127.GetProtocol(mbTrans125)
		argvalue0 := authentication_def.NewUserBasicInfo()
		err129 := argvalue0.Read(jsProt128)
		if err129 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateUserBasicInfo(value0))
		fmt.Print("\n")
		break
	case "ResetUserPasswordByUID":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ResetUserPasswordByUID requires 3 args")
			flag.Usage()
		}
		argvalue0, err130 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err130 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.ResetUserPasswordByUID(value0, value1, value2))
		fmt.Print("\n")
		break
	case "Ping":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Ping requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Ping())
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
