// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package authentication_def

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Errno int64

const (
	Errno_SUCCESS                       Errno = 0
	Errno_EMAIL_ALREADY_EXISTED         Errno = 1
	Errno_PHONE_NUM_EXISTED             Errno = 2
	Errno_PHONE_EMAIL_EXISTED           Errno = 3
	Errno_NICK_NAME_EXISTED             Errno = 4
	Errno_NICK_EMAIL_EXISTED            Errno = 5
	Errno_PHONE_NICK_EXISTED            Errno = 6
	Errno_EMAIL_NICK_PHONE_EXISTED      Errno = 7
	Errno_AUTHEN_SERVER_NOT_READY       Errno = 8
	Errno_CANNOT_GENERATE_UID           Errno = 9
	Errno_UPDATE_DATA_BASE_FAILED       Errno = 10
	Errno_THRIFT_RPC_EXCEPTION          Errno = 11
	Errno_INVALID_LOGIN_INFO            Errno = 12
	Errno_INVALID_SESSION               Errno = 13
	Errno_INALID_AUTHEN_SERVER_PORT     Errno = 14
	Errno_NOT_REGISTERED_EMAIL          Errno = 15
	Errno_WRONG_PASSWD                  Errno = 16
	Errno_LOGIN_FAILED                  Errno = 17
	Errno_REGISTRATION_FAILED           Errno = 18
	Errno_INVALID_BONUS_URLKEY          Errno = 19
	Errno_BONUS_URLKEY_EXPIRED          Errno = 20
	Errno_PHONE_NUM_IS_EMPTY            Errno = 21
	Errno_PHONE_NUM_IS_NOT_REGISTRATED  Errno = 22
	Errno_CANNOT_MODIFY_PHONE_NUM       Errno = 23
	Errno_CANNOT_MODIFY_EMAIL           Errno = 24
	Errno_INVALID_USER_IDENTIFIER       Errno = 25
	Errno_INVALID_PHONE_NUM_FORMAT      Errno = 26
	Errno_NOT_EXISTED_NICKNAME          Errno = 27
	Errno_AUTHEN_SERVER_TAG_EXISTED     Errno = 28
	Errno_INVLIAD_EMAIL_FORMAT          Errno = 29
	Errno_EMAIL_IS_EMPTY                Errno = 30
	Errno_USER_REGISTERING              Errno = 31
	Errno_CAN_NOT_CONNECT_TO_MT4_SERVER Errno = 10000
	Errno_NO_MT4ID_INFO                 Errno = 10001
	Errno_NO_BIND_LIVE_MT4ID            Errno = 10002
	Errno_BIND_FAILED                   Errno = 10003
	Errno_FORBAG_BROKER_USERID_EXISTED  Errno = 20000
	Errno_FORBAG_NO_BROKER_USER_INFO    Errno = 20001
	Errno_FORBAG_INVALID_BIND_INFO      Errno = 20002
	Errno_P2P_USERID_ALREADY_EXISTED    Errno = 30000
	Errno_P2P_IDNUMBER_ALREADY_EXISTED  Errno = 30001
	Errno_P2P_FORMAX_UID_ALREADY_BINDED Errno = 30002
	Errno_P2P_INVALID_BIND_INFO         Errno = 30003
	Errno_DATABASE_ERROR                Errno = 50000
	Errno_SMS_CANNOT_REACH_SERVER       Errno = 60000
	Errno_INVALID_SMS_VERIFICATION_CODE Errno = 60001
	Errno_SMS_INVALID_MESSAGE_TYPE      Errno = 60002
	Errno_SMS_AUTHEN_FAILED             Errno = 60003
	Errno_SMS_SEND_FAILED               Errno = 60004
	Errno_SMS_INVALID_PHONE_NUM         Errno = 60005
	Errno_AUTHEN_SERVER_TIMEOUT         Errno = 100000
	Errno_UNKNOWN                       Errno = 9999999
)

func (p Errno) String() string {
	switch p {
	case Errno_SUCCESS:
		return "Errno_SUCCESS"
	case Errno_EMAIL_ALREADY_EXISTED:
		return "Errno_EMAIL_ALREADY_EXISTED"
	case Errno_PHONE_NUM_EXISTED:
		return "Errno_PHONE_NUM_EXISTED"
	case Errno_PHONE_EMAIL_EXISTED:
		return "Errno_PHONE_EMAIL_EXISTED"
	case Errno_NICK_NAME_EXISTED:
		return "Errno_NICK_NAME_EXISTED"
	case Errno_NICK_EMAIL_EXISTED:
		return "Errno_NICK_EMAIL_EXISTED"
	case Errno_PHONE_NICK_EXISTED:
		return "Errno_PHONE_NICK_EXISTED"
	case Errno_EMAIL_NICK_PHONE_EXISTED:
		return "Errno_EMAIL_NICK_PHONE_EXISTED"
	case Errno_AUTHEN_SERVER_NOT_READY:
		return "Errno_AUTHEN_SERVER_NOT_READY"
	case Errno_CANNOT_GENERATE_UID:
		return "Errno_CANNOT_GENERATE_UID"
	case Errno_UPDATE_DATA_BASE_FAILED:
		return "Errno_UPDATE_DATA_BASE_FAILED"
	case Errno_THRIFT_RPC_EXCEPTION:
		return "Errno_THRIFT_RPC_EXCEPTION"
	case Errno_INVALID_LOGIN_INFO:
		return "Errno_INVALID_LOGIN_INFO"
	case Errno_INVALID_SESSION:
		return "Errno_INVALID_SESSION"
	case Errno_INALID_AUTHEN_SERVER_PORT:
		return "Errno_INALID_AUTHEN_SERVER_PORT"
	case Errno_NOT_REGISTERED_EMAIL:
		return "Errno_NOT_REGISTERED_EMAIL"
	case Errno_WRONG_PASSWD:
		return "Errno_WRONG_PASSWD"
	case Errno_LOGIN_FAILED:
		return "Errno_LOGIN_FAILED"
	case Errno_REGISTRATION_FAILED:
		return "Errno_REGISTRATION_FAILED"
	case Errno_INVALID_BONUS_URLKEY:
		return "Errno_INVALID_BONUS_URLKEY"
	case Errno_BONUS_URLKEY_EXPIRED:
		return "Errno_BONUS_URLKEY_EXPIRED"
	case Errno_PHONE_NUM_IS_EMPTY:
		return "Errno_PHONE_NUM_IS_EMPTY"
	case Errno_PHONE_NUM_IS_NOT_REGISTRATED:
		return "Errno_PHONE_NUM_IS_NOT_REGISTRATED"
	case Errno_CANNOT_MODIFY_PHONE_NUM:
		return "Errno_CANNOT_MODIFY_PHONE_NUM"
	case Errno_CANNOT_MODIFY_EMAIL:
		return "Errno_CANNOT_MODIFY_EMAIL"
	case Errno_INVALID_USER_IDENTIFIER:
		return "Errno_INVALID_USER_IDENTIFIER"
	case Errno_INVALID_PHONE_NUM_FORMAT:
		return "Errno_INVALID_PHONE_NUM_FORMAT"
	case Errno_NOT_EXISTED_NICKNAME:
		return "Errno_NOT_EXISTED_NICKNAME"
	case Errno_AUTHEN_SERVER_TAG_EXISTED:
		return "Errno_AUTHEN_SERVER_TAG_EXISTED"
	case Errno_INVLIAD_EMAIL_FORMAT:
		return "Errno_INVLIAD_EMAIL_FORMAT"
	case Errno_EMAIL_IS_EMPTY:
		return "Errno_EMAIL_IS_EMPTY"
	case Errno_USER_REGISTERING:
		return "Errno_USER_REGISTERING"
	case Errno_CAN_NOT_CONNECT_TO_MT4_SERVER:
		return "Errno_CAN_NOT_CONNECT_TO_MT4_SERVER"
	case Errno_NO_MT4ID_INFO:
		return "Errno_NO_MT4ID_INFO"
	case Errno_NO_BIND_LIVE_MT4ID:
		return "Errno_NO_BIND_LIVE_MT4ID"
	case Errno_BIND_FAILED:
		return "Errno_BIND_FAILED"
	case Errno_FORBAG_BROKER_USERID_EXISTED:
		return "Errno_FORBAG_BROKER_USERID_EXISTED"
	case Errno_FORBAG_NO_BROKER_USER_INFO:
		return "Errno_FORBAG_NO_BROKER_USER_INFO"
	case Errno_FORBAG_INVALID_BIND_INFO:
		return "Errno_FORBAG_INVALID_BIND_INFO"
	case Errno_P2P_USERID_ALREADY_EXISTED:
		return "Errno_P2P_USERID_ALREADY_EXISTED"
	case Errno_P2P_IDNUMBER_ALREADY_EXISTED:
		return "Errno_P2P_IDNUMBER_ALREADY_EXISTED"
	case Errno_P2P_FORMAX_UID_ALREADY_BINDED:
		return "Errno_P2P_FORMAX_UID_ALREADY_BINDED"
	case Errno_P2P_INVALID_BIND_INFO:
		return "Errno_P2P_INVALID_BIND_INFO"
	case Errno_DATABASE_ERROR:
		return "Errno_DATABASE_ERROR"
	case Errno_SMS_CANNOT_REACH_SERVER:
		return "Errno_SMS_CANNOT_REACH_SERVER"
	case Errno_INVALID_SMS_VERIFICATION_CODE:
		return "Errno_INVALID_SMS_VERIFICATION_CODE"
	case Errno_SMS_INVALID_MESSAGE_TYPE:
		return "Errno_SMS_INVALID_MESSAGE_TYPE"
	case Errno_SMS_AUTHEN_FAILED:
		return "Errno_SMS_AUTHEN_FAILED"
	case Errno_SMS_SEND_FAILED:
		return "Errno_SMS_SEND_FAILED"
	case Errno_SMS_INVALID_PHONE_NUM:
		return "Errno_SMS_INVALID_PHONE_NUM"
	case Errno_AUTHEN_SERVER_TIMEOUT:
		return "Errno_AUTHEN_SERVER_TIMEOUT"
	case Errno_UNKNOWN:
		return "Errno_UNKNOWN"
	}
	return "<UNSET>"
}

func ErrnoFromString(s string) (Errno, error) {
	switch s {
	case "Errno_SUCCESS":
		return Errno_SUCCESS, nil
	case "Errno_EMAIL_ALREADY_EXISTED":
		return Errno_EMAIL_ALREADY_EXISTED, nil
	case "Errno_PHONE_NUM_EXISTED":
		return Errno_PHONE_NUM_EXISTED, nil
	case "Errno_PHONE_EMAIL_EXISTED":
		return Errno_PHONE_EMAIL_EXISTED, nil
	case "Errno_NICK_NAME_EXISTED":
		return Errno_NICK_NAME_EXISTED, nil
	case "Errno_NICK_EMAIL_EXISTED":
		return Errno_NICK_EMAIL_EXISTED, nil
	case "Errno_PHONE_NICK_EXISTED":
		return Errno_PHONE_NICK_EXISTED, nil
	case "Errno_EMAIL_NICK_PHONE_EXISTED":
		return Errno_EMAIL_NICK_PHONE_EXISTED, nil
	case "Errno_AUTHEN_SERVER_NOT_READY":
		return Errno_AUTHEN_SERVER_NOT_READY, nil
	case "Errno_CANNOT_GENERATE_UID":
		return Errno_CANNOT_GENERATE_UID, nil
	case "Errno_UPDATE_DATA_BASE_FAILED":
		return Errno_UPDATE_DATA_BASE_FAILED, nil
	case "Errno_THRIFT_RPC_EXCEPTION":
		return Errno_THRIFT_RPC_EXCEPTION, nil
	case "Errno_INVALID_LOGIN_INFO":
		return Errno_INVALID_LOGIN_INFO, nil
	case "Errno_INVALID_SESSION":
		return Errno_INVALID_SESSION, nil
	case "Errno_INALID_AUTHEN_SERVER_PORT":
		return Errno_INALID_AUTHEN_SERVER_PORT, nil
	case "Errno_NOT_REGISTERED_EMAIL":
		return Errno_NOT_REGISTERED_EMAIL, nil
	case "Errno_WRONG_PASSWD":
		return Errno_WRONG_PASSWD, nil
	case "Errno_LOGIN_FAILED":
		return Errno_LOGIN_FAILED, nil
	case "Errno_REGISTRATION_FAILED":
		return Errno_REGISTRATION_FAILED, nil
	case "Errno_INVALID_BONUS_URLKEY":
		return Errno_INVALID_BONUS_URLKEY, nil
	case "Errno_BONUS_URLKEY_EXPIRED":
		return Errno_BONUS_URLKEY_EXPIRED, nil
	case "Errno_PHONE_NUM_IS_EMPTY":
		return Errno_PHONE_NUM_IS_EMPTY, nil
	case "Errno_PHONE_NUM_IS_NOT_REGISTRATED":
		return Errno_PHONE_NUM_IS_NOT_REGISTRATED, nil
	case "Errno_CANNOT_MODIFY_PHONE_NUM":
		return Errno_CANNOT_MODIFY_PHONE_NUM, nil
	case "Errno_CANNOT_MODIFY_EMAIL":
		return Errno_CANNOT_MODIFY_EMAIL, nil
	case "Errno_INVALID_USER_IDENTIFIER":
		return Errno_INVALID_USER_IDENTIFIER, nil
	case "Errno_INVALID_PHONE_NUM_FORMAT":
		return Errno_INVALID_PHONE_NUM_FORMAT, nil
	case "Errno_NOT_EXISTED_NICKNAME":
		return Errno_NOT_EXISTED_NICKNAME, nil
	case "Errno_AUTHEN_SERVER_TAG_EXISTED":
		return Errno_AUTHEN_SERVER_TAG_EXISTED, nil
	case "Errno_INVLIAD_EMAIL_FORMAT":
		return Errno_INVLIAD_EMAIL_FORMAT, nil
	case "Errno_EMAIL_IS_EMPTY":
		return Errno_EMAIL_IS_EMPTY, nil
	case "Errno_USER_REGISTERING":
		return Errno_USER_REGISTERING, nil
	case "Errno_CAN_NOT_CONNECT_TO_MT4_SERVER":
		return Errno_CAN_NOT_CONNECT_TO_MT4_SERVER, nil
	case "Errno_NO_MT4ID_INFO":
		return Errno_NO_MT4ID_INFO, nil
	case "Errno_NO_BIND_LIVE_MT4ID":
		return Errno_NO_BIND_LIVE_MT4ID, nil
	case "Errno_BIND_FAILED":
		return Errno_BIND_FAILED, nil
	case "Errno_FORBAG_BROKER_USERID_EXISTED":
		return Errno_FORBAG_BROKER_USERID_EXISTED, nil
	case "Errno_FORBAG_NO_BROKER_USER_INFO":
		return Errno_FORBAG_NO_BROKER_USER_INFO, nil
	case "Errno_FORBAG_INVALID_BIND_INFO":
		return Errno_FORBAG_INVALID_BIND_INFO, nil
	case "Errno_P2P_USERID_ALREADY_EXISTED":
		return Errno_P2P_USERID_ALREADY_EXISTED, nil
	case "Errno_P2P_IDNUMBER_ALREADY_EXISTED":
		return Errno_P2P_IDNUMBER_ALREADY_EXISTED, nil
	case "Errno_P2P_FORMAX_UID_ALREADY_BINDED":
		return Errno_P2P_FORMAX_UID_ALREADY_BINDED, nil
	case "Errno_P2P_INVALID_BIND_INFO":
		return Errno_P2P_INVALID_BIND_INFO, nil
	case "Errno_DATABASE_ERROR":
		return Errno_DATABASE_ERROR, nil
	case "Errno_SMS_CANNOT_REACH_SERVER":
		return Errno_SMS_CANNOT_REACH_SERVER, nil
	case "Errno_INVALID_SMS_VERIFICATION_CODE":
		return Errno_INVALID_SMS_VERIFICATION_CODE, nil
	case "Errno_SMS_INVALID_MESSAGE_TYPE":
		return Errno_SMS_INVALID_MESSAGE_TYPE, nil
	case "Errno_SMS_AUTHEN_FAILED":
		return Errno_SMS_AUTHEN_FAILED, nil
	case "Errno_SMS_SEND_FAILED":
		return Errno_SMS_SEND_FAILED, nil
	case "Errno_SMS_INVALID_PHONE_NUM":
		return Errno_SMS_INVALID_PHONE_NUM, nil
	case "Errno_AUTHEN_SERVER_TIMEOUT":
		return Errno_AUTHEN_SERVER_TIMEOUT, nil
	case "Errno_UNKNOWN":
		return Errno_UNKNOWN, nil
	}
	return Errno(0), fmt.Errorf("not a valid Errno string")
}

func ErrnoPtr(v Errno) *Errno { return &v }

type SessionInfo struct {
	MSessionId string `thrift:"m_session_id,1,required" json:"m_session_id"`
	MUid       int64  `thrift:"m_uid,2,required" json:"m_uid"`
}

func NewSessionInfo() *SessionInfo {
	return &SessionInfo{
		MUid: -1,
	}
}

func (p *SessionInfo) GetMSessionId() string {
	return p.MSessionId
}

func (p *SessionInfo) GetMUid() int64 {
	return p.MUid
}
func (p *SessionInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SessionInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MSessionId = v
	}
	return nil
}

func (p *SessionInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MUid = v
	}
	return nil
}

func (p *SessionInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SessionInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SessionInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_session_id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m_session_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MSessionId)); err != nil {
		return fmt.Errorf("%T.m_session_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m_session_id: %s", p, err)
	}
	return err
}

func (p *SessionInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:m_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MUid)); err != nil {
		return fmt.Errorf("%T.m_uid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:m_uid: %s", p, err)
	}
	return err
}

func (p *SessionInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SessionInfo(%+v)", *p)
}

type UserBasicInfo struct {
	MUid       int64   `thrift:"m_uid,1,required" json:"m_uid"`
	MEmailAddr string  `thrift:"m_email_addr,2,required" json:"m_email_addr"`
	MPhoneNum  string  `thrift:"m_phone_num,3,required" json:"m_phone_num"`
	MNickname  string  `thrift:"m_nickname,4,required" json:"m_nickname"`
	MRealname  string  `thrift:"m_realname,5" json:"m_realname"`
	MLocation  string  `thrift:"m_location,6" json:"m_location"`
	MLogo      string  `thrift:"m_logo,7" json:"m_logo"`
	MGender    int8    `thrift:"m_gender,8" json:"m_gender"`
	MIntro     *string `thrift:"m_intro,9" json:"m_intro"`
}

func NewUserBasicInfo() *UserBasicInfo {
	return &UserBasicInfo{
		MUid: -1,

		MGender: -1,
	}
}

func (p *UserBasicInfo) GetMUid() int64 {
	return p.MUid
}

func (p *UserBasicInfo) GetMEmailAddr() string {
	return p.MEmailAddr
}

func (p *UserBasicInfo) GetMPhoneNum() string {
	return p.MPhoneNum
}

func (p *UserBasicInfo) GetMNickname() string {
	return p.MNickname
}

var UserBasicInfo_MRealname_DEFAULT string = ""

func (p *UserBasicInfo) GetMRealname() string {
	return p.MRealname
}

var UserBasicInfo_MLocation_DEFAULT string = ""

func (p *UserBasicInfo) GetMLocation() string {
	return p.MLocation
}

var UserBasicInfo_MLogo_DEFAULT string = ""

func (p *UserBasicInfo) GetMLogo() string {
	return p.MLogo
}

var UserBasicInfo_MGender_DEFAULT int8 = -1

func (p *UserBasicInfo) GetMGender() int8 {
	return p.MGender
}

var UserBasicInfo_MIntro_DEFAULT string

func (p *UserBasicInfo) GetMIntro() string {
	if !p.IsSetMIntro() {
		return UserBasicInfo_MIntro_DEFAULT
	}
	return *p.MIntro
}
func (p *UserBasicInfo) IsSetMRealname() bool {
	return p.MRealname != UserBasicInfo_MRealname_DEFAULT
}

func (p *UserBasicInfo) IsSetMLocation() bool {
	return p.MLocation != UserBasicInfo_MLocation_DEFAULT
}

func (p *UserBasicInfo) IsSetMLogo() bool {
	return p.MLogo != UserBasicInfo_MLogo_DEFAULT
}

func (p *UserBasicInfo) IsSetMGender() bool {
	return p.MGender != UserBasicInfo_MGender_DEFAULT
}

func (p *UserBasicInfo) IsSetMIntro() bool {
	return p.MIntro != nil
}

func (p *UserBasicInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UserBasicInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MUid = v
	}
	return nil
}

func (p *UserBasicInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MEmailAddr = v
	}
	return nil
}

func (p *UserBasicInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MPhoneNum = v
	}
	return nil
}

func (p *UserBasicInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MNickname = v
	}
	return nil
}

func (p *UserBasicInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MRealname = v
	}
	return nil
}

func (p *UserBasicInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.MLocation = v
	}
	return nil
}

func (p *UserBasicInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.MLogo = v
	}
	return nil
}

func (p *UserBasicInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		temp := int8(v)
		p.MGender = temp
	}
	return nil
}

func (p *UserBasicInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.MIntro = &v
	}
	return nil
}

func (p *UserBasicInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserBasicInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UserBasicInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MUid)); err != nil {
		return fmt.Errorf("%T.m_uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m_uid: %s", p, err)
	}
	return err
}

func (p *UserBasicInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_email_addr", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:m_email_addr: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MEmailAddr)); err != nil {
		return fmt.Errorf("%T.m_email_addr (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:m_email_addr: %s", p, err)
	}
	return err
}

func (p *UserBasicInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_phone_num", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:m_phone_num: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MPhoneNum)); err != nil {
		return fmt.Errorf("%T.m_phone_num (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:m_phone_num: %s", p, err)
	}
	return err
}

func (p *UserBasicInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_nickname", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:m_nickname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MNickname)); err != nil {
		return fmt.Errorf("%T.m_nickname (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:m_nickname: %s", p, err)
	}
	return err
}

func (p *UserBasicInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMRealname() {
		if err := oprot.WriteFieldBegin("m_realname", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:m_realname: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MRealname)); err != nil {
			return fmt.Errorf("%T.m_realname (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:m_realname: %s", p, err)
		}
	}
	return err
}

func (p *UserBasicInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMLocation() {
		if err := oprot.WriteFieldBegin("m_location", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:m_location: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MLocation)); err != nil {
			return fmt.Errorf("%T.m_location (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:m_location: %s", p, err)
		}
	}
	return err
}

func (p *UserBasicInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMLogo() {
		if err := oprot.WriteFieldBegin("m_logo", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:m_logo: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MLogo)); err != nil {
			return fmt.Errorf("%T.m_logo (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:m_logo: %s", p, err)
		}
	}
	return err
}

func (p *UserBasicInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMGender() {
		if err := oprot.WriteFieldBegin("m_gender", thrift.BYTE, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:m_gender: %s", p, err)
		}
		if err := oprot.WriteByte(byte(p.MGender)); err != nil {
			return fmt.Errorf("%T.m_gender (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:m_gender: %s", p, err)
		}
	}
	return err
}

func (p *UserBasicInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMIntro() {
		if err := oprot.WriteFieldBegin("m_intro", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:m_intro: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.MIntro)); err != nil {
			return fmt.Errorf("%T.m_intro (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:m_intro: %s", p, err)
		}
	}
	return err
}

func (p *UserBasicInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserBasicInfo(%+v)", *p)
}

type RegistrationAffliatedInfo struct {
	MSourceType       int8   `thrift:"m_source_type,1,required" json:"m_source_type"`
	MSubPlatform      int8   `thrift:"m_sub_platform,2,required" json:"m_sub_platform"`
	MRegistrationTime string `thrift:"m_registration_time,3" json:"m_registration_time"`
	MRegistrationType int8   `thrift:"m_registration_type,4" json:"m_registration_type"`
	MMarketChannel    int32  `thrift:"m_market_channel,5" json:"m_market_channel"`
	MExt0             int8   `thrift:"m_ext0,6" json:"m_ext0"`
	MExt1             int8   `thrift:"m_ext1,7" json:"m_ext1"`
	MExt2             int8   `thrift:"m_ext2,8" json:"m_ext2"`
	MExt3             int8   `thrift:"m_ext3,9" json:"m_ext3"`
	MExt4             int8   `thrift:"m_ext4,10" json:"m_ext4"`
	MRefid            string `thrift:"m_refid,11" json:"m_refid"`
}

func NewRegistrationAffliatedInfo() *RegistrationAffliatedInfo {
	return &RegistrationAffliatedInfo{}
}

func (p *RegistrationAffliatedInfo) GetMSourceType() int8 {
	return p.MSourceType
}

func (p *RegistrationAffliatedInfo) GetMSubPlatform() int8 {
	return p.MSubPlatform
}

var RegistrationAffliatedInfo_MRegistrationTime_DEFAULT string = ""

func (p *RegistrationAffliatedInfo) GetMRegistrationTime() string {
	return p.MRegistrationTime
}

var RegistrationAffliatedInfo_MRegistrationType_DEFAULT int8 = 0

func (p *RegistrationAffliatedInfo) GetMRegistrationType() int8 {
	return p.MRegistrationType
}

var RegistrationAffliatedInfo_MMarketChannel_DEFAULT int32 = 0

func (p *RegistrationAffliatedInfo) GetMMarketChannel() int32 {
	return p.MMarketChannel
}

var RegistrationAffliatedInfo_MExt0_DEFAULT int8 = 0

func (p *RegistrationAffliatedInfo) GetMExt0() int8 {
	return p.MExt0
}

var RegistrationAffliatedInfo_MExt1_DEFAULT int8 = 0

func (p *RegistrationAffliatedInfo) GetMExt1() int8 {
	return p.MExt1
}

var RegistrationAffliatedInfo_MExt2_DEFAULT int8 = 0

func (p *RegistrationAffliatedInfo) GetMExt2() int8 {
	return p.MExt2
}

var RegistrationAffliatedInfo_MExt3_DEFAULT int8 = 0

func (p *RegistrationAffliatedInfo) GetMExt3() int8 {
	return p.MExt3
}

var RegistrationAffliatedInfo_MExt4_DEFAULT int8 = 0

func (p *RegistrationAffliatedInfo) GetMExt4() int8 {
	return p.MExt4
}

var RegistrationAffliatedInfo_MRefid_DEFAULT string = ""

func (p *RegistrationAffliatedInfo) GetMRefid() string {
	return p.MRefid
}
func (p *RegistrationAffliatedInfo) IsSetMRegistrationTime() bool {
	return p.MRegistrationTime != RegistrationAffliatedInfo_MRegistrationTime_DEFAULT
}

func (p *RegistrationAffliatedInfo) IsSetMRegistrationType() bool {
	return p.MRegistrationType != RegistrationAffliatedInfo_MRegistrationType_DEFAULT
}

func (p *RegistrationAffliatedInfo) IsSetMMarketChannel() bool {
	return p.MMarketChannel != RegistrationAffliatedInfo_MMarketChannel_DEFAULT
}

func (p *RegistrationAffliatedInfo) IsSetMExt0() bool {
	return p.MExt0 != RegistrationAffliatedInfo_MExt0_DEFAULT
}

func (p *RegistrationAffliatedInfo) IsSetMExt1() bool {
	return p.MExt1 != RegistrationAffliatedInfo_MExt1_DEFAULT
}

func (p *RegistrationAffliatedInfo) IsSetMExt2() bool {
	return p.MExt2 != RegistrationAffliatedInfo_MExt2_DEFAULT
}

func (p *RegistrationAffliatedInfo) IsSetMExt3() bool {
	return p.MExt3 != RegistrationAffliatedInfo_MExt3_DEFAULT
}

func (p *RegistrationAffliatedInfo) IsSetMExt4() bool {
	return p.MExt4 != RegistrationAffliatedInfo_MExt4_DEFAULT
}

func (p *RegistrationAffliatedInfo) IsSetMRefid() bool {
	return p.MRefid != RegistrationAffliatedInfo_MRefid_DEFAULT
}

func (p *RegistrationAffliatedInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegistrationAffliatedInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := int8(v)
		p.MSourceType = temp
	}
	return nil
}

func (p *RegistrationAffliatedInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := int8(v)
		p.MSubPlatform = temp
	}
	return nil
}

func (p *RegistrationAffliatedInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MRegistrationTime = v
	}
	return nil
}

func (p *RegistrationAffliatedInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := int8(v)
		p.MRegistrationType = temp
	}
	return nil
}

func (p *RegistrationAffliatedInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MMarketChannel = v
	}
	return nil
}

func (p *RegistrationAffliatedInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := int8(v)
		p.MExt0 = temp
	}
	return nil
}

func (p *RegistrationAffliatedInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := int8(v)
		p.MExt1 = temp
	}
	return nil
}

func (p *RegistrationAffliatedInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		temp := int8(v)
		p.MExt2 = temp
	}
	return nil
}

func (p *RegistrationAffliatedInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		temp := int8(v)
		p.MExt3 = temp
	}
	return nil
}

func (p *RegistrationAffliatedInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		temp := int8(v)
		p.MExt4 = temp
	}
	return nil
}

func (p *RegistrationAffliatedInfo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.MRefid = v
	}
	return nil
}

func (p *RegistrationAffliatedInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegistrationAffliatedInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegistrationAffliatedInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_source_type", thrift.BYTE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m_source_type: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.MSourceType)); err != nil {
		return fmt.Errorf("%T.m_source_type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m_source_type: %s", p, err)
	}
	return err
}

func (p *RegistrationAffliatedInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_sub_platform", thrift.BYTE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:m_sub_platform: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.MSubPlatform)); err != nil {
		return fmt.Errorf("%T.m_sub_platform (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:m_sub_platform: %s", p, err)
	}
	return err
}

func (p *RegistrationAffliatedInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMRegistrationTime() {
		if err := oprot.WriteFieldBegin("m_registration_time", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:m_registration_time: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MRegistrationTime)); err != nil {
			return fmt.Errorf("%T.m_registration_time (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:m_registration_time: %s", p, err)
		}
	}
	return err
}

func (p *RegistrationAffliatedInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMRegistrationType() {
		if err := oprot.WriteFieldBegin("m_registration_type", thrift.BYTE, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:m_registration_type: %s", p, err)
		}
		if err := oprot.WriteByte(byte(p.MRegistrationType)); err != nil {
			return fmt.Errorf("%T.m_registration_type (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:m_registration_type: %s", p, err)
		}
	}
	return err
}

func (p *RegistrationAffliatedInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMMarketChannel() {
		if err := oprot.WriteFieldBegin("m_market_channel", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:m_market_channel: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MMarketChannel)); err != nil {
			return fmt.Errorf("%T.m_market_channel (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:m_market_channel: %s", p, err)
		}
	}
	return err
}

func (p *RegistrationAffliatedInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMExt0() {
		if err := oprot.WriteFieldBegin("m_ext0", thrift.BYTE, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:m_ext0: %s", p, err)
		}
		if err := oprot.WriteByte(byte(p.MExt0)); err != nil {
			return fmt.Errorf("%T.m_ext0 (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:m_ext0: %s", p, err)
		}
	}
	return err
}

func (p *RegistrationAffliatedInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMExt1() {
		if err := oprot.WriteFieldBegin("m_ext1", thrift.BYTE, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:m_ext1: %s", p, err)
		}
		if err := oprot.WriteByte(byte(p.MExt1)); err != nil {
			return fmt.Errorf("%T.m_ext1 (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:m_ext1: %s", p, err)
		}
	}
	return err
}

func (p *RegistrationAffliatedInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMExt2() {
		if err := oprot.WriteFieldBegin("m_ext2", thrift.BYTE, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:m_ext2: %s", p, err)
		}
		if err := oprot.WriteByte(byte(p.MExt2)); err != nil {
			return fmt.Errorf("%T.m_ext2 (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:m_ext2: %s", p, err)
		}
	}
	return err
}

func (p *RegistrationAffliatedInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMExt3() {
		if err := oprot.WriteFieldBegin("m_ext3", thrift.BYTE, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:m_ext3: %s", p, err)
		}
		if err := oprot.WriteByte(byte(p.MExt3)); err != nil {
			return fmt.Errorf("%T.m_ext3 (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:m_ext3: %s", p, err)
		}
	}
	return err
}

func (p *RegistrationAffliatedInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetMExt4() {
		if err := oprot.WriteFieldBegin("m_ext4", thrift.BYTE, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:m_ext4: %s", p, err)
		}
		if err := oprot.WriteByte(byte(p.MExt4)); err != nil {
			return fmt.Errorf("%T.m_ext4 (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:m_ext4: %s", p, err)
		}
	}
	return err
}

func (p *RegistrationAffliatedInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetMRefid() {
		if err := oprot.WriteFieldBegin("m_refid", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:m_refid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MRefid)); err != nil {
			return fmt.Errorf("%T.m_refid (11) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:m_refid: %s", p, err)
		}
	}
	return err
}

func (p *RegistrationAffliatedInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistrationAffliatedInfo(%+v)", *p)
}

type RegistrationInfo struct {
	MMd5Passwd           string                     `thrift:"m_md5_passwd,1,required" json:"m_md5_passwd"`
	MUserBasicInfo       *UserBasicInfo             `thrift:"m_user_basic_info,2,required" json:"m_user_basic_info"`
	MAffliatedInfo       *RegistrationAffliatedInfo `thrift:"m_affliated_info,3" json:"m_affliated_info"`
	MSmsVerificationCode string                     `thrift:"m_sms_verification_code,4" json:"m_sms_verification_code"`
}

func NewRegistrationInfo() *RegistrationInfo {
	return &RegistrationInfo{}
}

func (p *RegistrationInfo) GetMMd5Passwd() string {
	return p.MMd5Passwd
}

var RegistrationInfo_MUserBasicInfo_DEFAULT *UserBasicInfo

func (p *RegistrationInfo) GetMUserBasicInfo() *UserBasicInfo {
	if !p.IsSetMUserBasicInfo() {
		return RegistrationInfo_MUserBasicInfo_DEFAULT
	}
	return p.MUserBasicInfo
}

var RegistrationInfo_MAffliatedInfo_DEFAULT *RegistrationAffliatedInfo

func (p *RegistrationInfo) GetMAffliatedInfo() *RegistrationAffliatedInfo {
	if !p.IsSetMAffliatedInfo() {
		return RegistrationInfo_MAffliatedInfo_DEFAULT
	}
	return p.MAffliatedInfo
}

var RegistrationInfo_MSmsVerificationCode_DEFAULT string = ""

func (p *RegistrationInfo) GetMSmsVerificationCode() string {
	return p.MSmsVerificationCode
}
func (p *RegistrationInfo) IsSetMUserBasicInfo() bool {
	return p.MUserBasicInfo != nil
}

func (p *RegistrationInfo) IsSetMAffliatedInfo() bool {
	return p.MAffliatedInfo != nil
}

func (p *RegistrationInfo) IsSetMSmsVerificationCode() bool {
	return p.MSmsVerificationCode != RegistrationInfo_MSmsVerificationCode_DEFAULT
}

func (p *RegistrationInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegistrationInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MMd5Passwd = v
	}
	return nil
}

func (p *RegistrationInfo) ReadField2(iprot thrift.TProtocol) error {
	p.MUserBasicInfo = &UserBasicInfo{
		MUid: -1,

		MGender: -1,
	}
	if err := p.MUserBasicInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MUserBasicInfo, err)
	}
	return nil
}

func (p *RegistrationInfo) ReadField3(iprot thrift.TProtocol) error {
	p.MAffliatedInfo = &RegistrationAffliatedInfo{}
	if err := p.MAffliatedInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MAffliatedInfo, err)
	}
	return nil
}

func (p *RegistrationInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MSmsVerificationCode = v
	}
	return nil
}

func (p *RegistrationInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegistrationInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegistrationInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_md5_passwd", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m_md5_passwd: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MMd5Passwd)); err != nil {
		return fmt.Errorf("%T.m_md5_passwd (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m_md5_passwd: %s", p, err)
	}
	return err
}

func (p *RegistrationInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_user_basic_info", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:m_user_basic_info: %s", p, err)
	}
	if err := p.MUserBasicInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.MUserBasicInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:m_user_basic_info: %s", p, err)
	}
	return err
}

func (p *RegistrationInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMAffliatedInfo() {
		if err := oprot.WriteFieldBegin("m_affliated_info", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:m_affliated_info: %s", p, err)
		}
		if err := p.MAffliatedInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MAffliatedInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:m_affliated_info: %s", p, err)
		}
	}
	return err
}

func (p *RegistrationInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMSmsVerificationCode() {
		if err := oprot.WriteFieldBegin("m_sms_verification_code", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:m_sms_verification_code: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MSmsVerificationCode)); err != nil {
			return fmt.Errorf("%T.m_sms_verification_code (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:m_sms_verification_code: %s", p, err)
		}
	}
	return err
}

func (p *RegistrationInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegistrationInfo(%+v)", *p)
}

type FormaxLoginInfo struct {
	MUid                    int64  `thrift:"m_uid,1" json:"m_uid"`
	MMailAddr               string `thrift:"m_mail_addr,2" json:"m_mail_addr"`
	MMd5Passwd              string `thrift:"m_md5_passwd,3,required" json:"m_md5_passwd"`
	MTimeStamp              int64  `thrift:"m_time_stamp,4" json:"m_time_stamp"`
	MSessionTimeoutDuration int64  `thrift:"m_session_timeout_duration,5" json:"m_session_timeout_duration"`
	MPhone                  string `thrift:"m_phone,6" json:"m_phone"`
	MAutoLoginKey           string `thrift:"m_auto_login_key,7" json:"m_auto_login_key"`
	MLoginLocation          string `thrift:"m_login_location,8" json:"m_login_location"`
	MExt0                   int8   `thrift:"m_ext0,9" json:"m_ext0"`
	MExt1                   int8   `thrift:"m_ext1,10" json:"m_ext1"`
}

func NewFormaxLoginInfo() *FormaxLoginInfo {
	return &FormaxLoginInfo{
		MUid: -1,
	}
}

var FormaxLoginInfo_MUid_DEFAULT int64 = -1

func (p *FormaxLoginInfo) GetMUid() int64 {
	return p.MUid
}

var FormaxLoginInfo_MMailAddr_DEFAULT string = ""

func (p *FormaxLoginInfo) GetMMailAddr() string {
	return p.MMailAddr
}

func (p *FormaxLoginInfo) GetMMd5Passwd() string {
	return p.MMd5Passwd
}

var FormaxLoginInfo_MTimeStamp_DEFAULT int64 = 0

func (p *FormaxLoginInfo) GetMTimeStamp() int64 {
	return p.MTimeStamp
}

var FormaxLoginInfo_MSessionTimeoutDuration_DEFAULT int64 = 0

func (p *FormaxLoginInfo) GetMSessionTimeoutDuration() int64 {
	return p.MSessionTimeoutDuration
}

var FormaxLoginInfo_MPhone_DEFAULT string = ""

func (p *FormaxLoginInfo) GetMPhone() string {
	return p.MPhone
}

var FormaxLoginInfo_MAutoLoginKey_DEFAULT string = ""

func (p *FormaxLoginInfo) GetMAutoLoginKey() string {
	return p.MAutoLoginKey
}

var FormaxLoginInfo_MLoginLocation_DEFAULT string = ""

func (p *FormaxLoginInfo) GetMLoginLocation() string {
	return p.MLoginLocation
}

var FormaxLoginInfo_MExt0_DEFAULT int8 = 0

func (p *FormaxLoginInfo) GetMExt0() int8 {
	return p.MExt0
}

var FormaxLoginInfo_MExt1_DEFAULT int8 = 0

func (p *FormaxLoginInfo) GetMExt1() int8 {
	return p.MExt1
}
func (p *FormaxLoginInfo) IsSetMUid() bool {
	return p.MUid != FormaxLoginInfo_MUid_DEFAULT
}

func (p *FormaxLoginInfo) IsSetMMailAddr() bool {
	return p.MMailAddr != FormaxLoginInfo_MMailAddr_DEFAULT
}

func (p *FormaxLoginInfo) IsSetMTimeStamp() bool {
	return p.MTimeStamp != FormaxLoginInfo_MTimeStamp_DEFAULT
}

func (p *FormaxLoginInfo) IsSetMSessionTimeoutDuration() bool {
	return p.MSessionTimeoutDuration != FormaxLoginInfo_MSessionTimeoutDuration_DEFAULT
}

func (p *FormaxLoginInfo) IsSetMPhone() bool {
	return p.MPhone != FormaxLoginInfo_MPhone_DEFAULT
}

func (p *FormaxLoginInfo) IsSetMAutoLoginKey() bool {
	return p.MAutoLoginKey != FormaxLoginInfo_MAutoLoginKey_DEFAULT
}

func (p *FormaxLoginInfo) IsSetMLoginLocation() bool {
	return p.MLoginLocation != FormaxLoginInfo_MLoginLocation_DEFAULT
}

func (p *FormaxLoginInfo) IsSetMExt0() bool {
	return p.MExt0 != FormaxLoginInfo_MExt0_DEFAULT
}

func (p *FormaxLoginInfo) IsSetMExt1() bool {
	return p.MExt1 != FormaxLoginInfo_MExt1_DEFAULT
}

func (p *FormaxLoginInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FormaxLoginInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MUid = v
	}
	return nil
}

func (p *FormaxLoginInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MMailAddr = v
	}
	return nil
}

func (p *FormaxLoginInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MMd5Passwd = v
	}
	return nil
}

func (p *FormaxLoginInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MTimeStamp = v
	}
	return nil
}

func (p *FormaxLoginInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MSessionTimeoutDuration = v
	}
	return nil
}

func (p *FormaxLoginInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.MPhone = v
	}
	return nil
}

func (p *FormaxLoginInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.MAutoLoginKey = v
	}
	return nil
}

func (p *FormaxLoginInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.MLoginLocation = v
	}
	return nil
}

func (p *FormaxLoginInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		temp := int8(v)
		p.MExt0 = temp
	}
	return nil
}

func (p *FormaxLoginInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		temp := int8(v)
		p.MExt1 = temp
	}
	return nil
}

func (p *FormaxLoginInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FormaxLoginInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FormaxLoginInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMUid() {
		if err := oprot.WriteFieldBegin("m_uid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:m_uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.MUid)); err != nil {
			return fmt.Errorf("%T.m_uid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:m_uid: %s", p, err)
		}
	}
	return err
}

func (p *FormaxLoginInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMMailAddr() {
		if err := oprot.WriteFieldBegin("m_mail_addr", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:m_mail_addr: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MMailAddr)); err != nil {
			return fmt.Errorf("%T.m_mail_addr (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:m_mail_addr: %s", p, err)
		}
	}
	return err
}

func (p *FormaxLoginInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_md5_passwd", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:m_md5_passwd: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MMd5Passwd)); err != nil {
		return fmt.Errorf("%T.m_md5_passwd (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:m_md5_passwd: %s", p, err)
	}
	return err
}

func (p *FormaxLoginInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMTimeStamp() {
		if err := oprot.WriteFieldBegin("m_time_stamp", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:m_time_stamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.MTimeStamp)); err != nil {
			return fmt.Errorf("%T.m_time_stamp (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:m_time_stamp: %s", p, err)
		}
	}
	return err
}

func (p *FormaxLoginInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMSessionTimeoutDuration() {
		if err := oprot.WriteFieldBegin("m_session_timeout_duration", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:m_session_timeout_duration: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.MSessionTimeoutDuration)); err != nil {
			return fmt.Errorf("%T.m_session_timeout_duration (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:m_session_timeout_duration: %s", p, err)
		}
	}
	return err
}

func (p *FormaxLoginInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMPhone() {
		if err := oprot.WriteFieldBegin("m_phone", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:m_phone: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MPhone)); err != nil {
			return fmt.Errorf("%T.m_phone (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:m_phone: %s", p, err)
		}
	}
	return err
}

func (p *FormaxLoginInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMAutoLoginKey() {
		if err := oprot.WriteFieldBegin("m_auto_login_key", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:m_auto_login_key: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MAutoLoginKey)); err != nil {
			return fmt.Errorf("%T.m_auto_login_key (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:m_auto_login_key: %s", p, err)
		}
	}
	return err
}

func (p *FormaxLoginInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMLoginLocation() {
		if err := oprot.WriteFieldBegin("m_login_location", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:m_login_location: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MLoginLocation)); err != nil {
			return fmt.Errorf("%T.m_login_location (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:m_login_location: %s", p, err)
		}
	}
	return err
}

func (p *FormaxLoginInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMExt0() {
		if err := oprot.WriteFieldBegin("m_ext0", thrift.BYTE, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:m_ext0: %s", p, err)
		}
		if err := oprot.WriteByte(byte(p.MExt0)); err != nil {
			return fmt.Errorf("%T.m_ext0 (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:m_ext0: %s", p, err)
		}
	}
	return err
}

func (p *FormaxLoginInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetMExt1() {
		if err := oprot.WriteFieldBegin("m_ext1", thrift.BYTE, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:m_ext1: %s", p, err)
		}
		if err := oprot.WriteByte(byte(p.MExt1)); err != nil {
			return fmt.Errorf("%T.m_ext1 (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:m_ext1: %s", p, err)
		}
	}
	return err
}

func (p *FormaxLoginInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FormaxLoginInfo(%+v)", *p)
}

type FormaxLoginRecord struct {
	MSessionId     string `thrift:"m_session_id,1,required" json:"m_session_id"`
	MUid           int64  `thrift:"m_uid,2,required" json:"m_uid"`
	MLoginTime     string `thrift:"m_login_time,3" json:"m_login_time"`
	MLoginLocation string `thrift:"m_login_location,4" json:"m_login_location"`
	MLogoutTime    string `thrift:"m_logout_time,5" json:"m_logout_time"`
	MLogoutType    int8   `thrift:"m_logout_type,6" json:"m_logout_type"`
	MExt0          int8   `thrift:"m_ext0,7" json:"m_ext0"`
	MExt1          int8   `thrift:"m_ext1,8" json:"m_ext1"`
}

func NewFormaxLoginRecord() *FormaxLoginRecord {
	return &FormaxLoginRecord{
		MUid: -1,
	}
}

func (p *FormaxLoginRecord) GetMSessionId() string {
	return p.MSessionId
}

func (p *FormaxLoginRecord) GetMUid() int64 {
	return p.MUid
}

var FormaxLoginRecord_MLoginTime_DEFAULT string = ""

func (p *FormaxLoginRecord) GetMLoginTime() string {
	return p.MLoginTime
}

var FormaxLoginRecord_MLoginLocation_DEFAULT string = ""

func (p *FormaxLoginRecord) GetMLoginLocation() string {
	return p.MLoginLocation
}

var FormaxLoginRecord_MLogoutTime_DEFAULT string = ""

func (p *FormaxLoginRecord) GetMLogoutTime() string {
	return p.MLogoutTime
}

var FormaxLoginRecord_MLogoutType_DEFAULT int8 = 0

func (p *FormaxLoginRecord) GetMLogoutType() int8 {
	return p.MLogoutType
}

var FormaxLoginRecord_MExt0_DEFAULT int8 = 0

func (p *FormaxLoginRecord) GetMExt0() int8 {
	return p.MExt0
}

var FormaxLoginRecord_MExt1_DEFAULT int8 = 0

func (p *FormaxLoginRecord) GetMExt1() int8 {
	return p.MExt1
}
func (p *FormaxLoginRecord) IsSetMLoginTime() bool {
	return p.MLoginTime != FormaxLoginRecord_MLoginTime_DEFAULT
}

func (p *FormaxLoginRecord) IsSetMLoginLocation() bool {
	return p.MLoginLocation != FormaxLoginRecord_MLoginLocation_DEFAULT
}

func (p *FormaxLoginRecord) IsSetMLogoutTime() bool {
	return p.MLogoutTime != FormaxLoginRecord_MLogoutTime_DEFAULT
}

func (p *FormaxLoginRecord) IsSetMLogoutType() bool {
	return p.MLogoutType != FormaxLoginRecord_MLogoutType_DEFAULT
}

func (p *FormaxLoginRecord) IsSetMExt0() bool {
	return p.MExt0 != FormaxLoginRecord_MExt0_DEFAULT
}

func (p *FormaxLoginRecord) IsSetMExt1() bool {
	return p.MExt1 != FormaxLoginRecord_MExt1_DEFAULT
}

func (p *FormaxLoginRecord) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FormaxLoginRecord) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MSessionId = v
	}
	return nil
}

func (p *FormaxLoginRecord) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MUid = v
	}
	return nil
}

func (p *FormaxLoginRecord) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MLoginTime = v
	}
	return nil
}

func (p *FormaxLoginRecord) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MLoginLocation = v
	}
	return nil
}

func (p *FormaxLoginRecord) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MLogoutTime = v
	}
	return nil
}

func (p *FormaxLoginRecord) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := int8(v)
		p.MLogoutType = temp
	}
	return nil
}

func (p *FormaxLoginRecord) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := int8(v)
		p.MExt0 = temp
	}
	return nil
}

func (p *FormaxLoginRecord) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		temp := int8(v)
		p.MExt1 = temp
	}
	return nil
}

func (p *FormaxLoginRecord) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FormaxLoginRecord"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FormaxLoginRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_session_id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m_session_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MSessionId)); err != nil {
		return fmt.Errorf("%T.m_session_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m_session_id: %s", p, err)
	}
	return err
}

func (p *FormaxLoginRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:m_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MUid)); err != nil {
		return fmt.Errorf("%T.m_uid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:m_uid: %s", p, err)
	}
	return err
}

func (p *FormaxLoginRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMLoginTime() {
		if err := oprot.WriteFieldBegin("m_login_time", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:m_login_time: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MLoginTime)); err != nil {
			return fmt.Errorf("%T.m_login_time (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:m_login_time: %s", p, err)
		}
	}
	return err
}

func (p *FormaxLoginRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMLoginLocation() {
		if err := oprot.WriteFieldBegin("m_login_location", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:m_login_location: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MLoginLocation)); err != nil {
			return fmt.Errorf("%T.m_login_location (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:m_login_location: %s", p, err)
		}
	}
	return err
}

func (p *FormaxLoginRecord) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMLogoutTime() {
		if err := oprot.WriteFieldBegin("m_logout_time", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:m_logout_time: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MLogoutTime)); err != nil {
			return fmt.Errorf("%T.m_logout_time (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:m_logout_time: %s", p, err)
		}
	}
	return err
}

func (p *FormaxLoginRecord) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMLogoutType() {
		if err := oprot.WriteFieldBegin("m_logout_type", thrift.BYTE, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:m_logout_type: %s", p, err)
		}
		if err := oprot.WriteByte(byte(p.MLogoutType)); err != nil {
			return fmt.Errorf("%T.m_logout_type (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:m_logout_type: %s", p, err)
		}
	}
	return err
}

func (p *FormaxLoginRecord) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMExt0() {
		if err := oprot.WriteFieldBegin("m_ext0", thrift.BYTE, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:m_ext0: %s", p, err)
		}
		if err := oprot.WriteByte(byte(p.MExt0)); err != nil {
			return fmt.Errorf("%T.m_ext0 (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:m_ext0: %s", p, err)
		}
	}
	return err
}

func (p *FormaxLoginRecord) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMExt1() {
		if err := oprot.WriteFieldBegin("m_ext1", thrift.BYTE, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:m_ext1: %s", p, err)
		}
		if err := oprot.WriteByte(byte(p.MExt1)); err != nil {
			return fmt.Errorf("%T.m_ext1 (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:m_ext1: %s", p, err)
		}
	}
	return err
}

func (p *FormaxLoginRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FormaxLoginRecord(%+v)", *p)
}

type FormaxLoginResult_ struct {
	MSessionInfo   *SessionInfo   `thrift:"m_session_info,1,required" json:"m_session_info"`
	MStatusCode    Errno          `thrift:"m_status_code,2,required" json:"m_status_code"`
	MUserBasicInfo *UserBasicInfo `thrift:"m_user_basic_info,3,required" json:"m_user_basic_info"`
}

func NewFormaxLoginResult_() *FormaxLoginResult_ {
	return &FormaxLoginResult_{}
}

var FormaxLoginResult__MSessionInfo_DEFAULT *SessionInfo

func (p *FormaxLoginResult_) GetMSessionInfo() *SessionInfo {
	if !p.IsSetMSessionInfo() {
		return FormaxLoginResult__MSessionInfo_DEFAULT
	}
	return p.MSessionInfo
}

func (p *FormaxLoginResult_) GetMStatusCode() Errno {
	return p.MStatusCode
}

var FormaxLoginResult__MUserBasicInfo_DEFAULT *UserBasicInfo

func (p *FormaxLoginResult_) GetMUserBasicInfo() *UserBasicInfo {
	if !p.IsSetMUserBasicInfo() {
		return FormaxLoginResult__MUserBasicInfo_DEFAULT
	}
	return p.MUserBasicInfo
}
func (p *FormaxLoginResult_) IsSetMSessionInfo() bool {
	return p.MSessionInfo != nil
}

func (p *FormaxLoginResult_) IsSetMUserBasicInfo() bool {
	return p.MUserBasicInfo != nil
}

func (p *FormaxLoginResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FormaxLoginResult_) ReadField1(iprot thrift.TProtocol) error {
	p.MSessionInfo = &SessionInfo{
		MUid: -1,
	}
	if err := p.MSessionInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MSessionInfo, err)
	}
	return nil
}

func (p *FormaxLoginResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := Errno(v)
		p.MStatusCode = temp
	}
	return nil
}

func (p *FormaxLoginResult_) ReadField3(iprot thrift.TProtocol) error {
	p.MUserBasicInfo = &UserBasicInfo{
		MUid: -1,

		MGender: -1,
	}
	if err := p.MUserBasicInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MUserBasicInfo, err)
	}
	return nil
}

func (p *FormaxLoginResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FormaxLoginResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FormaxLoginResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_session_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m_session_info: %s", p, err)
	}
	if err := p.MSessionInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.MSessionInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m_session_info: %s", p, err)
	}
	return err
}

func (p *FormaxLoginResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_status_code", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:m_status_code: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MStatusCode)); err != nil {
		return fmt.Errorf("%T.m_status_code (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:m_status_code: %s", p, err)
	}
	return err
}

func (p *FormaxLoginResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_user_basic_info", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:m_user_basic_info: %s", p, err)
	}
	if err := p.MUserBasicInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.MUserBasicInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:m_user_basic_info: %s", p, err)
	}
	return err
}

func (p *FormaxLoginResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FormaxLoginResult_(%+v)", *p)
}

type MT4LoginInfo struct {
	MMt4LiveId int64  `thrift:"m_mt4_live_id,1,required" json:"m_mt4_live_id"`
	MUid       int64  `thrift:"m_uid,2" json:"m_uid"`
	MMailAddr  string `thrift:"m_mail_addr,3,required" json:"m_mail_addr"`
	MPasswd    string `thrift:"m_passwd,4,required" json:"m_passwd"`
}

func NewMT4LoginInfo() *MT4LoginInfo {
	return &MT4LoginInfo{
		MMt4LiveId: -1,

		MUid: -1,
	}
}

func (p *MT4LoginInfo) GetMMt4LiveId() int64 {
	return p.MMt4LiveId
}

var MT4LoginInfo_MUid_DEFAULT int64 = -1

func (p *MT4LoginInfo) GetMUid() int64 {
	return p.MUid
}

func (p *MT4LoginInfo) GetMMailAddr() string {
	return p.MMailAddr
}

func (p *MT4LoginInfo) GetMPasswd() string {
	return p.MPasswd
}
func (p *MT4LoginInfo) IsSetMUid() bool {
	return p.MUid != MT4LoginInfo_MUid_DEFAULT
}

func (p *MT4LoginInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MT4LoginInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MMt4LiveId = v
	}
	return nil
}

func (p *MT4LoginInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MUid = v
	}
	return nil
}

func (p *MT4LoginInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MMailAddr = v
	}
	return nil
}

func (p *MT4LoginInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MPasswd = v
	}
	return nil
}

func (p *MT4LoginInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MT4LoginInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MT4LoginInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_mt4_live_id", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m_mt4_live_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MMt4LiveId)); err != nil {
		return fmt.Errorf("%T.m_mt4_live_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m_mt4_live_id: %s", p, err)
	}
	return err
}

func (p *MT4LoginInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMUid() {
		if err := oprot.WriteFieldBegin("m_uid", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:m_uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.MUid)); err != nil {
			return fmt.Errorf("%T.m_uid (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:m_uid: %s", p, err)
		}
	}
	return err
}

func (p *MT4LoginInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_mail_addr", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:m_mail_addr: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MMailAddr)); err != nil {
		return fmt.Errorf("%T.m_mail_addr (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:m_mail_addr: %s", p, err)
	}
	return err
}

func (p *MT4LoginInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_passwd", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:m_passwd: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MPasswd)); err != nil {
		return fmt.Errorf("%T.m_passwd (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:m_passwd: %s", p, err)
	}
	return err
}

func (p *MT4LoginInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MT4LoginInfo(%+v)", *p)
}

type MT4BindInfo struct {
	MUid       int64  `thrift:"m_uid,1" json:"m_uid"`
	MMailAddr  string `thrift:"m_mail_addr,2" json:"m_mail_addr"`
	MLiveLogin int64  `thrift:"m_live_login,3,required" json:"m_live_login"`
	MDemoLogin int64  `thrift:"m_demo_login,4,required" json:"m_demo_login"`
}

func NewMT4BindInfo() *MT4BindInfo {
	return &MT4BindInfo{
		MUid: -1,
	}
}

var MT4BindInfo_MUid_DEFAULT int64 = -1

func (p *MT4BindInfo) GetMUid() int64 {
	return p.MUid
}

var MT4BindInfo_MMailAddr_DEFAULT string = ""

func (p *MT4BindInfo) GetMMailAddr() string {
	return p.MMailAddr
}

func (p *MT4BindInfo) GetMLiveLogin() int64 {
	return p.MLiveLogin
}

func (p *MT4BindInfo) GetMDemoLogin() int64 {
	return p.MDemoLogin
}
func (p *MT4BindInfo) IsSetMUid() bool {
	return p.MUid != MT4BindInfo_MUid_DEFAULT
}

func (p *MT4BindInfo) IsSetMMailAddr() bool {
	return p.MMailAddr != MT4BindInfo_MMailAddr_DEFAULT
}

func (p *MT4BindInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MT4BindInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MUid = v
	}
	return nil
}

func (p *MT4BindInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MMailAddr = v
	}
	return nil
}

func (p *MT4BindInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MLiveLogin = v
	}
	return nil
}

func (p *MT4BindInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MDemoLogin = v
	}
	return nil
}

func (p *MT4BindInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MT4BindInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MT4BindInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMUid() {
		if err := oprot.WriteFieldBegin("m_uid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:m_uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.MUid)); err != nil {
			return fmt.Errorf("%T.m_uid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:m_uid: %s", p, err)
		}
	}
	return err
}

func (p *MT4BindInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMMailAddr() {
		if err := oprot.WriteFieldBegin("m_mail_addr", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:m_mail_addr: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MMailAddr)); err != nil {
			return fmt.Errorf("%T.m_mail_addr (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:m_mail_addr: %s", p, err)
		}
	}
	return err
}

func (p *MT4BindInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_live_login", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:m_live_login: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MLiveLogin)); err != nil {
		return fmt.Errorf("%T.m_live_login (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:m_live_login: %s", p, err)
	}
	return err
}

func (p *MT4BindInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_demo_login", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:m_demo_login: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MDemoLogin)); err != nil {
		return fmt.Errorf("%T.m_demo_login (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:m_demo_login: %s", p, err)
	}
	return err
}

func (p *MT4BindInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MT4BindInfo(%+v)", *p)
}

type MT4Info struct {
	MLiveLogin int64 `thrift:"m_live_login,1,required" json:"m_live_login"`
	MDemoLogin int64 `thrift:"m_demo_login,2,required" json:"m_demo_login"`
}

func NewMT4Info() *MT4Info {
	return &MT4Info{}
}

func (p *MT4Info) GetMLiveLogin() int64 {
	return p.MLiveLogin
}

func (p *MT4Info) GetMDemoLogin() int64 {
	return p.MDemoLogin
}
func (p *MT4Info) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MT4Info) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MLiveLogin = v
	}
	return nil
}

func (p *MT4Info) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MDemoLogin = v
	}
	return nil
}

func (p *MT4Info) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MT4Info"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MT4Info) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_live_login", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m_live_login: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MLiveLogin)); err != nil {
		return fmt.Errorf("%T.m_live_login (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m_live_login: %s", p, err)
	}
	return err
}

func (p *MT4Info) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_demo_login", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:m_demo_login: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MDemoLogin)); err != nil {
		return fmt.Errorf("%T.m_demo_login (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:m_demo_login: %s", p, err)
	}
	return err
}

func (p *MT4Info) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MT4Info(%+v)", *p)
}

type P2PLoginInfo struct {
	MUid      int64  `thrift:"m_uid,1" json:"m_uid"`
	MMailAddr string `thrift:"m_mail_addr,2" json:"m_mail_addr"`
	MPasswd   string `thrift:"m_passwd,3,required" json:"m_passwd"`
}

func NewP2PLoginInfo() *P2PLoginInfo {
	return &P2PLoginInfo{
		MUid: -1,
	}
}

var P2PLoginInfo_MUid_DEFAULT int64 = -1

func (p *P2PLoginInfo) GetMUid() int64 {
	return p.MUid
}

var P2PLoginInfo_MMailAddr_DEFAULT string = ""

func (p *P2PLoginInfo) GetMMailAddr() string {
	return p.MMailAddr
}

func (p *P2PLoginInfo) GetMPasswd() string {
	return p.MPasswd
}
func (p *P2PLoginInfo) IsSetMUid() bool {
	return p.MUid != P2PLoginInfo_MUid_DEFAULT
}

func (p *P2PLoginInfo) IsSetMMailAddr() bool {
	return p.MMailAddr != P2PLoginInfo_MMailAddr_DEFAULT
}

func (p *P2PLoginInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *P2PLoginInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MUid = v
	}
	return nil
}

func (p *P2PLoginInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MMailAddr = v
	}
	return nil
}

func (p *P2PLoginInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MPasswd = v
	}
	return nil
}

func (p *P2PLoginInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("P2PLoginInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *P2PLoginInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMUid() {
		if err := oprot.WriteFieldBegin("m_uid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:m_uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.MUid)); err != nil {
			return fmt.Errorf("%T.m_uid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:m_uid: %s", p, err)
		}
	}
	return err
}

func (p *P2PLoginInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMMailAddr() {
		if err := oprot.WriteFieldBegin("m_mail_addr", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:m_mail_addr: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MMailAddr)); err != nil {
			return fmt.Errorf("%T.m_mail_addr (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:m_mail_addr: %s", p, err)
		}
	}
	return err
}

func (p *P2PLoginInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_passwd", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:m_passwd: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MPasswd)); err != nil {
		return fmt.Errorf("%T.m_passwd (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:m_passwd: %s", p, err)
	}
	return err
}

func (p *P2PLoginInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("P2PLoginInfo(%+v)", *p)
}

type P2PBindInfo struct {
	MUid      int64  `thrift:"m_uid,1" json:"m_uid"`
	MMailAddr string `thrift:"m_mail_addr,2" json:"m_mail_addr"`
	MP2pUid   string `thrift:"m_p2p_uid,3,required" json:"m_p2p_uid"`
	MIdNumber string `thrift:"m_id_number,4" json:"m_id_number"`
}

func NewP2PBindInfo() *P2PBindInfo {
	return &P2PBindInfo{
		MUid: -1,
	}
}

var P2PBindInfo_MUid_DEFAULT int64 = -1

func (p *P2PBindInfo) GetMUid() int64 {
	return p.MUid
}

var P2PBindInfo_MMailAddr_DEFAULT string = ""

func (p *P2PBindInfo) GetMMailAddr() string {
	return p.MMailAddr
}

func (p *P2PBindInfo) GetMP2pUid() string {
	return p.MP2pUid
}

var P2PBindInfo_MIdNumber_DEFAULT string = ""

func (p *P2PBindInfo) GetMIdNumber() string {
	return p.MIdNumber
}
func (p *P2PBindInfo) IsSetMUid() bool {
	return p.MUid != P2PBindInfo_MUid_DEFAULT
}

func (p *P2PBindInfo) IsSetMMailAddr() bool {
	return p.MMailAddr != P2PBindInfo_MMailAddr_DEFAULT
}

func (p *P2PBindInfo) IsSetMIdNumber() bool {
	return p.MIdNumber != P2PBindInfo_MIdNumber_DEFAULT
}

func (p *P2PBindInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *P2PBindInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MUid = v
	}
	return nil
}

func (p *P2PBindInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MMailAddr = v
	}
	return nil
}

func (p *P2PBindInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MP2pUid = v
	}
	return nil
}

func (p *P2PBindInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MIdNumber = v
	}
	return nil
}

func (p *P2PBindInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("P2PBindInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *P2PBindInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMUid() {
		if err := oprot.WriteFieldBegin("m_uid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:m_uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.MUid)); err != nil {
			return fmt.Errorf("%T.m_uid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:m_uid: %s", p, err)
		}
	}
	return err
}

func (p *P2PBindInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMMailAddr() {
		if err := oprot.WriteFieldBegin("m_mail_addr", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:m_mail_addr: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MMailAddr)); err != nil {
			return fmt.Errorf("%T.m_mail_addr (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:m_mail_addr: %s", p, err)
		}
	}
	return err
}

func (p *P2PBindInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_p2p_uid", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:m_p2p_uid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MP2pUid)); err != nil {
		return fmt.Errorf("%T.m_p2p_uid (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:m_p2p_uid: %s", p, err)
	}
	return err
}

func (p *P2PBindInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMIdNumber() {
		if err := oprot.WriteFieldBegin("m_id_number", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:m_id_number: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MIdNumber)); err != nil {
			return fmt.Errorf("%T.m_id_number (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:m_id_number: %s", p, err)
		}
	}
	return err
}

func (p *P2PBindInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("P2PBindInfo(%+v)", *p)
}

type P2PInfo struct {
	MP2pUid   string `thrift:"m_p2p_uid,1,required" json:"m_p2p_uid"`
	MIdNumber string `thrift:"m_id_number,2" json:"m_id_number"`
}

func NewP2PInfo() *P2PInfo {
	return &P2PInfo{}
}

func (p *P2PInfo) GetMP2pUid() string {
	return p.MP2pUid
}

var P2PInfo_MIdNumber_DEFAULT string = ""

func (p *P2PInfo) GetMIdNumber() string {
	return p.MIdNumber
}
func (p *P2PInfo) IsSetMIdNumber() bool {
	return p.MIdNumber != P2PInfo_MIdNumber_DEFAULT
}

func (p *P2PInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *P2PInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MP2pUid = v
	}
	return nil
}

func (p *P2PInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MIdNumber = v
	}
	return nil
}

func (p *P2PInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("P2PInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *P2PInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_p2p_uid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m_p2p_uid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MP2pUid)); err != nil {
		return fmt.Errorf("%T.m_p2p_uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m_p2p_uid: %s", p, err)
	}
	return err
}

func (p *P2PInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMIdNumber() {
		if err := oprot.WriteFieldBegin("m_id_number", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:m_id_number: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MIdNumber)); err != nil {
			return fmt.Errorf("%T.m_id_number (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:m_id_number: %s", p, err)
		}
	}
	return err
}

func (p *P2PInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("P2PInfo(%+v)", *p)
}

type ForbagLoginInfo struct {
	MUid      int64  `thrift:"m_uid,1" json:"m_uid"`
	MMailAddr string `thrift:"m_mail_addr,2" json:"m_mail_addr"`
	MPasswd   string `thrift:"m_passwd,3,required" json:"m_passwd"`
}

func NewForbagLoginInfo() *ForbagLoginInfo {
	return &ForbagLoginInfo{
		MUid: -1,
	}
}

var ForbagLoginInfo_MUid_DEFAULT int64 = -1

func (p *ForbagLoginInfo) GetMUid() int64 {
	return p.MUid
}

var ForbagLoginInfo_MMailAddr_DEFAULT string = ""

func (p *ForbagLoginInfo) GetMMailAddr() string {
	return p.MMailAddr
}

func (p *ForbagLoginInfo) GetMPasswd() string {
	return p.MPasswd
}
func (p *ForbagLoginInfo) IsSetMUid() bool {
	return p.MUid != ForbagLoginInfo_MUid_DEFAULT
}

func (p *ForbagLoginInfo) IsSetMMailAddr() bool {
	return p.MMailAddr != ForbagLoginInfo_MMailAddr_DEFAULT
}

func (p *ForbagLoginInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ForbagLoginInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MUid = v
	}
	return nil
}

func (p *ForbagLoginInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MMailAddr = v
	}
	return nil
}

func (p *ForbagLoginInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MPasswd = v
	}
	return nil
}

func (p *ForbagLoginInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ForbagLoginInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ForbagLoginInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMUid() {
		if err := oprot.WriteFieldBegin("m_uid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:m_uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.MUid)); err != nil {
			return fmt.Errorf("%T.m_uid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:m_uid: %s", p, err)
		}
	}
	return err
}

func (p *ForbagLoginInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMMailAddr() {
		if err := oprot.WriteFieldBegin("m_mail_addr", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:m_mail_addr: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MMailAddr)); err != nil {
			return fmt.Errorf("%T.m_mail_addr (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:m_mail_addr: %s", p, err)
		}
	}
	return err
}

func (p *ForbagLoginInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_passwd", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:m_passwd: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MPasswd)); err != nil {
		return fmt.Errorf("%T.m_passwd (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:m_passwd: %s", p, err)
	}
	return err
}

func (p *ForbagLoginInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ForbagLoginInfo(%+v)", *p)
}

type ForbagBindInfo struct {
	MUid          int64  `thrift:"m_uid,1" json:"m_uid"`
	MMailAddr     string `thrift:"m_mail_addr,2" json:"m_mail_addr"`
	MBrokerUserId string `thrift:"m_broker_user_id,3,required" json:"m_broker_user_id"`
	MBrokerId     int64  `thrift:"m_broker_id,4,required" json:"m_broker_id"`
}

func NewForbagBindInfo() *ForbagBindInfo {
	return &ForbagBindInfo{
		MUid: -1,
	}
}

var ForbagBindInfo_MUid_DEFAULT int64 = -1

func (p *ForbagBindInfo) GetMUid() int64 {
	return p.MUid
}

var ForbagBindInfo_MMailAddr_DEFAULT string = ""

func (p *ForbagBindInfo) GetMMailAddr() string {
	return p.MMailAddr
}

func (p *ForbagBindInfo) GetMBrokerUserId() string {
	return p.MBrokerUserId
}

func (p *ForbagBindInfo) GetMBrokerId() int64 {
	return p.MBrokerId
}
func (p *ForbagBindInfo) IsSetMUid() bool {
	return p.MUid != ForbagBindInfo_MUid_DEFAULT
}

func (p *ForbagBindInfo) IsSetMMailAddr() bool {
	return p.MMailAddr != ForbagBindInfo_MMailAddr_DEFAULT
}

func (p *ForbagBindInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ForbagBindInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MUid = v
	}
	return nil
}

func (p *ForbagBindInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MMailAddr = v
	}
	return nil
}

func (p *ForbagBindInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MBrokerUserId = v
	}
	return nil
}

func (p *ForbagBindInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MBrokerId = v
	}
	return nil
}

func (p *ForbagBindInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ForbagBindInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ForbagBindInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMUid() {
		if err := oprot.WriteFieldBegin("m_uid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:m_uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.MUid)); err != nil {
			return fmt.Errorf("%T.m_uid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:m_uid: %s", p, err)
		}
	}
	return err
}

func (p *ForbagBindInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMMailAddr() {
		if err := oprot.WriteFieldBegin("m_mail_addr", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:m_mail_addr: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MMailAddr)); err != nil {
			return fmt.Errorf("%T.m_mail_addr (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:m_mail_addr: %s", p, err)
		}
	}
	return err
}

func (p *ForbagBindInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_broker_user_id", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:m_broker_user_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MBrokerUserId)); err != nil {
		return fmt.Errorf("%T.m_broker_user_id (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:m_broker_user_id: %s", p, err)
	}
	return err
}

func (p *ForbagBindInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_broker_id", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:m_broker_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MBrokerId)); err != nil {
		return fmt.Errorf("%T.m_broker_id (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:m_broker_id: %s", p, err)
	}
	return err
}

func (p *ForbagBindInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ForbagBindInfo(%+v)", *p)
}

type ForbagBrokerInfo struct {
	MBrokerUserId string `thrift:"m_broker_user_id,1,required" json:"m_broker_user_id"`
	MBrokerId     int64  `thrift:"m_broker_id,2,required" json:"m_broker_id"`
}

func NewForbagBrokerInfo() *ForbagBrokerInfo {
	return &ForbagBrokerInfo{}
}

func (p *ForbagBrokerInfo) GetMBrokerUserId() string {
	return p.MBrokerUserId
}

func (p *ForbagBrokerInfo) GetMBrokerId() int64 {
	return p.MBrokerId
}
func (p *ForbagBrokerInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ForbagBrokerInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MBrokerUserId = v
	}
	return nil
}

func (p *ForbagBrokerInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MBrokerId = v
	}
	return nil
}

func (p *ForbagBrokerInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ForbagBrokerInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ForbagBrokerInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_broker_user_id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m_broker_user_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MBrokerUserId)); err != nil {
		return fmt.Errorf("%T.m_broker_user_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m_broker_user_id: %s", p, err)
	}
	return err
}

func (p *ForbagBrokerInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_broker_id", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:m_broker_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MBrokerId)); err != nil {
		return fmt.Errorf("%T.m_broker_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:m_broker_id: %s", p, err)
	}
	return err
}

func (p *ForbagBrokerInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ForbagBrokerInfo(%+v)", *p)
}

type QuickFixLoginInfo struct {
	MUid      int64  `thrift:"m_uid,1" json:"m_uid"`
	MMailAddr string `thrift:"m_mail_addr,2" json:"m_mail_addr"`
	MPasswd   string `thrift:"m_passwd,3,required" json:"m_passwd"`
}

func NewQuickFixLoginInfo() *QuickFixLoginInfo {
	return &QuickFixLoginInfo{
		MUid: -1,
	}
}

var QuickFixLoginInfo_MUid_DEFAULT int64 = -1

func (p *QuickFixLoginInfo) GetMUid() int64 {
	return p.MUid
}

var QuickFixLoginInfo_MMailAddr_DEFAULT string = ""

func (p *QuickFixLoginInfo) GetMMailAddr() string {
	return p.MMailAddr
}

func (p *QuickFixLoginInfo) GetMPasswd() string {
	return p.MPasswd
}
func (p *QuickFixLoginInfo) IsSetMUid() bool {
	return p.MUid != QuickFixLoginInfo_MUid_DEFAULT
}

func (p *QuickFixLoginInfo) IsSetMMailAddr() bool {
	return p.MMailAddr != QuickFixLoginInfo_MMailAddr_DEFAULT
}

func (p *QuickFixLoginInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QuickFixLoginInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MUid = v
	}
	return nil
}

func (p *QuickFixLoginInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MMailAddr = v
	}
	return nil
}

func (p *QuickFixLoginInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MPasswd = v
	}
	return nil
}

func (p *QuickFixLoginInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QuickFixLoginInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QuickFixLoginInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMUid() {
		if err := oprot.WriteFieldBegin("m_uid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:m_uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.MUid)); err != nil {
			return fmt.Errorf("%T.m_uid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:m_uid: %s", p, err)
		}
	}
	return err
}

func (p *QuickFixLoginInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMMailAddr() {
		if err := oprot.WriteFieldBegin("m_mail_addr", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:m_mail_addr: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MMailAddr)); err != nil {
			return fmt.Errorf("%T.m_mail_addr (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:m_mail_addr: %s", p, err)
		}
	}
	return err
}

func (p *QuickFixLoginInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_passwd", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:m_passwd: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MPasswd)); err != nil {
		return fmt.Errorf("%T.m_passwd (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:m_passwd: %s", p, err)
	}
	return err
}

func (p *QuickFixLoginInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuickFixLoginInfo(%+v)", *p)
}

type QuickFixBindInfo struct {
	MUid      int64  `thrift:"m_uid,1" json:"m_uid"`
	MMailAddr string `thrift:"m_mail_addr,2" json:"m_mail_addr"`
	MAccount  string `thrift:"m_account,3,required" json:"m_account"`
}

func NewQuickFixBindInfo() *QuickFixBindInfo {
	return &QuickFixBindInfo{
		MUid: -1,
	}
}

var QuickFixBindInfo_MUid_DEFAULT int64 = -1

func (p *QuickFixBindInfo) GetMUid() int64 {
	return p.MUid
}

var QuickFixBindInfo_MMailAddr_DEFAULT string = ""

func (p *QuickFixBindInfo) GetMMailAddr() string {
	return p.MMailAddr
}

func (p *QuickFixBindInfo) GetMAccount() string {
	return p.MAccount
}
func (p *QuickFixBindInfo) IsSetMUid() bool {
	return p.MUid != QuickFixBindInfo_MUid_DEFAULT
}

func (p *QuickFixBindInfo) IsSetMMailAddr() bool {
	return p.MMailAddr != QuickFixBindInfo_MMailAddr_DEFAULT
}

func (p *QuickFixBindInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QuickFixBindInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MUid = v
	}
	return nil
}

func (p *QuickFixBindInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MMailAddr = v
	}
	return nil
}

func (p *QuickFixBindInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MAccount = v
	}
	return nil
}

func (p *QuickFixBindInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QuickFixBindInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QuickFixBindInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMUid() {
		if err := oprot.WriteFieldBegin("m_uid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:m_uid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.MUid)); err != nil {
			return fmt.Errorf("%T.m_uid (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:m_uid: %s", p, err)
		}
	}
	return err
}

func (p *QuickFixBindInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMMailAddr() {
		if err := oprot.WriteFieldBegin("m_mail_addr", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:m_mail_addr: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MMailAddr)); err != nil {
			return fmt.Errorf("%T.m_mail_addr (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:m_mail_addr: %s", p, err)
		}
	}
	return err
}

func (p *QuickFixBindInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_account", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:m_account: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MAccount)); err != nil {
		return fmt.Errorf("%T.m_account (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:m_account: %s", p, err)
	}
	return err
}

func (p *QuickFixBindInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuickFixBindInfo(%+v)", *p)
}

type AuthenticationServerInfo struct {
	Ip        string `thrift:"ip,1,required" json:"ip"`
	Port      int32  `thrift:"port,2,required" json:"port"`
	Timestamp int64  `thrift:"timestamp,3" json:"timestamp"`
	Flag      bool   `thrift:"flag,4" json:"flag"`
	Tags      string `thrift:"tags,5" json:"tags"`
}

func NewAuthenticationServerInfo() *AuthenticationServerInfo {
	return &AuthenticationServerInfo{}
}

func (p *AuthenticationServerInfo) GetIp() string {
	return p.Ip
}

func (p *AuthenticationServerInfo) GetPort() int32 {
	return p.Port
}

var AuthenticationServerInfo_Timestamp_DEFAULT int64 = 0

func (p *AuthenticationServerInfo) GetTimestamp() int64 {
	return p.Timestamp
}

var AuthenticationServerInfo_Flag_DEFAULT bool = false

func (p *AuthenticationServerInfo) GetFlag() bool {
	return p.Flag
}

var AuthenticationServerInfo_Tags_DEFAULT string = ""

func (p *AuthenticationServerInfo) GetTags() string {
	return p.Tags
}
func (p *AuthenticationServerInfo) IsSetTimestamp() bool {
	return p.Timestamp != AuthenticationServerInfo_Timestamp_DEFAULT
}

func (p *AuthenticationServerInfo) IsSetFlag() bool {
	return p.Flag != AuthenticationServerInfo_Flag_DEFAULT
}

func (p *AuthenticationServerInfo) IsSetTags() bool {
	return p.Tags != AuthenticationServerInfo_Tags_DEFAULT
}

func (p *AuthenticationServerInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AuthenticationServerInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Ip = v
	}
	return nil
}

func (p *AuthenticationServerInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *AuthenticationServerInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *AuthenticationServerInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Flag = v
	}
	return nil
}

func (p *AuthenticationServerInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Tags = v
	}
	return nil
}

func (p *AuthenticationServerInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AuthenticationServerInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AuthenticationServerInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ip: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ip)); err != nil {
		return fmt.Errorf("%T.ip (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ip: %s", p, err)
	}
	return err
}

func (p *AuthenticationServerInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:port: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return fmt.Errorf("%T.port (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:port: %s", p, err)
	}
	return err
}

func (p *AuthenticationServerInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticationServerInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFlag() {
		if err := oprot.WriteFieldBegin("flag", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:flag: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Flag)); err != nil {
			return fmt.Errorf("%T.flag (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:flag: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticationServerInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err := oprot.WriteFieldBegin("tags", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:tags: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Tags)); err != nil {
			return fmt.Errorf("%T.tags (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:tags: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticationServerInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticationServerInfo(%+v)", *p)
}

type UserLastUpdateInfo struct {
	MUid             int64  `thrift:"m_uid,1,required" json:"m_uid"`
	MLastupdateField string `thrift:"m_lastupdate_field,2" json:"m_lastupdate_field"`
	MLastupdateTime  string `thrift:"m_lastupdate_time,3" json:"m_lastupdate_time"`
}

func NewUserLastUpdateInfo() *UserLastUpdateInfo {
	return &UserLastUpdateInfo{
		MUid: -1,
	}
}

func (p *UserLastUpdateInfo) GetMUid() int64 {
	return p.MUid
}

var UserLastUpdateInfo_MLastupdateField_DEFAULT string = ""

func (p *UserLastUpdateInfo) GetMLastupdateField() string {
	return p.MLastupdateField
}

var UserLastUpdateInfo_MLastupdateTime_DEFAULT string = ""

func (p *UserLastUpdateInfo) GetMLastupdateTime() string {
	return p.MLastupdateTime
}
func (p *UserLastUpdateInfo) IsSetMLastupdateField() bool {
	return p.MLastupdateField != UserLastUpdateInfo_MLastupdateField_DEFAULT
}

func (p *UserLastUpdateInfo) IsSetMLastupdateTime() bool {
	return p.MLastupdateTime != UserLastUpdateInfo_MLastupdateTime_DEFAULT
}

func (p *UserLastUpdateInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UserLastUpdateInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MUid = v
	}
	return nil
}

func (p *UserLastUpdateInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MLastupdateField = v
	}
	return nil
}

func (p *UserLastUpdateInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MLastupdateTime = v
	}
	return nil
}

func (p *UserLastUpdateInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserLastUpdateInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UserLastUpdateInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m_uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MUid)); err != nil {
		return fmt.Errorf("%T.m_uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m_uid: %s", p, err)
	}
	return err
}

func (p *UserLastUpdateInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMLastupdateField() {
		if err := oprot.WriteFieldBegin("m_lastupdate_field", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:m_lastupdate_field: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MLastupdateField)); err != nil {
			return fmt.Errorf("%T.m_lastupdate_field (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:m_lastupdate_field: %s", p, err)
		}
	}
	return err
}

func (p *UserLastUpdateInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMLastupdateTime() {
		if err := oprot.WriteFieldBegin("m_lastupdate_time", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:m_lastupdate_time: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MLastupdateTime)); err != nil {
			return fmt.Errorf("%T.m_lastupdate_time (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:m_lastupdate_time: %s", p, err)
		}
	}
	return err
}

func (p *UserLastUpdateInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserLastUpdateInfo(%+v)", *p)
}

type UIDQueryRequest struct {
	MStarttime string `thrift:"m_starttime,1,required" json:"m_starttime"`
	MEndtime   string `thrift:"m_endtime,2" json:"m_endtime"`
}

func NewUIDQueryRequest() *UIDQueryRequest {
	return &UIDQueryRequest{}
}

func (p *UIDQueryRequest) GetMStarttime() string {
	return p.MStarttime
}

var UIDQueryRequest_MEndtime_DEFAULT string = ""

func (p *UIDQueryRequest) GetMEndtime() string {
	return p.MEndtime
}
func (p *UIDQueryRequest) IsSetMEndtime() bool {
	return p.MEndtime != UIDQueryRequest_MEndtime_DEFAULT
}

func (p *UIDQueryRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UIDQueryRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MStarttime = v
	}
	return nil
}

func (p *UIDQueryRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MEndtime = v
	}
	return nil
}

func (p *UIDQueryRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UIDQueryRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UIDQueryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_starttime", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m_starttime: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MStarttime)); err != nil {
		return fmt.Errorf("%T.m_starttime (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m_starttime: %s", p, err)
	}
	return err
}

func (p *UIDQueryRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMEndtime() {
		if err := oprot.WriteFieldBegin("m_endtime", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:m_endtime: %s", p, err)
		}
		if err := oprot.WriteString(string(p.MEndtime)); err != nil {
			return fmt.Errorf("%T.m_endtime (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:m_endtime: %s", p, err)
		}
	}
	return err
}

func (p *UIDQueryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UIDQueryRequest(%+v)", *p)
}

type UIDQueryResponse struct {
	MStatus Errno   `thrift:"m_status,1,required" json:"m_status"`
	MUids   []int64 `thrift:"m_uids,2,required" json:"m_uids"`
}

func NewUIDQueryResponse() *UIDQueryResponse {
	return &UIDQueryResponse{}
}

func (p *UIDQueryResponse) GetMStatus() Errno {
	return p.MStatus
}

func (p *UIDQueryResponse) GetMUids() []int64 {
	return p.MUids
}
func (p *UIDQueryResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UIDQueryResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := Errno(v)
		p.MStatus = temp
	}
	return nil
}

func (p *UIDQueryResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.MUids = tSlice
	for i := 0; i < size; i++ {
		var _elem0 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem0 = v
		}
		p.MUids = append(p.MUids, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *UIDQueryResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UIDQueryResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UIDQueryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_status", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m_status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MStatus)); err != nil {
		return fmt.Errorf("%T.m_status (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m_status: %s", p, err)
	}
	return err
}

func (p *UIDQueryResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_uids", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:m_uids: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.MUids)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.MUids {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:m_uids: %s", p, err)
	}
	return err
}

func (p *UIDQueryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UIDQueryResponse(%+v)", *p)
}

type LoginRecordQueryResponse struct {
	MStatus       Errno                `thrift:"m_status,1,required" json:"m_status"`
	MLoginRecords []*FormaxLoginRecord `thrift:"m_login_records,2,required" json:"m_login_records"`
}

func NewLoginRecordQueryResponse() *LoginRecordQueryResponse {
	return &LoginRecordQueryResponse{}
}

func (p *LoginRecordQueryResponse) GetMStatus() Errno {
	return p.MStatus
}

func (p *LoginRecordQueryResponse) GetMLoginRecords() []*FormaxLoginRecord {
	return p.MLoginRecords
}
func (p *LoginRecordQueryResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoginRecordQueryResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := Errno(v)
		p.MStatus = temp
	}
	return nil
}

func (p *LoginRecordQueryResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FormaxLoginRecord, 0, size)
	p.MLoginRecords = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &FormaxLoginRecord{
			MUid: -1,
		}
		if err := _elem1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem1, err)
		}
		p.MLoginRecords = append(p.MLoginRecords, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *LoginRecordQueryResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LoginRecordQueryResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LoginRecordQueryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_status", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m_status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MStatus)); err != nil {
		return fmt.Errorf("%T.m_status (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m_status: %s", p, err)
	}
	return err
}

func (p *LoginRecordQueryResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_login_records", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:m_login_records: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MLoginRecords)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.MLoginRecords {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:m_login_records: %s", p, err)
	}
	return err
}

func (p *LoginRecordQueryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRecordQueryResponse(%+v)", *p)
}

type UpdateInfoQueryResponse struct {
	MStatus         Errno               `thrift:"m_status,1,required" json:"m_status"`
	MLastupdateInfo *UserLastUpdateInfo `thrift:"m_lastupdate_info,2,required" json:"m_lastupdate_info"`
}

func NewUpdateInfoQueryResponse() *UpdateInfoQueryResponse {
	return &UpdateInfoQueryResponse{}
}

func (p *UpdateInfoQueryResponse) GetMStatus() Errno {
	return p.MStatus
}

var UpdateInfoQueryResponse_MLastupdateInfo_DEFAULT *UserLastUpdateInfo

func (p *UpdateInfoQueryResponse) GetMLastupdateInfo() *UserLastUpdateInfo {
	if !p.IsSetMLastupdateInfo() {
		return UpdateInfoQueryResponse_MLastupdateInfo_DEFAULT
	}
	return p.MLastupdateInfo
}
func (p *UpdateInfoQueryResponse) IsSetMLastupdateInfo() bool {
	return p.MLastupdateInfo != nil
}

func (p *UpdateInfoQueryResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateInfoQueryResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := Errno(v)
		p.MStatus = temp
	}
	return nil
}

func (p *UpdateInfoQueryResponse) ReadField2(iprot thrift.TProtocol) error {
	p.MLastupdateInfo = &UserLastUpdateInfo{
		MUid: -1,
	}
	if err := p.MLastupdateInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MLastupdateInfo, err)
	}
	return nil
}

func (p *UpdateInfoQueryResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateInfoQueryResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateInfoQueryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_status", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:m_status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MStatus)); err != nil {
		return fmt.Errorf("%T.m_status (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:m_status: %s", p, err)
	}
	return err
}

func (p *UpdateInfoQueryResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_lastupdate_info", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:m_lastupdate_info: %s", p, err)
	}
	if err := p.MLastupdateInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.MLastupdateInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:m_lastupdate_info: %s", p, err)
	}
	return err
}

func (p *UpdateInfoQueryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateInfoQueryResponse(%+v)", *p)
}
